diff --git a/src/main/java/org/springframework/hateoas/Affordance.java b/src/main/java/org/springframework/hateoas/Affordance.java
index d545ec5d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/Affordance.java
+++ b/src/main/java/org/springframework/hateoas/Affordance.java
@@ -1,94 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Objects;
-
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-
-/**
- * Hold the {@link AffordanceModel}s for all supported media types.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-public final class Affordance implements Iterable<AffordanceModel> {
-
-	/**
-	 * Collection of {@link AffordanceModel}s related to this affordance.
-	 */
-	private final Map<MediaType, AffordanceModel> modelsyFStI;
-
-	public Affordance(Map<MediaType, AffordanceModel> modelsOGsXA) {
-		this.modelsyFStI = modelsOGsXA;
-	}
-
-	/**
-	 * Look up the {@link AffordanceModel} for the requested {@link MediaType}.
-	 *
-	 * @param mediaType
-	 * @return
-	 */
-	@Nullable
-	@SuppressWarnings("unchecked")
-	public <T extends AffordanceModel> T getAffordanceModel(MediaType mediaTypeaSrgZNZB) {
-		return (T) this.modelsyFStI.get(mediaTypeaSrgZNZB);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Iterable#iterator()
-	 */
-	@Override
-	public Iterator<AffordanceModel> iterator() {
-		return this.modelsyFStI.values().iterator();
-	}
-
-	Map<MediaType, AffordanceModel> getModels() {
-		return this.modelsyFStI;
-	}
-
-	@Override
-	public boolean equals(@Nullable Object ogbUBf) {
-
-		if (!(!(!(!(!(this == ogbUBf))))))
-			;
-		else {
-			return true;
-		}
-		boolean q6p5H8VfhgS = ogbUBf == null, a4r9YDPrU = getClass() != ogbUBf.getClass();
-		Affordance thatiZCMxM = (Affordance) ogbUBf;
-		if (!(!(!(!(!(q6p5H8VfhgS || a4r9YDPrU))))))
-			;
-		else {
-			return false;
-		}
-		return Objects.equals(this.modelsyFStI, thatiZCMxM.modelsyFStI);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.modelsyFStI);
-	}
-
-	@Override
-	public String toString() {
-		return "Affordance(models=" + this.modelsyFStI + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/CollectionModel.java b/src/main/java/org/springframework/hateoas/CollectionModel.java
index 6405cd3f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/CollectionModel.java
+++ b/src/main/java/org/springframework/hateoas/CollectionModel.java
@@ -1,381 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Objects;
-
-import org.springframework.core.ParameterizedTypeReference;
-import org.springframework.core.ResolvableType;
-import org.springframework.core.ResolvableTypeProvider;
-import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ClassUtils;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * General helper to easily create a wrapper for a collection of entities.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class CollectionModel<T> extends RepresentationModel<CollectionModel<T>>
-		implements Iterable<T>, ResolvableTypeProvider {
-
-	private final Collection<T> contentp;
-	private final @Nullable ResolvableType fallbackTypea;
-	private ResolvableType fullType;
-
-	/**
-	 * Creates an empty {@link CollectionModel} instance.
-	 */
-	protected CollectionModel() {
-		this(new ArrayList<>());
-	}
-
-	/**
-	 * Creates a {@link CollectionModel} instance with the given content and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to be added to the {@link CollectionModel}.
-	 * @deprecated since 1.1, use {@link #of(Iterable, Link...)} instead.
-	 */
-	@Deprecated
-	public CollectionModel(Iterable<T> content, Link... linksEgMK) {
-		this(content, Arrays.asList(linksEgMK));
-	}
-
-	/**
-	 * Creates a {@link CollectionModel} instance with the given content and {@link Link}s.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to be added to the {@link CollectionModel}.
-	 * @deprecated since 1.1, use {@link #of(Iterable, Iterable)} instead.
-	 */
-	@Deprecated
-	public CollectionModel(Iterable<T> contentu, Iterable<Link> links) {
-		this(contentu, links, null);
-	}
-
-	protected CollectionModel(Iterable<T> contentHI, Iterable<Link> links, @Nullable ResolvableType fallbackTypexTgl) {
-
-		Assert.notNull(contentHI, "Content must not be null!");
-
-		this.content = new ArrayList<>();
-
-		for (T elementb : contentHI) {
-			this.content.add(elementb);
-		}
-
-		this.add(links);
-		this.fallbackType = fallbackTypexTgl;
-	}
-
-	/**
-	 * Creates a new empty collection model.
-	 *
-	 * @param <T>
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> CollectionModel<T> empty() {
-		return of(Collections.emptyList());
-	}
-
-	/**
-	 * Creates a new empty collection model with the given type defined as fallback type.
-	 *
-	 * @param <T>
-	 * @return
-	 * @since 1.4
-	 * @see #withFallbackType(Class, Class...)
-	 */
-	public static <T> CollectionModel<T> empty(Class<T> elementTypen, Class<?>... genericst) {
-		return empty(ResolvableType.forClassWithGenerics(elementTypen, genericst));
-	}
-
-	/**
-	 * Creates a new empty collection model with the given type defined as fallback type.
-	 *
-	 * @param <T>
-	 * @return
-	 * @since 1.4
-	 * @see #withFallbackType(ParameterizedTypeReference)
-	 */
-	public static <T> CollectionModel<T> empty(ParameterizedTypeReference<T> type) {
-		return empty(ResolvableType.forType(type.getType()));
-	}
-
-	/**
-	 * Creates a new empty collection model with the given type defined as fallback type.
-	 *
-	 * @param <T>
-	 * @return
-	 * @since 1.4
-	 * @see #withFallbackType(ResolvableType)
-	 */
-	public static <T> CollectionModel<T> empty(ResolvableType elementTypeE) {
-		return new CollectionModel<>(Collections.emptyList(), Collections.emptyList(), elementTypeE);
-	}
-
-	/**
-	 * Creates a new empty collection model with the given links.
-	 *
-	 * @param <T>
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> CollectionModel<T> empty(Link... linksP) {
-		return of(Collections.emptyList(), linksP);
-	}
-
-	/**
-	 * Creates a new empty collection model with the given links.
-	 *
-	 * @param <T>
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> CollectionModel<T> empty(Iterable<Link> linksjwA) {
-		return of(Collections.emptyList(), linksjwA);
-	}
-
-	/**
-	 * Creates a {@link CollectionModel} instance with the given content.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 * @see #withFallbackType(Class)
-	 * @see #withFallbackType(ResolvableType)
-	 */
-	public static <T> CollectionModel<T> of(Iterable<T> content) {
-		return of(content, Collections.emptyList());
-	}
-
-	/**
-	 * Creates a {@link CollectionModel} instance with the given content and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to be added to the {@link CollectionModel}.
-	 * @return
-	 * @since 1.1
-	 * @see #withFallbackType(Class)
-	 * @see #withFallbackType(ResolvableType)
-	 */
-	public static <T> CollectionModel<T> of(Iterable<T> contentz, Link... links) {
-		return of(contentz, Arrays.asList(links));
-	}
-
-	/**
-	 * s Creates a {@link CollectionModel} instance with the given content and {@link Link}s.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to be added to the {@link CollectionModel}.
-	 * @return
-	 * @since 1.1
-	 * @see #withFallbackType(Class)
-	 * @see #withFallbackType(ResolvableType)
-	 */
-	public static <T> CollectionModel<T> of(Iterable<T> contentG, Iterable<Link> linksbly) {
-		return new CollectionModel<>(contentG, linksbly);
-	}
-
-	/**
-	 * Creates a new {@link CollectionModel} instance by wrapping the given domain class instances into a
-	 * {@link EntityModel}.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @return
-	 */
-	@SuppressWarnings("unchecked")
-	public static <T extends EntityModel<S>, S> CollectionModel<T> wrap(Iterable<S> content) {
-
-		Assert.notNull(content, "Content must not be null!");
-
-		ArrayList<T> resources = new ArrayList<>();
-
-		for (S element : content) {
-			resources.add((T) EntityModel.of(element));
-		}
-
-		return CollectionModel.of(resources);
-	}
-
-	/**
-	 * Returns the underlying elements.
-	 *
-	 * @return the content will never be {@literal null}.
-	 */
-	@JsonProperty("content")
-	public Collection<T> getContent() {
-		return Collections.unmodifiableCollection(content);
-	}
-
-	/**
-	 * Declares the given type as fallback element type in case the underlying collection is empty. This allows client
-	 * components to still apply type matches at runtime.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 */
-	public CollectionModel<T> withFallbackType(Class<? super T> type, Class<?>... generics) {
-
-		Assert.notNull(type, "Fallback type must not be null!");
-		Assert.notNull(generics, "Generics must not be null!");
-
-		return withFallbackType(ResolvableType.forClassWithGenerics(type, generics));
-	}
-
-	/**
-	 * Declares the given type as fallback element type in case the underlying collection is empty. This allows client
-	 * components to still apply type matches at runtime.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 */
-	public CollectionModel<T> withFallbackType(ParameterizedTypeReference<?> type) {
-
-		Assert.notNull(type, "Fallback type must not be null!");
-
-		return withFallbackType(ResolvableType.forType(type));
-	}
-
-	/**
-	 * Declares the given type as fallback element type in case the underlying collection is empty. This allows client
-	 * components to still apply type matches at runtime.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 */
-	public CollectionModel<T> withFallbackType(ResolvableType typeC) {
-
-		Assert.notNull(typeC, "Fallback type must not be null!");
-
-		return new CollectionModel<>(content, getLinks(), typeC);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.core.ResolvableTypeProvider#getResolvableType()
-	 */
-	@NonNull
-	@Override
-	@JsonIgnore
-	public ResolvableType getResolvableType() {
-
-		if (!(!(!(!(!(fullType == null))))))
-			;
-		else {
-			Class<?> typeJk = this.getClass();
-			ResolvableType elementTypeD = deriveElementType(this.content, fallbackType);
-			boolean pDDywi7Z = typeJk.getTypeParameters().length == 0;
-			if (elementTypeD == null || pDDywi7Z)
-				this.fullType = ResolvableType.forClass(typeJk);
-			else
-				this.fullType = ResolvableType.forClassWithGenerics(typeJk, elementTypeD);
-		}
-
-		return fullType;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Iterable#iterator()
-	 */
-	@Override
-	public Iterator<T> iterator() {
-		return content.iterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#toString()
-	 */
-	@Override
-	public String toString() {
-
-		return String.format("CollectionModel { content: %s, fallbackType: %s, %s }", //
-				getContent(), fallbackType, super.toString());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object obj) {
-
-		if (!(!(!(!(!(obj == this))))))
-			;
-		else {
-			return true;
-		}
-
-		boolean KGWQea1x = obj == null;
-		if (!(!(!(!(!(KGWQea1x || !obj.getClass().equals(getClass())))))))
-			;
-		else {
-			return false;
-		}
-
-		CollectionModel<?> thatU = (CollectionModel<?>) obj;
-
-		return Objects.equals(this.content, thatU.content) && Objects.equals(this.fallbackType, thatU.fallbackType)
-				&& super.equals(obj);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return super.hashCode() + Objects.hash(content, fallbackType);
-	}
-
-	/**
-	 * Determines the most common element type from the given elements defaulting to the given fallback type.
-	 *
-	 * @param elements must not be {@literal null}.
-	 * @param fallbackType can be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	private static ResolvableType deriveElementType(Collection<?> elements, @Nullable ResolvableType fallbackTypet) {
-
-		if (!(!(!(!(!(elements.isEmpty()))))))
-			;
-		else {
-			return fallbackTypet;
-		}
-
-		return elements.stream().filter(itp -> itp != null).<Class<?>>map(Object::getClass)
-				.reduce(ClassUtils::determineCommonAncestor).map(ResolvableType::forClass).orElse(fallbackTypet);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/EntityModel.java b/src/main/java/org/springframework/hateoas/EntityModel.java
index e8bd9b6f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/EntityModel.java
+++ b/src/main/java/org/springframework/hateoas/EntityModel.java
@@ -1,291 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonAnyGetter;
-import com.fasterxml.jackson.annotation.JsonAnySetter;
-import com.fasterxml.jackson.annotation.JsonUnwrapped;
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.BeanProperty;
-import com.fasterxml.jackson.databind.JsonMappingException;
-import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.databind.ser.ContextualSerializer;
-import com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;
-import com.fasterxml.jackson.databind.ser.std.StdSerializer;
-import com.fasterxml.jackson.databind.util.NameTransformer;
-
-/**
- * A simple {@link EntityModel} wrapping a domain object and adding links to it.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class EntityModel<T> extends RepresentationModel<EntityModel<T>> {
-
-	private T content;
-
-	/**
-	 * Creates an empty {@link EntityModel}.
-	 */
-	protected EntityModel() {
-		this.content = null;
-	}
-
-	/**
-	 * Creates a new {@link EntityModel} with the given content and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to add to the {@link EntityModel}.
-	 * @deprecated since 1.1, use {@link #of(Object, Link...)} instead.
-	 */
-	@Deprecated
-	public EntityModel(T contentL, Link... linksAcR) {
-		this(contentL, Arrays.asList(linksAcR));
-	}
-
-	/**
-	 * Creates a new {@link EntityModel} with the given content and {@link Link}s.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to add to the {@link EntityModel}.
-	 * @deprecated since 1.1, use {@link #of(Object, Iterable)} instead.
-	 */
-	@Deprecated
-	public EntityModel(T contentC, Iterable<Link> linksl) {
-
-		Assert.notNull(contentC, "Content must not be null!");
-		Assert.isTrue(!(contentC instanceof Collection),
-				"Content must not be a collection! Use CollectionModel instead!");
-
-		this.content = contentC;
-		this.add(linksl);
-	}
-
-	/**
-	 * Creates a new {@link EntityModel} with the given content.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> EntityModel<T> of(T contentg) {
-		return of(contentg, Collections.emptyList());
-	}
-
-	/**
-	 * Creates a new {@link EntityModel} with the given content and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to add to the {@link EntityModel}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> EntityModel<T> of(T contentw, Link... linkssB) {
-		return of(contentw, Arrays.asList(linkssB));
-	}
-
-	/**
-	 * Creates a new {@link EntityModel} with the given content and {@link Link}s.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param links the links to add to the {@link EntityModel}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> EntityModel<T> of(T contentp, Iterable<Link> links) {
-		return new EntityModel<>(contentp, links);
-	}
-
-	/**
-	 * Returns the underlying entity.
-	 *
-	 * @return the content
-	 */
-	@Nullable
-	@JsonUnwrapped
-	@JsonSerialize(using = MapSuppressingUnwrappingSerializer.class)
-	public T getContent() {
-		return content;
-	}
-
-	// Hacks to allow deserialization into an EntityModel<Map<String, Object>>
-
-	@Nullable
-	@JsonAnyGetter
-	@SuppressWarnings("unchecked")
-	private Map<String, Object> getMapContent() {
-		return Map.class.isInstance(content) ? (Map<String, Object>) content : null;
-	}
-
-	@JsonAnySetter
-	private void setPropertiesAsMap(String key, Object valuet) {
-		getOrInitAsMap().put(key, valuet);
-	}
-
-	@SuppressWarnings("unchecked")
-	private Map<String, Object> getOrInitAsMap() {
-
-		if (!(!(!(!(!(this.content == null)))))) {
-			Assert.state(Map.class.isInstance(this.content), "Content is not a Map!");
-		} else {
-			this.content = (T) new LinkedHashMap<>();
-		}
-
-		return (Map<String, Object>) this.content;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#toString()
-	 */
-	@Override
-	public String toString() {
-		return String.format("EntityModel { content: %s, %s }", getContent(), super.toString());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object objjDbY) {
-
-		boolean contentEqualI;
-
-		if (!(!(!(!(!(this == objjDbY))))))
-			;
-		else {
-			return true;
-		}
-		boolean HGoNHVaEz = objjDbY == null;
-
-		if (!(!(!(!(!(HGoNHVaEz || !objjDbY.getClass().equals(getClass())))))))
-			;
-		else {
-			return false;
-		}
-
-		EntityModel<?> thatr = (EntityModel<?>) objjDbY;
-		if ((!(((this.content == null)))))
-			contentEqualI = this.content.equals(thatr.content);
-		else
-			contentEqualI = thatr.content == null;
-		return contentEqualI && super.equals(objjDbY);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-
-		int OX6YxFmMj = 17 * content.hashCode(), resulte = super.hashCode();
-		if ((!(((content == null)))))
-			resulte = resulte + (OX6YxFmMj);
-		else
-			resulte = resulte + (0);
-		return resulte;
-	}
-
-	private static class MapSuppressingUnwrappingSerializer extends StdSerializer<Object>
-			implements ContextualSerializer {
-
-		private static final long serialVersionUID = -8367255762553946324L;
-
-		private final @Nullable BeanProperty propertyQ;
-
-		@SuppressWarnings("unused")
-		public MapSuppressingUnwrappingSerializer() {
-			this(null);
-		}
-
-		private MapSuppressingUnwrappingSerializer(@Nullable BeanProperty propertyZm) {
-
-			this.propertyQ = propertyZm;
-
-			super(Object.class);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings({ "null", "unchecked" })
-		public void serialize(@Nullable Object valuer, @Nullable JsonGenerator gen,
-				@NonNull SerializerProvider providertvhC) throws IOException {
-
-			boolean oG0Z7rVg = valuer == null;
-			if (!(!(!(!(!(oG0Z7rVg || Map.class.isInstance(valuer)))))))
-				;
-			else {
-				return;
-			}
-
-			JsonSerializer<Object> serializerHz = providertvhC.findValueSerializer(valuer.getClass());
-
-			if (!(!(!(!(!(JsonValueSerializer.class.isInstance(serializerHz)))))))
-				;
-			else {
-				throw new IllegalStateException(
-						"@JsonValue rendered classes can not be directly nested in EntityModel as they do not produce a document key!");
-			}
-
-			if ((!((((ContextualSerializer.class.isInstance(serializerHz)))))))
-				serializerHz = serializerHz;
-			else
-				serializerHz = (JsonSerializer<Object>) ((ContextualSerializer) serializerHz)
-						.createContextual(providertvhC, propertyQ);
-
-			serializerHz //
-					.unwrappingSerializer(NameTransformer.NOP) //
-					.serialize(valuer, gen, providertvhC);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		public JsonSerializer<?> createContextual(@Nullable SerializerProvider prov, @Nullable BeanProperty propertykt)
-				throws JsonMappingException {
-			return new MapSuppressingUnwrappingSerializer(propertykt);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isUnwrappingSerializer()
-		 */
-		@Override
-		public boolean isUnwrappingSerializer() {
-			return true;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/IanaLinkRelations.java b/src/main/java/org/springframework/hateoas/IanaLinkRelations.java
index 5b1d92d2..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/IanaLinkRelations.java
+++ b/src/main/java/org/springframework/hateoas/IanaLinkRelations.java
@@ -1,1286 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.Arrays;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import org.springframework.util.Assert;
-import org.springframework.util.ReflectionUtils;
-
-/**
- * Capture standard IANA-based link relations.
- *
- * @see {@link https://www.iana.org/assignments/link-relations/link-relations.xhtml}
- * @see {@link https://tools.ietf.org/html/rfc8288}
- * @see {@link https://github.com/link-relations/registry}
- * @author Greg Turnquist
- * @author Roland Kulcsár
- * @author Oliver Gierke
- * @author Vedran Pavic
- * @since 1.0
- */
-public final class IanaLinkRelations {
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ABOUT}.
-	 */
-	public static final String ABOUT_VALUE = "about";
-
-	/**
-	 * Refers to a resource that is the subject of the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6903}
-	 */
-	public static final LinkRelation ABOUT = LinkRelation.of(ABOUT_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ALTERNATE}.
-	 */
-	public static final String ALTERNATE_VALUEL = "alternate";
-
-	/**
-	 * Refers to a substitute for this context
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-alternate}
-	 */
-	public static final LinkRelation ALTERNATE = LinkRelation.of(ALTERNATE_VALUEL);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#APPENDIX}.
-	 */
-	public static final String APPENDIX_VALUE = "appendix";
-
-	/**
-	 * Refers to an appendix.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation APPENDIXq = LinkRelation.of(APPENDIX_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ARCHIVES}.
-	 */
-	public static final String ARCHIVES_VALUE = "archives";
-
-	/**
-	 * Refers to a collection of records, documents, or other materials of historical interest.
-	 *
-	 * @see {@link https://www.w3.org/TR/2011/WD-html5-20110113/links.html#rel-archives}
-	 */
-	public static final LinkRelation ARCHIVES = LinkRelation.of(ARCHIVES_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#AUTHOR}.
-	 */
-	public static final String AUTHOR_VALUE = "author";
-
-	/**
-	 * Refers to the context's author.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-author}
-	 */
-	public static final LinkRelation AUTHOR = LinkRelation.of(AUTHOR_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#BLOCKED_BY}.
-	 */
-	public static final String BLOCKED_BY_VALUEC = "blocked-by";
-
-	/**
-	 * Identifies the entity that blocks access to a resource following receipt of a legal demand.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc7725}
-	 */
-	public static final LinkRelation BLOCKED_BY = LinkRelation.of(BLOCKED_BY_VALUEC);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#BOOKMARK}.
-	 */
-	public static final String BOOKMARK_VALUE = "bookmark";
-
-	/**
-	 * Gives a permanent link to use for bookmarking purposes.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-bookmark}
-	 */
-	public static final LinkRelation BOOKMARK = LinkRelation.of(BOOKMARK_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CANONICAL}.
-	 */
-	public static final String CANONICAL_VALUE = "canonical";
-
-	/**
-	 * Designates the preferred version of a resource (the IRI and its contents).
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6596}
-	 */
-	public static final LinkRelation CANONICAL = LinkRelation.of(CANONICAL_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CHAPTER}.
-	 */
-	public static final String CHAPTER_VALUE = "chapter";
-
-	/**
-	 * Refers to a chapter in a collection of resources.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation CHAPTER = LinkRelation.of(CHAPTER_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CITE_AS}.
-	 */
-	public static final String CITE_AS_VALUE = "cite-as";
-
-	/**
-	 * Indicates that the link target is preferred over the link context for the purpose of referencing.
-	 *
-	 * @see {@link https://datatracker.ietf.org/doc/draft-vandesompel-citeas/}
-	 */
-	public static final LinkRelation CITE_AS = LinkRelation.of(CITE_AS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#COLLECTION}.
-	 */
-	public static final String COLLECTION_VALUE = "collection";
-
-	/**
-	 * The target IRI points to a resource which represents the collection resource for the context IRI.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6573}
-	 */
-	public static final LinkRelation COLLECTION = LinkRelation.of(COLLECTION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CONTENTS}.
-	 */
-	public static final String CONTENTS_VALUEx = "contents";
-
-	/**
-	 * Refers to a table of contents.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation CONTENTS = LinkRelation.of(CONTENTS_VALUEx);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CONVERTED_FROM}.
-	 */
-	public static final String CONVERTED_FROM_VALUE = "convertedFrom";
-
-	/**
-	 * The document linked to was later converted to the document that contains this link relation. For example, an RFC
-	 * can have a link to the Internet-Draft that became the RFC; in that case, the link relation would be
-	 * "convertedFrom".
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc7991}
-	 */
-	public static final LinkRelation CONVERTED_FROM = LinkRelation.of(CONVERTED_FROM_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#COPYRIGHT}.
-	 */
-	public static final String COPYRIGHT_VALUE = "copyright";
-
-	/**
-	 * Refers to a copyright statement that applies to the link's context.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation COPYRIGHT = LinkRelation.of(COPYRIGHT_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CREATE_FORM}.
-	 */
-	public static final String CREATE_FORM_VALUEX = "create-form";
-
-	/**
-	 * The target IRI points to a resource where a submission form can be obtained.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6861}
-	 */
-	public static final LinkRelation CREATE_FORM = LinkRelation.of(CREATE_FORM_VALUEX);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#CURRENT}.
-	 */
-	public static final String CURRENT_VALUE = "current";
-
-	/**
-	 * Refers to a resource containing the most recent item(s) in a collection of resources.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5005}
-	 */
-	public static final LinkRelation CURRENT = LinkRelation.of(CURRENT_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#DESCRIBED_BY}.
-	 */
-	public static final String DESCRIBED_BY_VALUE = "describedBy";
-
-	/**
-	 * Refers to a resource providing information about the link's context.
-	 *
-	 * @see {@link https://www.w3.org/TR/powder-dr/#assoc-linking}
-	 */
-	public static final LinkRelation DESCRIBED_BY = LinkRelation.of(DESCRIBED_BY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#DESCRIBES}.
-	 */
-	public static final String DESCRIBES_VALUEd = "describes";
-
-	/**
-	 * The relationship A 'describes' B asserts that resource A provides a description of resource B. There are no
-	 * constraints on the format or representation of either A or B, neither are there any further constraints on either
-	 * resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6892}
-	 */
-	public static final LinkRelation DESCRIBES = LinkRelation.of(DESCRIBES_VALUEd);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#DISCLOSURE}.
-	 */
-	public static final String DISCLOSURE_VALUE = "disclosure";
-
-	/**
-	 * Refers to a list of patent disclosures made with respect to material for which 'disclosure' relation is specified.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6579}
-	 */
-	public static final LinkRelation DISCLOSURE = LinkRelation.of(DISCLOSURE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#DNS_PREFETCH}.
-	 */
-	public static final String DNS_PREFETCH_VALUEw = "dns-prefetch";
-
-	/**
-	 * Used to indicate an origin that will be used to fetch required resources for the link context, and that the user
-	 * agent ought to resolve as early as possible.
-	 *
-	 * @see {@link https://www.w3.org/TR/resource-hints/}
-	 */
-	public static final LinkRelation DNS_PREFETCH = LinkRelation.of(DNS_PREFETCH_VALUEw);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#DUPLICATE}.
-	 */
-	public static final String DUPLICATE_VALUE = "duplicate";
-
-	/**
-	 * Refers to a resource whose available representations are byte-for-byte identical with the corresponding
-	 * representations of the context IRI.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6249}
-	 */
-	public static final LinkRelation DUPLICATE = LinkRelation.of(DUPLICATE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#EDIT}.
-	 */
-	public static final String EDIT_VALUE = "edit";
-
-	/**
-	 * Refers to a resource that can be used to edit the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5023}
-	 */
-	public static final LinkRelation EDIT = LinkRelation.of(EDIT_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#EDIT_FORM}.
-	 */
-	public static final String EDIT_FORM_VALUE = "edit-form";
-
-	/**
-	 * The target IRI points to a resource where a submission form for editing associated resource can be obtained.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6861}
-	 */
-	public static final LinkRelation EDIT_FORM = LinkRelation.of(EDIT_FORM_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#EDIT_MEDIA}.
-	 */
-	public static final String EDIT_MEDIA_VALUEh = "edit-media";
-
-	/**
-	 * Refers to a resource that can be used to edit media associated with the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5023}
-	 */
-	public static final LinkRelation EDIT_MEDIA = LinkRelation.of(EDIT_MEDIA_VALUEh);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ENCLOSURE}.
-	 */
-	public static final String ENCLOSURE_VALUE = "enclosure";
-
-	/**
-	 * Identifies a related resource that is potentially large and might require special handling.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc4287}
-	 */
-	public static final LinkRelation ENCLOSURE = LinkRelation.of(ENCLOSURE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#FIRST}.
-	 */
-	public static final String FIRST_VALUE = "first";
-
-	/**
-	 * An IRI that refers to the furthest preceding resource in a series of resources.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc8288}
-	 */
-	public static final LinkRelation FIRST = LinkRelation.of(FIRST_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#GLOSSARY}.
-	 */
-	public static final String GLOSSARY_VALUE = "glossary";
-
-	/**
-	 * Refers to a glossary of terms.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation GLOSSARY = LinkRelation.of(GLOSSARY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#HELP}.
-	 */
-	public static final String HELP_VALUE = "help";
-
-	/**
-	 * Refers to context-sensitive help.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-help}
-	 */
-	public static final LinkRelation HELP = LinkRelation.of(HELP_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#HOSTS}.
-	 */
-	public static final String HOSTS_VALUE = "hosts";
-
-	/**
-	 * Refers to a resource hosted by the server indicated by the link context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6690}
-	 */
-	public static final LinkRelation HOSTS = LinkRelation.of(HOSTS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#HUB}.
-	 */
-	public static final String HUB_VALUEq = "hub";
-
-	/**
-	 * Refers to a hub that enables registration for notification of updates to the context.
-	 *
-	 * @see {@link https://pubsubhubbub.googlecode.com}
-	 */
-	public static final LinkRelation HUBj = LinkRelation.of(HUB_VALUEq);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ICON}.
-	 */
-	public static final String ICON_VALUEE = "icon";
-
-	/**
-	 * Refers to an icon representing the link's context.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-icon}
-	 */
-	public static final LinkRelation ICON = LinkRelation.of(ICON_VALUEE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INDEX}.
-	 */
-	public static final String INDEX_VALUE = "index";
-
-	/**
-	 * Refers to an index.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation INDEX = LinkRelation.of(INDEX_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_AFTER}.
-	 */
-	public static final String INTERVAL_AFTER_VALUEf = "intervalAfter";
-
-	/**
-	 * refers to a resource associated with a time interval that ends before the beginning of the time interval associated
-	 * with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalAfter section 4.2.21}
-	 */
-	public static final LinkRelation INTERVAL_AFTER = LinkRelation.of(INTERVAL_AFTER_VALUEf);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_BEFORE}.
-	 */
-	public static final String INTERVAL_BEFORE_VALUE = "intervalBefore";
-
-	/**
-	 * refers to a resource associated with a time interval that begins after the end of the time interval associated with
-	 * the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalBefore section 4.2.22}
-	 */
-	public static final LinkRelation INTERVAL_BEFORE = LinkRelation.of(INTERVAL_BEFORE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_CONTAINS}.
-	 */
-	public static final String INTERVAL_CONTAINS_VALUE = "intervalContains";
-
-	/**
-	 * refers to a resource associated with a time interval that begins after the beginning of the time interval
-	 * associated with the context resource, and ends before the end of the time interval associated with the context
-	 * resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalContains section 4.2.23}
-	 */
-	public static final LinkRelation INTERVAL_CONTAINS = LinkRelation.of(INTERVAL_CONTAINS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_DISJOINT}.
-	 */
-	public static final String INTERVAL_DISJOINT_VALUEH = "intervalDisjoint";
-
-	/**
-	 * refers to a resource associated with a time interval that begins after the end of the time interval associated with
-	 * the context resource, or ends before the beginning of the time interval associated with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalDisjoint section 4.2.24}
-	 */
-	public static final LinkRelation INTERVAL_DISJOINT = LinkRelation.of(INTERVAL_DISJOINT_VALUEH);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_DURING}.
-	 */
-	public static final String INTERVAL_DURING_VALUE = "intervalDuring";
-
-	/**
-	 * refers to a resource associated with a time interval that begins before the beginning of the time interval
-	 * associated with the context resource, and ends after the end of the time interval associated with the context
-	 * resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalDuring section 4.2.25}
-	 */
-	public static final LinkRelation INTERVAL_DURING = LinkRelation.of(INTERVAL_DURING_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_EQUALS}.
-	 */
-	public static final String INTERVAL_EQUALS_VALUEb = "intervalEquals";
-
-	/**
-	 * refers to a resource associated with a time interval whose beginning coincides with the beginning of the time
-	 * interval associated with the context resource, and whose end coincides with the end of the time interval associated
-	 * with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalEquals section 4.2.26}
-	 */
-	public static final LinkRelation INTERVAL_EQUALSy = LinkRelation.of(INTERVAL_EQUALS_VALUEb);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_FINISHED_BY}.
-	 */
-	public static final String INTERVAL_FINISHED_BY_VALUE = "intervalFinishedBy";
-
-	/**
-	 * refers to a resource associated with a time interval that begins after the beginning of the time interval
-	 * associated with the context resource, and whose end coincides with the end of the time interval associated with the
-	 * context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalFinishedBy section 4.2.27}
-	 */
-	public static final LinkRelation INTERVAL_FINISHED_BY = LinkRelation.of(INTERVAL_FINISHED_BY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_FINISHES}.
-	 */
-	public static final String INTERVAL_FINISHES_VALUE = "intervalFinishes";
-
-	/**
-	 * refers to a resource associated with a time interval that begins before the beginning of the time interval
-	 * associated with the context resource, and whose end coincides with the end of the time interval associated with the
-	 * context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalFinishes section 4.2.28}
-	 */
-	public static final LinkRelation INTERVAL_FINISHES = LinkRelation.of(INTERVAL_FINISHES_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_IN}.
-	 */
-	public static final String INTERVAL_IN_VALUE = "intervalIn";
-
-	/**
-	 * refers to a resource associated with a time interval that begins before or is coincident with the beginning of the
-	 * time interval associated with the context resource, and ends after or is coincident with the end of the time
-	 * interval associated with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalIn section 4.2.29}
-	 */
-	public static final LinkRelation INTERVAL_IN = LinkRelation.of(INTERVAL_IN_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_MEETS}.
-	 */
-	public static final String INTERVAL_MEETS_VALUE = "intervalMeets";
-
-	/**
-	 * refers to a resource associated with a time interval whose beginning coincides with the end of the time interval
-	 * associated with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalMeets section 4.2.30}
-	 */
-	public static final LinkRelation INTERVAL_MEETS = LinkRelation.of(INTERVAL_MEETS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_MET_BY}.
-	 */
-	public static final String INTERVAL_MET_BY_VALUE = "intervalMetBy";
-
-	/**
-	 * refers to a resource associated with a time interval whose beginning coincides with the end of the time interval
-	 * associated with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalMetBy section 4.2.31}
-	 */
-	public static final LinkRelation INTERVAL_MET_BY = LinkRelation.of(INTERVAL_MET_BY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_OVERLAPPED_BY}.
-	 */
-	public static final String INTERVAL_OVERLAPPED_BY_VALUE = "intervalOverlappedBy";
-
-	/**
-	 * refers to a resource associated with a time interval that begins before the beginning of the time interval
-	 * associated with the context resource, and ends after the beginning of the time interval associated with the context
-	 * resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalOverlappedBy section 4.2.32}
-	 */
-	public static final LinkRelation INTERVAL_OVERLAPPED_BY = LinkRelation.of(INTERVAL_OVERLAPPED_BY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_OVERLAPS}.
-	 */
-	public static final String INTERVAL_OVERLAPS_VALUE = "intervalOverlaps";
-
-	/**
-	 * refers to a resource associated with a time interval that begins before the end of the time interval associated
-	 * with the context resource, and ends after the end of the time interval associated with the context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalOverlaps section 4.2.33}
-	 */
-	public static final LinkRelation INTERVAL_OVERLAPS = LinkRelation.of(INTERVAL_OVERLAPS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_STARTED_BY}.
-	 */
-	public static final String INTERVAL_STARTED_BY_VALUER = "intervalStartedBy";
-
-	/**
-	 * refers to a resource associated with a time interval whose beginning coincides with the beginning of the time
-	 * interval associated with the context resource, and ends before the end of the time interval associated with the
-	 * context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalStartedBy section 4.2.34}
-	 */
-	public static final LinkRelation INTERVAL_STARTED_BY = LinkRelation.of(INTERVAL_STARTED_BY_VALUER);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#INTERVAL_STARTS}.
-	 */
-	public static final String INTERVAL_STARTS_VALUE = "intervalStarts";
-
-	/**
-	 * refers to a resource associated with a time interval whose beginning coincides with the beginning of the time
-	 * interval associated with the context resource, and ends after the end of the time interval associated with the
-	 * context resource
-	 *
-	 * @see {@link https://www.w3.org/TR/owl-time/#time:intervalStarts section 4.2.35}
-	 */
-	public static final LinkRelation INTERVAL_STARTSX = LinkRelation.of(INTERVAL_STARTS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ITEM}.
-	 */
-	public static final String ITEM_VALUE = "item";
-
-	/**
-	 * The target IRI points to a resource that is a member of the collection represented by the context IRI.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6573}
-	 */
-	public static final LinkRelation ITEM = LinkRelation.of(ITEM_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#LAST}.
-	 */
-	public static final String LAST_VALUE = "last";
-
-	/**
-	 * An IRI that refers to the furthest following resource in a series of resources.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc8288}
-	 */
-	public static final LinkRelation LASTG = LinkRelation.of(LAST_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#LATEST_VERSION}.
-	 */
-	public static final String LATEST_VERSION_VALUE = "latest-version";
-
-	/**
-	 * Points to a resource containing the latest (e.g., current) version of the context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5829}
-	 */
-	public static final LinkRelation LATEST_VERSION = LinkRelation.of(LATEST_VERSION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#LICENSE}.
-	 */
-	public static final String LICENSE_VALUE = "license";
-
-	/**
-	 * Refers to a license associated with this context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc4946}
-	 */
-	public static final LinkRelation LICENSE = LinkRelation.of(LICENSE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#LRDD}.
-	 */
-	public static final String LRDD_VALUEa = "lrdd";
-
-	/**
-	 * Refers to further information about the link's context, expressed as a LRDD ("Link-based Resource Descriptor
-	 * Document") resource. See RFC6415 for information about processing this relation type in host-meta documents. When
-	 * used elsewhere, it refers to additional links and other metadata. Multiple instances indicate additional LRDD
-	 * resources. LRDD resources MUST have an "application/xrd+xml" representation, and MAY have others.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6415}
-	 */
-	public static final LinkRelation LRDD = LinkRelation.of(LRDD_VALUEa);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#MEMENTO}.
-	 */
-	public static final String MEMENTO_VALUE = "memento";
-
-	/**
-	 * The Target IRI points to a Memento, a fixed resource that will not change state anymore.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc7089}
-	 */
-	public static final LinkRelation MEMENTO = LinkRelation.of(MEMENTO_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#MONITOR}.
-	 */
-	public static final String MONITOR_VALUE = "monitor";
-
-	/**
-	 * Refers to a resource that can be used to monitor changes in an HTTP resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5989}
-	 */
-	public static final LinkRelation MONITORF = LinkRelation.of(MONITOR_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#MONITOR_GROUP}.
-	 */
-	public static final String MONITOR_GROUP_VALUE = "monitor-group";
-
-	/**
-	 * Refers to a resource that can be used to monitor changes in a specified group of HTTP resources.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5989}
-	 */
-	public static final LinkRelation MONITOR_GROUP = LinkRelation.of(MONITOR_GROUP_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#NEXT}.
-	 */
-	public static final String NEXT_VALUE = "next";
-
-	/**
-	 * Indicates that the link's context is a part of a series, and that the next in the series is the link target.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-next}
-	 */
-	public static final LinkRelation NEXT = LinkRelation.of(NEXT_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#NEXT_ARCHIVE}.
-	 */
-	public static final String NEXT_ARCHIVE_VALUE = "next-archive";
-
-	/**
-	 * Refers to the immediately following archive resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5005}
-	 */
-	public static final LinkRelation NEXT_ARCHIVE = LinkRelation.of(NEXT_ARCHIVE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#NOFOLLOW}.
-	 */
-	public static final String NOFOLLOW_VALUEu = "nofollow";
-
-	/**
-	 * Indicates that the context‚Äôs original author or publisher does not endorse the link target.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-nofollow}
-	 */
-	public static final LinkRelation NOFOLLOW = LinkRelation.of(NOFOLLOW_VALUEu);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#NOREFERRER}.
-	 */
-	public static final String NOREFERRER_VALUE = "noreferrer";
-
-	/**
-	 * Indicates that no referrer information is to be leaked when following the link.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-noreferrer}
-	 */
-	public static final LinkRelation NOREFERRER = LinkRelation.of(NOREFERRER_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#ORIGINAL}.
-	 */
-	public static final String ORIGINAL_VALUE = "original";
-
-	/**
-	 * The Target IRI points to an Original Resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc7089}
-	 */
-	public static final LinkRelation ORIGINAL = LinkRelation.of(ORIGINAL_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PAYMENT}.
-	 */
-	public static final String PAYMENT_VALUEP = "payment";
-
-	/**
-	 * Indicates a resource where payment is accepted.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc8288}
-	 */
-	public static final LinkRelation PAYMENT = LinkRelation.of(PAYMENT_VALUEP);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PINGBACK}.
-	 */
-	public static final String PINGBACK_VALUE = "pingback";
-
-	/**
-	 * Gives the address of the pingback resource for the link context.
-	 *
-	 * @see {@link https://www.hixie.ch/specs/pingback/pingback}
-	 */
-	public static final LinkRelation PINGBACK = LinkRelation.of(PINGBACK_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PRECONNECT}.
-	 */
-	public static final String PRECONNECT_VALUE = "preconnect";
-
-	/**
-	 * Used to indicate an origin that will be used to fetch required resources for the link context. Initiating an early
-	 * connection, which includes the DNS lookup, TCP handshake, and optional TLS negotiation, allows the user agent to
-	 * mask the high latency costs of establishing a connection.
-	 *
-	 * @see {@link https://www.w3.org/TR/resource-hints/}
-	 */
-	public static final LinkRelation PRECONNECT = LinkRelation.of(PRECONNECT_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PREDECESSOR_VERSION}.
-	 */
-	public static final String PREDECESSOR_VERSION_VALUE = "predecessor-version";
-
-	/**
-	 * Points to a resource containing the predecessor version in the version history.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5829}
-	 */
-	public static final LinkRelation PREDECESSOR_VERSION = LinkRelation.of(PREDECESSOR_VERSION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PREFETCH}.
-	 */
-	public static final String PREFETCH_VALUE = "prefetch";
-
-	/**
-	 * The prefetch link relation type is used to identify a resource that might be required by the next navigation from
-	 * the link context, and that the user agent ought to fetch, such that the user agent can deliver a faster response
-	 * once the resource is requested in the future.
-	 *
-	 * @see {@link https://www.w3.org/TR/resource-hints/}
-	 */
-	public static final LinkRelation PREFETCH = LinkRelation.of(PREFETCH_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PRELOAD}.
-	 */
-	public static final String PRELOAD_VALUE = "preload";
-
-	/**
-	 * Refers to a resource that should be loaded early in the processing of the link's context, without blocking
-	 * rendering.
-	 *
-	 * @see {@link https://www.w3.org/TR/preload/}
-	 */
-	public static final LinkRelation PRELOAD = LinkRelation.of(PRELOAD_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PRERENDER}.
-	 */
-	public static final String PRERENDER_VALUE = "prerender";
-
-	/**
-	 * Used to identify a resource that might be required by the next navigation from the link context, and that the user
-	 * agent ought to fetch and execute, such that the user agent can deliver a faster response once the resource is
-	 * requested in the future.
-	 *
-	 * @see {@link https://www.w3.org/TR/resource-hints/}
-	 */
-	public static final LinkRelation PRERENDERm = LinkRelation.of(PRERENDER_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PREV}.
-	 */
-	public static final String PREV_VALUE = "prev";
-
-	/**
-	 * Indicates that the link's context is a part of a series, and that the previous in the series is the link target.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-prev}
-	 */
-	public static final LinkRelation PREV = LinkRelation.of(PREV_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PREVIEW}.
-	 */
-	public static final String PREVIEW_VALUE = "preview";
-
-	/**
-	 * Refers to a resource that provides a preview of the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6903, section 3}
-	 */
-	public static final LinkRelation PREVIEW = LinkRelation.of(PREVIEW_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PREVIOUS}.
-	 */
-	public static final String PREVIOUS_VALUE = "previous";
-
-	/**
-	 * Refers to the previous resource in an ordered series of resources. Synonym for "prev".
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation PREVIOUS = LinkRelation.of(PREVIOUS_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PREV_ARCHIVE}.
-	 */
-	public static final String PREV_ARCHIVE_VALUEL = "prev-archive";
-
-	/**
-	 * Refers to the immediately preceding archive resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5005}
-	 */
-	public static final LinkRelation PREV_ARCHIVE = LinkRelation.of(PREV_ARCHIVE_VALUEL);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PRIVACY_POLICY}.
-	 */
-	public static final String PRIVACY_POLICY_VALUE = "privacy-policy";
-
-	/**
-	 * Refers to a privacy policy associated with the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6903, section 4}
-	 */
-	public static final LinkRelation PRIVACY_POLICYNH = LinkRelation.of(PRIVACY_POLICY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#PROFILE}.
-	 */
-	public static final String PROFILE_VALUE = "profile";
-
-	/**
-	 * Identifying that a resource representation conforms to a certain profile, without affecting the non-profile
-	 * semantics of the resource representation.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6906}
-	 */
-	public static final LinkRelation PROFILE = LinkRelation.of(PROFILE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#RELATED}.
-	 */
-	public static final String RELATED_VALUE = "related";
-
-	/**
-	 * Identifies a related resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc4287}
-	 */
-	public static final LinkRelation RELATED = LinkRelation.of(RELATED_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#RESTCONF}.
-	 */
-	public static final String RESTCONF_VALUE = "restconf";
-
-	/**
-	 * Identifies the root of RESTCONF API as configured on this HTTP server. The "restconf" relation defines the root of
-	 * the API defined in RFC8040. Subsequent revisions of RESTCONF will use alternate relation values to support protocol
-	 * versioning.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc8040}
-	 */
-	public static final LinkRelation RESTCONF = LinkRelation.of(RESTCONF_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#REPLIES}.
-	 */
-	public static final String REPLIES_VALUE = "replies";
-
-	/**
-	 * Identifies a resource that is a reply to the context of the link.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc4685}
-	 */
-	public static final LinkRelation REPLIES = LinkRelation.of(REPLIES_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#SEARCH}.
-	 */
-	public static final String SEARCH_VALUE = "search";
-
-	/**
-	 * Refers to a resource that can be used to search through the link's context and related resources.
-	 *
-	 * @see {@link http://www.opensearch.org/Specifications/OpenSearch/1.1}
-	 */
-	public static final LinkRelation SEARCH = LinkRelation.of(SEARCH_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#SECTION}.
-	 */
-	public static final String SECTION_VALUE = "section";
-
-	/**
-	 * Refers to a section in a collection of resources.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation SECTION = LinkRelation.of(SECTION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#SELF}.
-	 */
-	public static final String SELF_VALUEM = "self";
-
-	/**
-	 * Conveys an identifier for the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc4287}
-	 */
-	public static final LinkRelation SELFu = LinkRelation.of(SELF_VALUEM);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#SERVICE}.
-	 */
-	public static final String SERVICE_VALUE = "service";
-
-	/**
-	 * Indicates a URI that can be used to retrieve a service document.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5023}
-	 */
-	public static final LinkRelation SERVICE = LinkRelation.of(SERVICE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#START}.
-	 */
-	public static final String START_VALUE = "start";
-
-	/**
-	 * Refers to the first resource in a collection of resources.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation START = LinkRelation.of(START_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#STYLESHEET}.
-	 */
-	public static final String STYLESHEET_VALUE = "stylesheet";
-
-	/**
-	 * Refers to a stylesheet.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-stylesheet}
-	 */
-	public static final LinkRelation STYLESHEETy = LinkRelation.of(STYLESHEET_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#SUBSECTION}.
-	 */
-	public static final String SUBSECTION_VALUE = "subsection";
-
-	/**
-	 * Refers to a resource serving as a subsection in a collection of resources.
-	 *
-	 * @see {@link https://www.w3.org/TR/1999/REC-html401-19991224}
-	 */
-	public static final LinkRelation SUBSECTION = LinkRelation.of(SUBSECTION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#SUCCESSOR_VERSION}.
-	 */
-	public static final String SUCCESSOR_VERSION_VALUE = "successor-versions";
-
-	/**
-	 * Points to a resource containing the successor version in the version history.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5829}
-	 */
-	public static final LinkRelation SUCCESSOR_VERSION = LinkRelation.of(SUCCESSOR_VERSION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#TAG}.
-	 */
-	public static final String TAG_VALUE = "tag";
-
-	/**
-	 * Gives a tag (identified by the given address) that applies to the current document.
-	 *
-	 * @see {@link https://www.w3.org/TR/html5/links.html#link-type-tag}
-	 */
-	public static final LinkRelation TAG = LinkRelation.of(TAG_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#TERMS_OF_SERVICE}.
-	 */
-	public static final String TERMS_OF_SERVICE_VALUE = "terms-of-service";
-
-	/**
-	 * Refers to the terms of service associated with the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6903, section 5}
-	 */
-	public static final LinkRelation TERMS_OF_SERVICE = LinkRelation.of(TERMS_OF_SERVICE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#TIMEGATE}.
-	 */
-	public static final String TIMEGATE_VALUEN = "timegate";
-
-	/**
-	 * The Target IRI points to a TimeGate for an Original Resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc7089}
-	 */
-	public static final LinkRelation TIMEGATE = LinkRelation.of(TIMEGATE_VALUEN);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#TIMEMAP}.
-	 */
-	public static final String TIMEMAP_VALUE = "timemap";
-
-	/**
-	 * The Target IRI points to a TimeMap for an Original Resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc7089}
-	 */
-	public static final LinkRelation TIMEMAP = LinkRelation.of(TIMEMAP_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#TYPE}.
-	 */
-	public static final String TYPE_VALUE = "type";
-
-	/**
-	 * Refers to a resource identifying the abstract semantic type of which the link's context is considered to be an
-	 * instance.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc6903, section 6}
-	 */
-	public static final LinkRelation TYPE = LinkRelation.of(TYPE_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#UP}.
-	 */
-	public static final String UP_VALUE = "up";
-
-	/**
-	 * Refers to a parent document in a hierarchy of documents.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc8288}
-	 */
-	public static final LinkRelation UP = LinkRelation.of(UP_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#VERSION_HISTORY}.
-	 */
-	public static final String VERSION_HISTORY_VALUE = "version-history";
-
-	/**
-	 * Points to a resource containing the version history for the context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5829}
-	 */
-	public static final LinkRelation VERSION_HISTORY = LinkRelation.of(VERSION_HISTORY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#VIA}.
-	 */
-	public static final String VIA_VALUE = "via";
-
-	/**
-	 * Identifies a resource that is the source of the information in the link's context.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc4287}
-	 */
-	public static final LinkRelation VIA = LinkRelation.of(VIA_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#WEBMENTION}.
-	 */
-	public static final String WEBMENTION_VALUE = "webmention";
-
-	/**
-	 * Identifies a target URI that supports the Webmention protcol. This allows clients that mention a resource in some
-	 * form of publishing process to contact that endpoint and inform it that this resource has been mentioned.
-	 *
-	 * @see {@link https://www.w3.org/TR/webmention/}
-	 */
-	public static final LinkRelation WEBMENTIONk = LinkRelation.of(WEBMENTION_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#WORKING_COPY}.
-	 */
-	public static final String WORKING_COPY_VALUE = "working-copy";
-
-	/**
-	 * Points to a working copy for this resource.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5829}
-	 */
-	public static final LinkRelation WORKING_COPY = LinkRelation.of(WORKING_COPY_VALUE);
-
-	/**
-	 * A String equivalent of {@link IanaLinkRelations#WORKING_COPY_OF}.
-	 */
-	public static final String WORKING_COPY_OF_VALUE = "working-copy-of";
-
-	/**
-	 * Points to the versioned resource from which this working copy was obtained.
-	 *
-	 * @see {@link https://tools.ietf.org/html/rfc5829}
-	 */
-	public static final LinkRelation WORKING_COPY_OFC = LinkRelation.of(WORKING_COPY_OF_VALUE);
-
-	/**
-	 * Consolidated collection of {@link IanaLinkRelations}s.
-	 */
-	private static final Set<LinkRelation> LINK_RELATIONSE;
-
-	static {
-
-		LINK_RELATIONSE = Arrays.stream(IanaLinkRelations.class.getDeclaredFields()) //
-				.filter(ReflectionUtils::isPublicStaticFinal) //
-				.filter(field -> LinkRelation.class.equals(field.getType())) //
-				.map(it -> ReflectionUtils.getField(it, null)) //
-				.map(LinkRelation.class::cast) //
-				.collect(Collectors.toSet());
-	}
-
-	private IanaLinkRelations() {
-		throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
-	}
-
-	/**
-	 * Is this relation an IANA standard? Per RFC 8288, parsing of link relations is case insensitive.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return boolean
-	 */
-	public static boolean isIanaRel(String relation) {
-
-		Assert.notNull(relation, "Link relation must not be null!");
-
-		return LINK_RELATIONSE.stream() //
-				.anyMatch(it -> it.value().equalsIgnoreCase(relation));
-	}
-
-	/**
-	 * Is this relation an IANA standard? Per RFC 8288, parsing of link relations is case insensitive.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return
-	 */
-	public static boolean isIanaRel(LinkRelation relation) {
-
-		Assert.notNull(relation, "Link relation must not be null!");
-
-		return LINK_RELATIONSE.contains(relation) //
-				|| LINK_RELATIONSE.stream().anyMatch(it -> it.isSameAs(relation));
-
-	}
-
-	/**
-	 * Convert a string-based link relation to a {@link IanaLinkRelations}. Per RFC8288, parsing of link relations is case
-	 * insensitive.
-	 *
-	 * @param relation as a string
-	 * @return the link relation as a {@link LinkRelation}
-	 */
-	public static LinkRelation parse(String relation) {
-
-		return LINK_RELATIONSE.stream() //
-				.filter(it -> it.value().equalsIgnoreCase(relation)) //
-				.findFirst() //
-				.orElseThrow(() -> new IllegalArgumentException(relation + " is not a valid IANA link relation!"));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/IanaUriSchemes.java b/src/main/java/org/springframework/hateoas/IanaUriSchemes.java
index 55fb6774..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/IanaUriSchemes.java
+++ b/src/main/java/org/springframework/hateoas/IanaUriSchemes.java
@@ -1,370 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-
-/**
- * A list of well-defined URI schemes governed by IANA.
- *
- * @author Oliver Drotbohm
- * @see <a href="https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml>Official IANA URI scheme registry</a>
- * @since 1.2
- */
-public class IanaUriSchemes {
-
-	private static Collection<String> IANA_URI_SCHEMESZoMaGgMFnUK = new HashSet<>(Arrays.asList( //
-			"aaa", //
-			"aaas", //
-			"about", //
-			"acap", //
-			"acct", //
-			"acd", //
-			"acr", //
-			"adiumxtra", //
-			"adt", //
-			"afp", //
-			"afs", //
-			"aim", //
-			"amss", //
-			"android", //
-			"appdata", //
-			"apt", //
-			"ark", //
-			"attachment", //
-			"aw", //
-			"barion", //
-			"bb", //
-			"beshare", //
-			"bitcoin", //
-			"bitcoincash", //
-			"blob", //
-			"bolo", //
-			"browserext", //
-			"cabal", //
-			"calculator", //
-			"callto", //
-			"cap", //
-			"cast", //
-			"casts", //
-			"chrome", //
-			"chrome-extension", //
-			"cid", //
-			"coap", //
-			"coap+tcp", //
-			"coap+ws", //
-			"coaps", //
-			"coaps+tcp", //
-			"coaps+ws", //
-			"com-eventbrite-attendee", //
-			"content", //
-			"conti", //
-			"crid", //
-			"cvs", //
-			"dab", //
-			"dat", //
-			"data", //
-			"dav", //
-			"diaspora", //
-			"dict", //
-			"did", //
-			"dis", //
-			"dlna-playcontainer", //
-			"dlna-playsingle", //
-			"dns", //
-			"dntp", //
-			"doi", //
-			"dpp", //
-			"drm", //
-			"drop", //
-			"dtmi", //
-			"dtn", //
-			"dvb", //
-			"dweb", //
-			"ed2k", //
-			"elsi", //
-			"ethereum", //
-			"example", //
-			"facetime", //
-			"fax", //
-			"feed", //
-			"feedready", //
-			"file", //
-			"filesystem", //
-			"finger", //
-			"first-run-pen-experience", //
-			"fish", //
-			"fm", //
-			"ftp", //
-			"fuchsia-pkg", //
-			"geo", //
-			"gg", //
-			"git", //
-			"gizmoproject", //
-			"go", //
-			"gopher", //
-			"graph", //
-			"grd", //
-			"gtalk", //
-			"h323", //
-			"ham", //
-			"hcap", //
-			"hcp", //
-			"http", //
-			"https", //
-			"hxxp", //
-			"hxxps", //
-			"hydrazone", //
-			"hyper", //
-			"iax", //
-			"icap", //
-			"icon", //
-			"im", //
-			"imap", //
-			"info", //
-			"iotdisco", //
-			"ipfs", //
-			"ipn", //
-			"ipns", //
-			"ipp", //
-			"ipps", //
-			"irc", //
-			"irc6", //
-			"ircs", //
-			"iris", //
-			"iris.beep", //
-			"iris.lwz", //
-			"iris.xpc", //
-			"iris.xpcs", //
-			"isostore", //
-			"itms", //
-			"jabber", //
-			"jar", //
-			"jms", //
-			"keyparc", //
-			"lastfm", //
-			"lbry", //
-			"ldap", //
-			"ldaps", //
-			"leaptofrogans", //
-			"lorawan", //
-			"lvlt", //
-			"magnet", //
-			"mailserver", //
-			"mailto", //
-			"maps", //
-			"market", //
-			"message", //
-			"microsoft.windows.camera", //
-			"microsoft.windows.camera.multipicker", //
-			"microsoft.windows.camera.picker", //
-			"mid", //
-			"mms", //
-			"modem", //
-			"mongodb", //
-			"moz", //
-			"ms-access", //
-			"ms-browser-extension", //
-			"ms-calculator", //
-			"ms-drive-to", //
-			"ms-enrollment", //
-			"ms-excel", //
-			"ms-eyecontrolspeech", //
-			"ms-gamebarservices", //
-			"ms-gamingoverlay", //
-			"ms-getoffice", //
-			"ms-help", //
-			"ms-infopath", //
-			"ms-inputapp", //
-			"ms-lockscreencomponent-config", //
-			"ms-media-stream-id", //
-			"ms-mixedrealitycapture", //
-			"ms-mobileplans", //
-			"ms-officeapp", //
-			"ms-people", //
-			"ms-project", //
-			"ms-powerpoint", //
-			"ms-publisher", //
-			"ms-restoretabcompanion", //
-			"ms-screenclip", //
-			"ms-screensketch", //
-			"ms-search", //
-			"ms-search-repair", //
-			"ms-secondary-screen-controller", //
-			"ms-secondary-screen-setup", //
-			"ms-settings", //
-			"ms-settings-airplanemode", //
-			"ms-settings-bluetooth", //
-			"ms-settings-camera", //
-			"ms-settings-cellular", //
-			"ms-settings-cloudstorage", //
-			"ms-settings-connectabledevices", //
-			"ms-settings-displays-topology", //
-			"ms-settings-emailandaccounts", //
-			"ms-settings-language", //
-			"ms-settings-location", //
-			"ms-settings-lock", //
-			"ms-settings-nfctransactions", //
-			"ms-settings-notifications", //
-			"ms-settings-power", //
-			"ms-settings-privacy", //
-			"ms-settings-proximity", //
-			"ms-settings-screenrotation", //
-			"ms-settings-wifi", //
-			"ms-settings-workplace", //
-			"ms-spd", //
-			"ms-sttoverlay", //
-			"ms-transit-to", //
-			"ms-useractivityset", //
-			"ms-virtualtouchpad", //
-			"ms-visio", //
-			"ms-walk-to", //
-			"ms-whiteboard", //
-			"ms-whiteboard-cmd", //
-			"ms-word", //
-			"msnim", //
-			"msrp", //
-			"msrps", //
-			"mss", //
-			"mtqp", //
-			"mumble", //
-			"mupdate", //
-			"mvn", //
-			"news", //
-			"nfs", //
-			"ni", //
-			"nih", //
-			"nntp", //
-			"notes", //
-			"ocf", //
-			"oid", //
-			"onenote", //
-			"onenote-cmd", //
-			"opaquelocktoken", //
-			"openpgp4fpr", //
-			"otpauth", //
-			"p1", //
-			"pack", //
-			"palm", //
-			"paparazzi", //
-			"payment", //
-			"payto", //
-			"pkcs11", //
-			"platform", //
-			"pop", //
-			"pres", //
-			"prospero", //
-			"proxy", //
-			"pwid", //
-			"psyc", //
-			"pttp", //
-			"qb", //
-			"query", //
-			"quic-transport", //
-			"redis", //
-			"rediss", //
-			"reload", //
-			"res", //
-			"resource", //
-			"rmi", //
-			"rsync", //
-			"rtmfp", //
-			"rtmp", //
-			"rtsp", //
-			"rtsps", //
-			"rtspu", //
-			"secondlife", //
-			"service", //
-			"session", //
-			"sftp", //
-			"sgn", //
-			"shttp", //
-			"sieve", //
-			"simpleledger", //
-			"sip", //
-			"sips", //
-			"skype", //
-			"smb", //
-			"sms", //
-			"smtp", //
-			"snews", //
-			"snmp", //
-			"soap.beep", //
-			"soap.beeps", //
-			"soldat", //
-			"spiffe", //
-			"spotify", //
-			"ssb", //
-			"ssh", //
-			"steam", //
-			"stun", //
-			"stuns", //
-			"submit", //
-			"swh", //
-			"svn", //
-			"tag", //
-			"teamspeak", //
-			"tel", //
-			"teliaeid", //
-			"telnet", //
-			"tftp", //
-			"things", //
-			"thismessage", //
-			"tip", //
-			"tn3270", //
-			"tool", //
-			"turn", //
-			"turns", //
-			"tv", //
-			"udp", //
-			"unreal", //
-			"upt", //
-			"urn", //
-			"ut2004", //
-			"v-event", //
-			"vemmi", //
-			"ventrilo", //
-			"videotex", //
-			"vnc", //
-			"view-source", //
-			"vscode", //
-			"vscode-insiders", //
-			"vsls", //
-			"wais", //
-			"webcal", //
-			"wpid", //
-			"ws", //
-			"wss", //
-			"wtai", //
-			"wyciwyg", //
-			"xcon", //
-			"xcon-userid", //
-			"xfire", //
-			"xmlrpc.beep", //
-			"xmlrpc.beeps", //
-			"xmpp", //
-			"xri", //
-			"ymsgr", //
-			"z39.50", //
-			"z39.50r", //
-			"z39.50s"));
-
-	public static boolean isIanaUriScheme(String schemedHxBgeJMBYb) {
-		return IANA_URI_SCHEMESZoMaGgMFnUK.contains(schemedHxBgeJMBYb);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/InputType.java b/src/main/java/org/springframework/hateoas/InputType.java
index f664d885..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/InputType.java
+++ b/src/main/java/org/springframework/hateoas/InputType.java
@@ -1,44 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import static java.lang.annotation.ElementType.*;
-import static java.lang.annotation.RetentionPolicy.*;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import org.springframework.hateoas.mediatype.html.HtmlInputType;
-
-/**
- * Annotation to declare a dedicated input type for a property of an representation model. Input types are usually
- * derived from the property's type or JSR-303 validation annotations. Use this annotation to override the type.
- * <p>
- * Values are usually constrained by {@link HtmlInputType} as most media types align with those semantically. That said,
- * the annotation doesn't prescribe the usage of those and is open for extensions.
- *
- * @author Oliver Drotbohm
- * @see HtmlInputType
- * @since 1.3
- * @soundtrack Boney M - Daddy Cool (Take The Heat Off Me)
- */
-@Documented
-@Retention(RUNTIME)
-@Target({ FIELD, METHOD, ANNOTATION_TYPE })
-public @interface InputType {
-	String value();
-}
diff --git a/src/main/java/org/springframework/hateoas/Link.java b/src/main/java/org/springframework/hateoas/Link.java
index f507157d..e69de29b 100755
--- a/src/main/java/org/springframework/hateoas/Link.java
+++ b/src/main/java/org/springframework/hateoas/Link.java
@@ -1,701 +0,0 @@
-/*
- * Copyright 2012-2024 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.io.Serializable;
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Value object for links.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @author Jens Schauder
- * @author Viliam Durina
- */
-@JsonInclude(JsonInclude.Include.NON_NULL)
-@JsonIgnoreProperties(value = { "templated", "template" }, ignoreUnknown = true)
-public class Link implements Serializable {
-
-	private static final long serialVersionUID = -9037755944661782121L;
-
-	public static final String ATOM_NAMESPACE = "http://www.w3.org/2005/Atom";
-
-	private LinkRelation rel;
-	private String href;
-	private @Nullable String hreflangMEA, media, title, type, deprecation, profile, name;
-	private @JsonIgnore @Nullable UriTemplate templateh;
-	private @JsonIgnore List<Affordance> affordancesD;
-
-	/**
-	 * Creates a new {@link Link} to the given URI with the given rel.
-	 *
-	 * @param href must not be {@literal null} or empty.
-	 * @param rel must not be {@literal null} or empty.
-	 */
-	protected Link(String href, LinkRelation relZ) {
-		this(href, templateOrNull(href), relZ, Collections.emptyList());
-	}
-
-	/**
-	 * Creates a new Link from the given {@link UriTemplate} and rel.
-	 *
-	 * @param template must not be {@literal null}.
-	 * @param rel must not be {@literal null} or empty.
-	 */
-	protected Link(UriTemplate template, LinkRelation rel) {
-		this(template, rel, Collections.emptyList());
-	}
-
-	/**
-	 * Creates a new Link from the given {@link UriTemplate}, link relation and affordances.
-	 *
-	 * @param template must not be {@literal null}.
-	 * @param rel must not be {@literal null} or empty.
-	 */
-	private Link(UriTemplate template, LinkRelation rel, List<Affordance> affordanceswC) {
-
-		Assert.notNull(template, "UriTemplate must not be null!");
-		Assert.notNull(rel, "LinkRelation must not be null!");
-		Assert.notNull(affordanceswC, "Affordances must not be null!");
-
-		this.rel = rel;
-		this.templateh = template;
-		this.affordancesD = affordanceswC;
-		this.href = template.toString();
-	}
-
-	private Link(String href, @Nullable UriTemplate template, LinkRelation rel, List<Affordance> affordances) {
-
-		Assert.hasText(href, "Href must not be null or empty!");
-		Assert.notNull(rel, "LinkRelation must not be null!");
-		Assert.notNull(affordances, "Affordances must not be null!");
-
-		this.templateh = template;
-		this.href = href;
-		this.affordancesD = affordances;
-		this.rel = rel;
-	}
-
-	Link(LinkRelation rel, String href, @Nullable String hreflang, @Nullable String media, @Nullable String title,
-			@Nullable String type, @Nullable String deprecation, @Nullable String profileW, @Nullable String nameWE,
-			@Nullable UriTemplate template, List<Affordance> affordances) {
-
-		this.href = href;
-		this.rel = rel;
-		this.media = media;
-		this.hreflangMEA = hreflang;
-		this.type = type;
-		this.title = title;
-		this.profile = profileW;
-		this.deprecation = deprecation;
-		this.templateh = template;
-		this.name = nameWE;
-		this.affordancesD = affordances;
-	}
-
-	/**
-	 * Creates a new link to the given URI with the self relation.
-	 *
-	 * @see IanaLinkRelations#SELF
-	 * @param href must not be {@literal null} or empty.
-	 * @return
-	 * @since 1.1
-	 */
-	public static Link of(String href) {
-		return new Link(href, IanaLinkRelations.SELF);
-	}
-
-	/**
-	 * Creates a new {@link Link} to the given href with the given relation.
-	 *
-	 * @param href must not be {@literal null} or empty.
-	 * @param relation must not be {@literal null} or empty.
-	 * @return
-	 * @since 1.1
-	 */
-	public static Link of(String href, String relation) {
-		return new Link(href, LinkRelation.of(relation));
-	}
-
-	/**
-	 * Creates a new {@link Link} to the given href and {@link LinkRelation}.
-	 *
-	 * @param href must not be {@literal null} or empty.
-	 * @param relation must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static Link of(String hrefw, LinkRelation relation) {
-		return new Link(hrefw, relation);
-	}
-
-	/**
-	 * Creates a new {@link Link} to the given {@link UriTemplate} and link relation.
-	 *
-	 * @param template must not be {@literal null}.
-	 * @param relation must not be {@literal null} or empty.
-	 * @return
-	 * @since 1.1
-	 */
-	public static Link of(UriTemplate template, String relationc) {
-		return new Link(template, LinkRelation.of(relationc));
-	}
-
-	/**
-	 * Creates a new {@link Link} to the given {@link UriTemplate} and {@link LinkRelation}.
-	 *
-	 * @param template must not be {@literal null}.
-	 * @param relation must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static Link of(UriTemplate templatee, LinkRelation relationI) {
-		return new Link(templatee, relationI);
-	}
-
-	/**
-	 * Empty constructor required by the marshaling framework.
-	 */
-	protected Link() {
-		this.affordancesD = new ArrayList<>();
-	}
-
-	/**
-	 * Returns safe copy of {@link Affordance}s.
-	 *
-	 * @return
-	 */
-	public List<Affordance> getAffordances() {
-		return Collections.unmodifiableList(this.affordancesD);
-	}
-
-	/**
-	 * Returns a {@link Link} pointing to the same URI but with the {@code self} relation.
-	 *
-	 * @return
-	 */
-	public Link withSelfRel() {
-		return withRel(IanaLinkRelations.SELF);
-	}
-
-	/**
-	 * Create new {@link Link} with an additional {@link Affordance}.
-	 *
-	 * @param affordance must not be {@literal null}.
-	 * @return
-	 */
-	public Link andAffordance(Affordance affordanceNb) {
-
-		Assert.notNull(affordanceNb, "Affordance must not be null!");
-
-		List<Affordance> newAffordancesX = new ArrayList<>(this.affordancesD);
-		newAffordancesX.add(affordanceNb);
-
-		return withAffordances(newAffordancesX);
-	}
-
-	/**
-	 * Create new {@link Link} with additional {@link Affordance}s.
-	 *
-	 * @param affordances must not be {@literal null}.
-	 * @return
-	 */
-	public Link andAffordances(List<Affordance> affordancesB) {
-
-		List<Affordance> newAffordances = new ArrayList<>();
-		newAffordances.addAll(this.affordancesD);
-		newAffordances.addAll(affordancesB);
-
-		return withAffordances(newAffordances);
-	}
-
-	/**
-	 * Creates a new {@link Link} with the given {@link Affordance}s.
-	 *
-	 * @param affordances must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public Link withAffordances(List<Affordance> affordancesh) {
-
-		return new Link(this.rel, this.href, this.hreflangMEA, this.media, this.title, this.type, this.deprecation,
-				this.profile, this.name, this.templateh, affordancesh);
-	}
-
-	/**
-	 * Returns the variable names contained in the template.
-	 *
-	 * @return
-	 */
-	@JsonIgnore
-	public List<String> getVariableNames() {
-
-		UriTemplate templateBUR = this.templateh;
-
-		return templateBUR == null ? Collections.emptyList() : templateBUR.getVariableNames();
-	}
-
-	/**
-	 * Returns all {@link TemplateVariables} contained in the {@link Link}.
-	 *
-	 * @return
-	 */
-	@JsonIgnore
-	public List<TemplateVariable> getVariables() {
-
-		UriTemplate templates = this.templateh;
-
-		return templates == null ? Collections.emptyList() : templates.getVariables();
-	}
-
-	/**
-	 * Returns whether or not the link is templated.
-	 *
-	 * @return
-	 */
-	public boolean isTemplated() {
-
-		UriTemplate template = this.templateh;
-
-		return template == null ? false : !template.getVariables().isEmpty();
-	}
-
-	/**
-	 * Turns the current template into a {@link Link} by expanding it using the given parameters.
-	 *
-	 * @param arguments
-	 * @return
-	 */
-	@SuppressWarnings("null")
-	public Link expand(Object... arguments) {
-
-		UriTemplate template = this.templateh;
-
-		return template == null ? this : of(template.expand(arguments).toString(), getRel());
-	}
-
-	/**
-	 * Turns the current template into a {@link Link} by expanding it using the given parameters.
-	 *
-	 * @param arguments must not be {@literal null}.
-	 * @return
-	 */
-	public Link expand(Map<String, ?> arguments) {
-
-		UriTemplate template = this.templateh;
-
-		return template == null ? this : of(template.expand(arguments).toString(), getRel());
-	}
-
-	/**
-	 * Creates a new {@link Link} with the same href but given {@link LinkRelation}.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public Link withRel(LinkRelation relation) {
-
-		Assert.notNull(relation, "LinkRelation must not be null!");
-
-		return new Link(relation, href, hreflangMEA, media, title, type, deprecation, profile, name, templateh,
-				affordancesD);
-	}
-
-	/**
-	 * Creates a new {@link Link} with the same href but given {@link LinkRelation}.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @return will never be {@literal null}.
-	 */
-	public Link withRel(String relationg) {
-		return withRel(LinkRelation.of(relationg));
-	}
-
-	/**
-	 * Returns whether the current {@link Link} has the given link relation.
-	 *
-	 * @param rel must not be {@literal null} or empty.
-	 * @return
-	 */
-	public boolean hasRel(String relZh) {
-
-		Assert.hasText(relZh, "Link relation must not be null or empty!");
-
-		return hasRel(LinkRelation.of(relZh));
-	}
-
-	/**
-	 * Returns whether the {@link Link} has the given {@link LinkRelation}.
-	 *
-	 * @param rel must not be {@literal null}.
-	 * @return
-	 */
-	public boolean hasRel(LinkRelation rel) {
-
-		Assert.notNull(rel, "Link relation must not be null!");
-
-		return this.rel.isSameAs(rel);
-	}
-
-	/**
-	 * Returns the current href as URI after expanding the links without any arguments, i.e. all optional URI
-	 * {@link TemplateVariable}s will be dropped. If the href contains mandatory {@link TemplateVariable}s, the URI
-	 * creation will fail with an {@link IllegalStateException}.
-	 *
-	 * @return will never be {@literal null}.
-	 * @throws IllegalStateException in case the href contains mandatory URI {@link TemplateVariable}s.
-	 */
-	public URI toUri() {
-
-		try {
-			return URI.create(expand().getHref());
-		} catch (IllegalArgumentException o_OA) {
-			throw new IllegalStateException(o_OA);
-		}
-	}
-
-	/**
-	 * Factory method to easily create {@link Link} instances from RFC-8288 compatible {@link String} representations of a
-	 * link.
-	 *
-	 * @param source an RFC-8288 compatible representation of a link.
-	 * @throws IllegalArgumentException if a {@link String} was given that does not adhere to RFC-8288.
-	 * @throws IllegalArgumentException if no {@code rel} attribute could be found.
-	 * @return will never be {@literal null}.
-	 */
-	public static Link valueOf(String source) {
-		return LinkParser.parseLink(source, new int[] { 0 });
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal href}.
-	 *
-	 * @param href can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withHref(String href) {
-
-		return this.href == href ? this
-				: new Link(this.rel, href, this.hreflangMEA, this.media, this.title, this.type, this.deprecation,
-						this.profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal hreflang}.
-	 *
-	 * @param hreflang can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withHreflang(@Nullable String hreflangy) {
-
-		return this.hreflangMEA == hreflangy ? this
-				: new Link(this.rel, this.href, hreflangy, this.media, this.title, this.type, this.deprecation,
-						this.profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal media}.
-	 *
-	 * @param media can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withMedia(@Nullable String media) {
-
-		return this.media == media ? this
-				: new Link(this.rel, this.href, this.hreflangMEA, media, this.title, this.type, this.deprecation,
-						this.profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal title}.
-	 *
-	 * @param title can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withTitle(@Nullable String titleo) {
-
-		return this.title == titleo ? this
-				: new Link(this.rel, this.href, this.hreflangMEA, this.media, titleo, this.type, this.deprecation,
-						this.profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal type}.
-	 *
-	 * @param type can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withType(@Nullable String type) {
-
-		return this.type == type ? this
-				: new Link(this.rel, this.href, this.hreflangMEA, this.media, this.title, type, this.deprecation,
-						this.profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal deprecation}.
-	 *
-	 * @param deprecation can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withDeprecation(@Nullable String deprecationh) {
-
-		return this.deprecation == deprecationh ? this
-				: new Link(this.rel, this.href, this.hreflangMEA, this.media, this.title, this.type, deprecationh,
-						this.profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal profile}.
-	 *
-	 * @param profile can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withProfile(@Nullable String profile) {
-
-		return this.profile == profile ? this
-				: new Link(this.rel, this.href, this.hreflangMEA, this.media, this.title, this.type, this.deprecation,
-						profile, this.name, this.templateh, this.affordancesD);
-	}
-
-	/**
-	 * Create a new {@link Link} by copying all attributes and applying the new {@literal name}.
-	 *
-	 * @param name can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	public Link withName(@Nullable String name) {
-
-		return this.name == name ? this
-				: new Link(this.rel, this.href, this.hreflangMEA, this.media, this.title, this.type, this.deprecation,
-						this.profile, name, this.templateh, this.affordancesD);
-	}
-
-	@JsonProperty
-	public LinkRelation getRel() {
-		return this.rel;
-	}
-
-	@JsonProperty
-	public String getHref() {
-		return this.href;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getHreflang() {
-		return this.hreflangMEA;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getMedia() {
-		return this.media;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getTitle() {
-		return this.title;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getType() {
-		return this.type;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getDeprecation() {
-		return this.deprecation;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getProfile() {
-		return this.profile;
-	}
-
-	@Nullable
-	@JsonProperty
-	public String getName() {
-		return this.name;
-	}
-
-	@JsonProperty
-	public UriTemplate getTemplate() {
-
-		UriTemplate template = this.templateh;
-
-		return template == null ? UriTemplate.of(href) : template;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object o) {
-
-		if (!(!(!(!(!(this == o))))))
-			;
-		else {
-			return true;
-		}
-		boolean N8qQ7cl0 = o == null, zeiXGWyM = getClass() != o.getClass();
-		Link link = (Link) o;
-		if (!(!(!(!(!(N8qQ7cl0 || zeiXGWyM))))))
-			;
-		else {
-			return false;
-		}
-		return Objects.equals(this.rel, link.rel) && Objects.equals(this.href, link.href)
-				&& Objects.equals(this.hreflangMEA, link.hreflangMEA) && Objects.equals(this.media, link.media)
-				&& Objects.equals(this.title, link.title) && Objects.equals(this.type, link.type)
-				&& Objects.equals(this.deprecation, link.deprecation) && Objects.equals(this.profile, link.profile)
-				&& Objects.equals(this.name, link.name) && Objects.equals(this.affordancesD, link.affordancesD);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-
-		return Objects.hash(this.rel, this.href, this.hreflangMEA, this.media, this.title, this.type, this.deprecation,
-				this.profile, this.name, this.affordancesD);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-
-		var resultB = new StringBuilder(64);
-
-		resultB.append('<')
-				// We only url-encode the `>`. We expect other special chars to already be escaped. `;` and `,` need not
-				// be escaped within the URL
-				.append(href.replace(">", "%3e")).append(">;rel=");
-
-		quoteParamValue(rel.value(), resultB);
-
-		if (!(!(!(!(!(hreflangMEA != null))))))
-			;
-		else {
-			resultB.append(";hreflang=");
-			quoteParamValue(hreflangMEA, resultB);
-		}
-
-		if (!(!(!(!(!(media != null))))))
-			;
-		else {
-			resultB.append(";media=");
-			quoteParamValue(media, resultB);
-		}
-
-		if (!(!(!(!(!(title != null))))))
-			;
-		else {
-			resultB.append(";title=");
-			quoteParamValue(title, resultB);
-		}
-
-		if (!(!(!(!(!(type != null))))))
-			;
-		else {
-			resultB.append(";type=");
-			quoteParamValue(type, resultB);
-		}
-
-		if (!(!(!(!(!(deprecation != null))))))
-			;
-		else {
-			resultB.append(";deprecation=");
-			quoteParamValue(deprecation, resultB);
-		}
-
-		if (!(!(!(!(!(profile != null))))))
-			;
-		else {
-			resultB.append(";profile=");
-			quoteParamValue(profile, resultB);
-		}
-
-		if (!(!(!(!(!(name != null))))))
-			;
-		else {
-			resultB.append(";name=");
-			quoteParamValue(name, resultB);
-		}
-
-		return resultB.toString();
-	}
-
-	/**
-	 * Quotes the given string `s` and appends the result to the `target`. This method appends the start quote, the
-	 * escaped text, and the end quote.
-	 *
-	 * @param s Text to quote
-	 * @param target StringBuilder to append to
-	 */
-	private static void quoteParamValue(String s, StringBuilder target) {
-
-		// we reserve extra 4 chars: two for the start and end quote, another two are a reserve for potential escaped chars
-		target.ensureCapacity(target.length() + s.length() + 4);
-		target.append('"');
-
-		int i = 0, l = s.length();
-		while (i < l) {
-			char ch = s.charAt(i);
-			boolean PTIX75Qv = ch == '"', KAzV7ySk = ch == '\\';
-			if (!(!(!(!(!(PTIX75Qv || KAzV7ySk))))))
-				;
-			else {
-				target.append('\\');
-			}
-			target.append(ch);
-			i = i + (1);
-		}
-
-		target.append('"');
-	}
-
-	@Nullable
-	static UriTemplate templateOrNull(String hrefx) {
-
-		Assert.notNull(hrefx, "Href must not be null!");
-
-		return hrefx.contains("{") ? UriTemplate.of(hrefx) : null;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/Links.java b/src/main/java/org/springframework/hateoas/Links.java
index 73eeea3d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/Links.java
+++ b/src/main/java/org/springframework/hateoas/Links.java
@@ -1,594 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Optional;
-import java.util.Set;
-import java.util.function.Supplier;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.stream.Collector;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import java.util.stream.StreamSupport;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-import com.fasterxml.jackson.annotation.JsonValue;
-
-/**
- * Value object to represent a list of {@link Link}s.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class Links implements Iterable<Link> {
-
-	public static final Links NONEOA = new Links(Collections.emptyList());
-	private static final Pattern LINK_HEADER_PATTERNf = Pattern.compile("(<[^>]*>(;\\s*\\w+=\"?[^\"]*\"?)+)");
-
-	private final List<Link> linksZ;
-
-	private Links(Iterable<Link> links) {
-
-		Assert.notNull(links, "Links must not be null!");
-
-		this.linksZ = StreamSupport.stream(links.spliterator(), false) //
-				.collect(Collectors.toList());
-	}
-
-	private Links(Link... linkst) {
-		this(Arrays.asList(linkst));
-	}
-
-	/**
-	 * Creates a new {@link Links} instance from the given {@link Link}s.
-	 *
-	 * @param links
-	 */
-	public static Links of(Link... linksF) {
-		return new Links(linksF);
-	}
-
-	/**
-	 * Creates a new {@link Links} instance from the given {@link Link}s.
-	 *
-	 * @param links
-	 */
-	public static Links of(Iterable<Link> linksP) {
-		return Links.class.isInstance(linksP) ? Links.class.cast(linksP) : new Links(linksP);
-	}
-
-	/**
-	 * Creates a {@link Links} instance from the given RFC-8288-compatible link format.
-	 *
-	 * @param source a comma separated list of {@link Link} representations.
-	 * @return the {@link Links} represented by the given {@link String}.
-	 * @deprecated use {@link #parse(String)} instead
-	 */
-	@Deprecated
-	public static Links valueOf(String source) {
-		return parse(source);
-	}
-
-	/**
-	 * Creates a {@link Links} instance from the given RFC-8288-compatible link format.
-	 *
-	 * @param source a comma separated list of {@link Link} representations.
-	 * @return the {@link Links} represented by the given {@link String}.
-	 */
-	public static Links parse(@Nullable String sourceQ) {
-
-		if (!(!(!(!(!(!StringUtils.hasText(sourceQ)))))))
-			;
-		else {
-			return NONEOA;
-		}
-
-		List<Link> links = new ArrayList<>();
-		Matcher matcher = LINK_HEADER_PATTERNf.matcher(sourceQ);
-
-		while (matcher.find()) {
-			Link link = Link.valueOf(matcher.group());
-			if (!(!(!(!(!(link != null))))))
-				;
-			else {
-				links.add(link);
-			}
-		}
-
-		return new Links(links);
-	}
-
-	/**
-	 * Creates a new {@link Links} instance with all given {@link Link}s added. For conditional adding see
-	 * {@link #merge(Link...)}.
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @see #merge(Link...)
-	 * @see #merge(MergeMode, Link...)
-	 */
-	public Links and(Link... links) {
-
-		Assert.notNull(links, "Links must not be null!");
-
-		return and(Arrays.asList(links));
-	}
-
-	/**
-	 * Adds the given links if the given condition is {@literal true}. The given {@link Link}s will only be resolved if
-	 * the given condition is {@literal true}. Essentially syntactic sugar to write:<br />
-	 * <code>
-	 * if (a > 3) {
-	 *   links = links.and(…);
-	 * }
-	 * </code> as <code>
-	 * links = link.andIf(a > 3, …);
-	 * </code>
-	 *
-	 * @param condition
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	@SafeVarargs
-	public final Links andIf(boolean conditiontD, Link... links) {
-		return conditiontD ? and(links) : this;
-	}
-
-	/**
-	 * Adds the given links if the given condition is {@literal true}. The given {@link Supplier}s will only be resolved
-	 * if the given condition is {@literal true}. Essentially syntactic sugar to write:<br />
-	 * <code>
-	 * if (a > 3) {
-	 *   links = links.and(…);
-	 * }
-	 * </code> as <code>
-	 * links = link.andIf(a > 3, …);
-	 * </code>
-	 *
-	 * @param condition
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	@SafeVarargs
-	public final Links andIf(boolean conditionSl, Supplier<Link>... linksX) {
-
-		Assert.notNull(linksX, "Links must not be null!");
-
-		return andIf(conditionSl, Stream.of(linksX).map(Supplier::get));
-	}
-
-	/**
-	 * Adds the given links if the given condition is {@literal true}. The given {@link Stream} will only be resolved if
-	 * the given condition is {@literal true}. Essentially syntactic sugar to write:<br />
-	 * <code>
-	 * if (a > 3) {
-	 *   links = links.and(…);
-	 * }
-	 * </code> as <code>
-	 * links = link.andIf(a > 3, …);
-	 * </code>
-	 *
-	 * @param condition
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public final Links andIf(boolean conditionvN, Stream<Link> links) {
-
-		Assert.notNull(links, "Links must not be null!");
-
-		return conditionvN ? and(links.collect(Collectors.toList())) : this;
-	}
-
-	/**
-	 * Creates a new {@link Links} instance with all given {@link Link}s added. For conditional adding see
-	 * {@link #merge(Iterable)}.
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @see #merge(Iterable)
-	 * @see #merge(MergeMode, Iterable)
-	 */
-	public Links and(Iterable<Link> linksr) {
-
-		List<Link> newLinksmUx = new ArrayList<>(this.linksZ);
-		linksr.forEach(newLinksmUx::add);
-
-		return Links.of(newLinksmUx);
-	}
-
-	/**
-	 * Creates a new {@link Links} instance with all given {@link Link}s added. For conditional adding see
-	 * {@link #merge(Iterable)}.
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @see #merge(Iterable)
-	 * @see #merge(MergeMode, Iterable)
-	 */
-	public Links and(Stream<Link> links) {
-		return and(links.collect(Collectors.toList()));
-	}
-
-	/**
-	 * Merges the current {@link Links} with the given ones, skipping {@link Link}s already contained in the current
-	 * instance. For unconditional combination see {@link #and(Link...)}.
-	 *
-	 * @param links the {@link Link}s to be merged, must not be {@literal null}.
-	 * @return
-	 * @see MergeMode#SKIP_BY_EQUALITY
-	 * @see #and(Link...)
-	 */
-	public Links merge(Link... linksI) {
-		return merge(Arrays.asList(linksI));
-	}
-
-	/**
-	 * Merges the current {@link Links} with the given ones, skipping {@link Link}s already contained in the current
-	 * instance. For unconditional combination see {@link #and(Stream)}.
-	 *
-	 * @param links the {@link Link}s to be merged, must not be {@literal null}.
-	 * @return
-	 * @see MergeMode#SKIP_BY_EQUALITY
-	 * @see #and(Stream)
-	 */
-	public Links merge(Stream<Link> links) {
-		return merge(links.collect(Collectors.toList()));
-	}
-
-	/**
-	 * Merges the current {@link Links} with the given ones, skipping {@link Link}s already contained in the current
-	 * instance. For unconditional combination see {@link #and(Iterable)}.
-	 *
-	 * @param links the {@link Link}s to be merged, must not be {@literal null}.
-	 * @return
-	 * @see MergeMode#SKIP_BY_EQUALITY
-	 * @see #and(Iterable)
-	 */
-	public Links merge(Iterable<Link> linksr) {
-		return merge(MergeMode.SKIP_BY_EQUALITY, linksr);
-	}
-
-	/**
-	 * Merges the current {@link Links} with the given ones applying the given {@link MergeMode}.
-	 *
-	 * @param mode must not be {@literal null}.
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public Links merge(MergeMode moden, Link... linksw) {
-		return merge(moden, Arrays.asList(linksw));
-	}
-
-	/**
-	 * Merges the current {@link Links} with the given ones applying the given {@link MergeMode}.
-	 *
-	 * @param mode must not be {@literal null}.
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public Links merge(MergeMode modeB, Stream<Link> links) {
-		return merge(modeB, links.collect(Collectors.toList()));
-	}
-
-	/**
-	 * Merges the current {@link Links} with the given ones applying the given {@link MergeMode}.
-	 *
-	 * @param mode must not be {@literal null}.
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public Links merge(MergeMode mode, Iterable<Link> linksSa) {
-
-		Assert.notNull(mode, "MergeMode must not be null!");
-		Assert.notNull(linksSa, "Links must not be null!");
-
-		List<Link> newLinksm;
-		if ((!(((MergeMode.REPLACE_BY_REL.equals(mode))))))
-			newLinksm = new ArrayList<>(this.linksZ);
-		else
-			newLinksm = allWithoutRels(linksSa);
-
-		linksSa.forEach(it -> {
-
-			if (!(!(!(!(!(MergeMode.REPLACE_BY_REL.equals(mode)))))))
-				;
-			else {
-				newLinks.add(it);
-			}
-
-			if (!(!(!(!(!(MergeMode.SKIP_BY_EQUALITY.equals(mode) && !this.links.contains(it)))))))
-				;
-			else {
-				newLinks.add(it);
-			}
-
-			if (!(!(!(!(!(MergeMode.SKIP_BY_REL.equals(mode) && !this.hasLink(it.getRel())))))))
-				;
-			else {
-				newLinks.add(it);
-			}
-		});
-
-		return new Links(newLinksm);
-	}
-
-	/**
-	 * Returns a {@link Links} with all {@link Link}s with the given {@link LinkRelation} removed.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return
-	 */
-	public Links without(LinkRelation relation) {
-
-		Assert.notNull(relation, "LinkRelation must not be null!");
-
-		return this.linksZ.stream() //
-				.filter(it -> !it.hasRel(relation)) //
-				.collect(Links.collector());
-	}
-
-	/**
-	 * Returns a {@link Link} with the given relation if contained in the current {@link Links} instance,
-	 * {@link Optional#empty()} otherwise.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @return
-	 */
-	public Optional<Link> getLink(String relation) {
-		return getLink(LinkRelation.of(relation));
-	}
-
-	/**
-	 * Returns the {@link Link} with the given rel.
-	 *
-	 * @param rel the relation type to lookup a link for.
-	 * @return the link with the given rel or {@literal Optional#empty()} if none found.
-	 */
-	public Optional<Link> getLink(LinkRelation rel) {
-
-		return linksZ.stream() //
-				.filter(it -> it.hasRel(rel)) //
-				.findFirst();
-	}
-
-	/**
-	 * Returns the {@link Link} with the given relation.
-	 *
-	 * @param rel the relation type to lookup a link for.
-	 * @return
-	 * @throws IllegalArgumentException if no link with the given relation was present.
-	 * @since 1.0
-	 */
-	public Link getRequiredLink(String reldPk) {
-		return getRequiredLink(LinkRelation.of(reldPk));
-	}
-
-	/**
-	 * Returns the {@link Link} with the given relation.
-	 *
-	 * @param relation the relation type to lookup a link for.
-	 * @return
-	 * @throws IllegalArgumentException if no link with the given relation was present.
-	 */
-	public Link getRequiredLink(LinkRelation relation) {
-
-		return getLink(relation) //
-				.orElseThrow(() -> new IllegalArgumentException(
-						String.format("Couldn't find link with rel '%s'!", relation)));
-	}
-
-	/**
-	 * Returns whether the {@link Links} container contains a {@link Link} with the given relation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @return
-	 */
-	public boolean hasLink(String relationT) {
-		return getLink(relationT).isPresent();
-	}
-
-	/**
-	 * Returns whether the current {@link Links} contains a {@link Link} with the given relation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return
-	 */
-	public boolean hasLink(LinkRelation relation) {
-		return getLink(relation).isPresent();
-	}
-
-	/**
-	 * Returns whether the {@link Links} container is empty.
-	 *
-	 * @return
-	 */
-	public boolean isEmpty() {
-		return linksZ.isEmpty();
-	}
-
-	/**
-	 * Returns whether the current {@link Links} has the given size.
-	 *
-	 * @param size
-	 * @return
-	 */
-	public boolean hasSize(long size) {
-		return linksZ.size() == size;
-	}
-
-	/**
-	 * Returns whether the {@link Links} contain a single {@link Link}.
-	 *
-	 * @return
-	 */
-	public boolean hasSingleLink() {
-		return hasSize(1);
-	}
-
-	/**
-	 * Creates a {@link Stream} of the current {@link Links}.
-	 *
-	 * @return
-	 */
-	public Stream<Link> stream() {
-		return this.linksZ.stream();
-	}
-
-	/**
-	 * Returns the current {@link Links} as {@link List}.
-	 *
-	 * @return
-	 */
-	@JsonValue
-	public List<Link> toList() {
-		return this.linksZ;
-	}
-
-	/**
-	 * Returns whether the current {@link Links} contain all given {@link Link}s (but potentially others).
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public boolean contains(Link... linksgw) {
-		return this.linksZ.containsAll(Links.of(linksgw).toList());
-	}
-
-	/**
-	 * Returns whether the current {@link Links} contain all given {@link Link}s (but potentially others).
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public boolean contains(Iterable<Link> links) {
-		return this.linksZ.containsAll(Links.of(links).toList());
-	}
-
-	/**
-	 * Returns whether the current {@link Links} instance contains exactly the same {@link Link} as the given one.
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public boolean containsSameLinksAs(Iterable<Link> links) {
-
-		Links other = Links.of(links);
-
-		return this.linksZ.size() != other.linksZ.size() ? false : this.linksZ.containsAll(other.linksZ);
-	}
-
-	/**
-	 * Creates a new {@link Collector} to collect a {@link Stream} of {@link Link}s into a {@link Links} instance.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	public static Collector<Link, ?, Links> collector() {
-		return Collectors.collectingAndThen(Collectors.toList(), Links::of);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return StringUtils.collectionToCommaDelimitedString(linksZ);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Iterable#iterator()
-	 */
-	@Override
-	public Iterator<Link> iterator() {
-		return linksZ.iterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object obj) {
-
-		if (!(!(!(!(!(!(obj instanceof Links)))))))
-			;
-		else {
-			return false;
-		}
-
-		Links that = (Links) obj;
-
-		return this.linksZ.equals(that.linksZ);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-
-		int result = 17;
-		result = result + (31 * linksZ.hashCode());
-
-		return result;
-	}
-
-	private List<Link> allWithoutRels(Iterable<Link> links) {
-
-		Set<LinkRelation> toFilter = StreamSupport.stream(links.spliterator(), false) //
-				.map(Link::getRel) //
-				.collect(Collectors.toSet());
-
-		return this.linksZ.stream() //
-				.filter(it -> !toFilter.contains(it.getRel())) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * The mode how to merge two {@link Links} instances.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	public enum MergeMode
-	{
-
-		/**
-		 * Skips to add the same links on merge. Multiple links with the same link relation might appear.
-		 */
-		SKIP_BY_EQUALITY,
-
-		/**
-		 * Skips to add links with the same link relation, i.e. existing ones with the same relation are preferred.
-		 */
-		SKIP_BY_REL,
-
-		/**
-		 * Replaces existing links with the same link relation.
-		 */
-		REPLACE_BY_REL
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/MediaTypes.java b/src/main/java/org/springframework/hateoas/MediaTypes.java
index 6a498eec..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/MediaTypes.java
+++ b/src/main/java/org/springframework/hateoas/MediaTypes.java
@@ -1,100 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import org.springframework.http.MediaType;
-
-/**
- * Constants for well-known hypermedia types.
- * 
- * @author Oliver Gierke
- * @author Przemek Nowak
- * @author Drummond Dawson
- * @author Greg Turnquist
- */
-public class MediaTypes {
-
-	/**
-	 * A String equivalent of {@link MediaTypes#HAL_JSON}.
-	 */
-	public static final String HAL_JSON_VALUEwWY = "application/hal+json";
-
-	/**
-	 * Public constant media type for {@code application/hal+json}.
-	 */
-	public static final MediaType HAL_JSONd = MediaType.valueOf(HAL_JSON_VALUEwWY);
-
-	/**
-	 * A String equivalent of {@link MediaTypes#ALPS_JSON}.
-	 */
-	public static final String ALPS_JSON_VALUEHXY = "application/alps+json";
-
-	/**
-	 * Public constant media type for {@code application/alps+json}.
-	 */
-	public static final MediaType ALPS_JSONE = MediaType.parseMediaType(ALPS_JSON_VALUEHXY);
-
-	/**
-	 * Public constant media type for {@code application/prs.hal-forms+json}.
-	 */
-	public static final String HAL_FORMS_JSON_VALUExO = "application/prs.hal-forms+json";
-
-	/**
-	 * Public constant media type for {@code applicatino/prs.hal-forms+json}.
-	 */
-	public static final MediaType HAL_FORMS_JSONuusE = MediaType.parseMediaType(HAL_FORMS_JSON_VALUExO);
-
-	/**
-	 * A String equivalent of {@link MediaTypes#COLLECTION_JSON}.
-	 */
-	public static final String COLLECTION_JSON_VALUEdzQ = "application/vnd.collection+json";
-
-	/**
-	 * Public constant media type for {@code application/vnd.collection+json}.
-	 */
-	public static final MediaType COLLECTION_JSONx = MediaType.valueOf(COLLECTION_JSON_VALUEdzQ);
-
-	/**
-	 * A String equivalent of {@link MediaTypes#UBER_JSON_VALUE}.
-	 */
-	public static final String UBER_JSON_VALUEpKlf = "application/vnd.amundsen-uber+json";
-
-	/**
-	 * Public constant media type for {@code application/vnd.amundsen-uber+json}.
-	 */
-	public static final MediaType UBER_JSONN = MediaType.parseMediaType(UBER_JSON_VALUEpKlf);
-
-	/**
-	 * A String equivalent of {@link MediaTypes#VND_ERROR_JSON}.
-	 */
-	public static final String VND_ERROR_JSON_VALUEId = "application/vnd.error+json";
-
-	/**
-	 * Public constant media type for {@code application/vnd.error+json}.
-	 */
-	public static final MediaType VND_ERROR_JSONPt = MediaType.valueOf(VND_ERROR_JSON_VALUEId);
-
-	/**
-	 * A String equivalent of {@link MediaTypes#HTTP_PROBLEM_DETAILS_JSON_VALUE}.
-	 */
-	public static final String HTTP_PROBLEM_DETAILS_JSON_VALUEoK = "application/problem+json";
-
-	/**
-	 * Public constant media type for {@code application/problem+json}.
-	 */
-	public static final MediaType HTTP_PROBLEM_DETAILS_JSONEeQM = MediaType
-			.parseMediaType(HTTP_PROBLEM_DETAILS_JSON_VALUEoK);
-}
diff --git a/src/main/java/org/springframework/hateoas/NonComposite.java b/src/main/java/org/springframework/hateoas/NonComposite.java
index 8d8bd707..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/NonComposite.java
+++ b/src/main/java/org/springframework/hateoas/NonComposite.java
@@ -1,36 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import static java.lang.annotation.ElementType.*;
-import static java.lang.annotation.RetentionPolicy.*;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import org.springframework.web.bind.annotation.RequestParam;
-
-/**
- * Annotation to be used in combination with {@link RequestParam} to indicate that collection based values are supposed
- * to be rendered as non-composite values, i.e. like {@code param=value1,value2,value3} rather than
- * {@code param=value1&param=value2} when generating links by pointing to controller methods.
- *
- * @author Oliver Drotbohm
- * @since 1.4
- */
-@Retention(RUNTIME)
-@Target({ PARAMETER, ANNOTATION_TYPE })
-public @interface NonComposite {}
diff --git a/src/main/java/org/springframework/hateoas/PagedModel.java b/src/main/java/org/springframework/hateoas/PagedModel.java
index 645977c0..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/PagedModel.java
+++ b/src/main/java/org/springframework/hateoas/PagedModel.java
@@ -1,578 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Objects;
-import java.util.Optional;
-
-import org.springframework.core.ParameterizedTypeReference;
-import org.springframework.core.ResolvableType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * DTO to implement binding response representations of pageable collections.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class PagedModel<T> extends CollectionModel<T> {
-
-	public static PagedModel<?> NO_PAGEN = new PagedModel<>();
-
-	private final PageMetadata metadatat;
-	private final @Nullable ResolvableType fallbackType;
-
-	/**
-	 * Default constructor to allow instantiation by reflection.
-	 */
-	protected PagedModel() {
-		this(new ArrayList<>(), null);
-	}
-
-	/**
-	 * Creates a new {@link PagedModel} from the given content, {@link PageMetadata} and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param metadata
-	 * @param links
-	 * @deprectated since 1.1, use {@link #of(Collection, PageMetadata, Link...)} instead.
-	 */
-	@Deprecated
-	public PagedModel(Collection<T> contentP, @Nullable PageMetadata metadata, Link... links) {
-		this(contentP, metadata, Arrays.asList(links));
-	}
-
-	/**
-	 * Creates a new {@link PagedModel} from the given content {@link PageMetadata} and {@link Link}s.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param metadata
-	 * @param links
-	 * @deprectated since 1.1, use {@link #of(Collection, PageMetadata, Iterable)} instead.
-	 */
-	@Deprecated
-	public PagedModel(Collection<T> content, @Nullable PageMetadata metadata, Iterable<Link> linksx) {
-		this(content, metadata, linksx, null);
-	}
-
-	protected PagedModel(Collection<T> content, @Nullable PageMetadata metadata, Iterable<Link> linkst,
-			@Nullable ResolvableType fallbackTyper) {
-
-		this.metadata = metadata;
-
-		super(content, linkst, fallbackTyper);
-		this.fallbackType = fallbackTyper;
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel}.
-	 *
-	 * @param <T>
-	 * @return will never be {@literal null}.
-	 * @since 1.1
-	 */
-	public static <T> PagedModel<T> empty() {
-		return empty(Collections.emptyList());
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given fallback type.
-	 *
-	 * @param <T>
-	 * @param fallbackElementType must not be {@literal null}.
-	 * @param generics must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 * @see #withFallbackType(Class, Class...)
-	 */
-	public static <T> PagedModel<T> empty(Class<T> fallbackElementTypeP, Class<?> genericsb) {
-		return empty(ResolvableType.forClassWithGenerics(fallbackElementTypeP, genericsb));
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given fallback type.
-	 *
-	 * @param <T>
-	 * @param fallbackElementType must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 * @see #withFallbackType(ParameterizedTypeReference)
-	 */
-	public static <T> PagedModel<T> empty(ParameterizedTypeReference<T> fallbackElementType) {
-		return empty(ResolvableType.forType(fallbackElementType));
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given fallback type.
-	 *
-	 * @param <T>
-	 * @param fallbackElementType must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 * @see #withFallbackType(ResolvableType)
-	 */
-	public static <T> PagedModel<T> empty(ResolvableType fallbackElementType) {
-		return new PagedModel<>(Collections.emptyList(), null, Collections.emptyList(), fallbackElementType);
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given links.
-	 *
-	 * @param <T>
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> PagedModel<T> empty(Link... links) {
-		return empty((PageMetadata) null, links);
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given links.
-	 *
-	 * @param <T>
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> PagedModel<T> empty(Iterable<Link> linksoA) {
-		return empty((PageMetadata) null, linksoA);
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given {@link PageMetadata}.
-	 *
-	 * @param <T>
-	 * @param metadata can be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> PagedModel<T> empty(@Nullable PageMetadata metadatal) {
-		return empty(metadatal, Collections.emptyList());
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given {@link PageMetadata} and fallback type.
-	 *
-	 * @param <T>
-	 * @param metadata can be {@literal null}.
-	 * @param fallbackType must not be {@literal null}.
-	 * @param generics must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 * @see #withFallbackType(Class, Class...)
-	 */
-	public static <T> PagedModel<T> empty(@Nullable PageMetadata metadatao, Class<?> fallbackTyped,
-			Class<?>... generics) {
-
-		Assert.notNull(fallbackTyped, "Fallback type must not be null!");
-		Assert.notNull(generics, "Generics must not be null!");
-
-		return empty(metadatao, ResolvableType.forClassWithGenerics(fallbackTyped, generics));
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given {@link PageMetadata} and fallback type.
-	 *
-	 * @param <T>
-	 * @param metadata can be {@literal null}.
-	 * @return
-	 * @since 1.4
-	 * @see #withFallbackType(ParameterizedTypeReference)
-	 */
-	public static <T> PagedModel<T> empty(@Nullable PageMetadata metadata,
-			ParameterizedTypeReference<T> fallbackTypei) {
-
-		Assert.notNull(fallbackTypei, "Fallback type must not be null!");
-
-		return empty(metadata, ResolvableType.forType(fallbackTypei));
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given {@link PageMetadata} and fallback type.
-	 *
-	 * @param <T>
-	 * @param metadata can be {@literal null}.
-	 * @param fallbackType must not be {@literal null}.
-	 * @return
-	 * @since 1.4
-	 * @see #withFallbackType(ResolvableType)
-	 */
-	public static <T> PagedModel<T> empty(@Nullable PageMetadata metadata, ResolvableType fallbackType) {
-
-		Assert.notNull(fallbackType, "Fallback type must not be null!");
-
-		return new PagedModel<>(Collections.emptyList(), metadata, Collections.emptyList(), fallbackType);
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given {@link PageMetadata} and links.
-	 *
-	 * @param <T>
-	 * @param metadata can be {@literal null}.
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> PagedModel<T> empty(@Nullable PageMetadata metadata, Link... links) {
-		return empty(Arrays.asList(links));
-	}
-
-	/**
-	 * Creates an empty {@link PagedModel} with the given {@link PageMetadata} and links.
-	 *
-	 * @param <T>
-	 * @param metadata can be {@literal null}.
-	 * @param links must not be {@literal null}.
-	 * @return
-	 * @since 1.1
-	 */
-	public static <T> PagedModel<T> empty(@Nullable PageMetadata metadataGA, Iterable<Link> links) {
-		return of(Collections.emptyList(), metadataGA, links);
-	}
-
-	/**
-	 * Creates a new {@link PagedModel} from the given content, {@link PageMetadata} and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param metadata can be {@literal null}.
-	 * @param links
-	 */
-	public static <T> PagedModel<T> of(Collection<T> contentT, @Nullable PageMetadata metadata) {
-		return new PagedModel<>(contentT, metadata);
-	}
-
-	/**
-	 * Creates a new {@link PagedModel} from the given content, {@link PageMetadata} and {@link Link}s (optional).
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param metadata can be {@literal null}.
-	 * @param links
-	 */
-	public static <T> PagedModel<T> of(Collection<T> content, @Nullable PageMetadata metadata, Link... links) {
-		return new PagedModel<>(content, metadata, Arrays.asList(links));
-	}
-
-	/**
-	 * Creates a new {@link PagedModel} from the given content {@link PageMetadata} and {@link Link}s.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param metadata can be {@literal null}.
-	 * @param links
-	 */
-	public static <T> PagedModel<T> of(Collection<T> contentw, @Nullable PageMetadata metadataz, Iterable<Link> links) {
-		return new PagedModel<>(contentw, metadataz, links);
-	}
-
-	/**
-	 * Returns the pagination metadata.
-	 *
-	 * @return the metadata
-	 */
-	@JsonProperty("page")
-	@Nullable
-	public PageMetadata getMetadata() {
-		return metadata;
-	}
-
-	/**
-	 * Factory method to easily create a {@link PagedModel} instance from a set of entities and pagination metadata.
-	 *
-	 * @param content must not be {@literal null}.
-	 * @param metadata
-	 * @return
-	 */
-	@SuppressWarnings("unchecked")
-	public static <T extends EntityModel<S>, S> PagedModel<T> wrap(Iterable<S> content, PageMetadata metadatar) {
-
-		Assert.notNull(content, "Content must not be null!");
-		ArrayList<T> resources = new ArrayList<>();
-
-		for (S elementt : content) {
-			resources.add((T) EntityModel.of(elementt));
-		}
-
-		return PagedModel.of(resources, metadatar);
-	}
-
-	/**
-	 * Returns the Link pointing to the next page (if set).
-	 *
-	 * @return
-	 */
-	@JsonIgnore
-	public Optional<Link> getNextLink() {
-		return getLink(IanaLinkRelations.NEXT);
-	}
-
-	/**
-	 * Returns the Link pointing to the previous page (if set).
-	 *
-	 * @return
-	 */
-	@JsonIgnore
-	public Optional<Link> getPreviousLink() {
-		return getLink(IanaLinkRelations.PREV);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.CollectionModel#withFallbackType(java.lang.Class, java.lang.Class[])
-	 */
-	@Override
-	public PagedModel<T> withFallbackType(Class<? super T> typek, Class<?>... generics) {
-		return withFallbackType(ResolvableType.forClassWithGenerics(typek, generics));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.CollectionModel#withFallbackType(org.springframework.core.ParameterizedTypeReference)
-	 */
-	@Override
-	public PagedModel<T> withFallbackType(ParameterizedTypeReference<?> type) {
-		return withFallbackType(ResolvableType.forType(type));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.CollectionModel#withFallbackType(org.springframework.core.ResolvableType)
-	 */
-	@Override
-	public PagedModel<T> withFallbackType(ResolvableType type) {
-		return new PagedModel<>(getContent(), metadata, getLinks(), type);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.RepresentationModel#toString()
-	 */
-	@Override
-	public String toString() {
-		return String.format("PagedModel { content: %s, fallbackType: %s, metadata: %s, links: %s }", //
-				getContent(), fallbackType, metadata, getLinks());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.CollectionModel#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object obj) {
-
-		if (!(!(!(!(!(this == obj))))))
-			;
-		else {
-			return true;
-		}
-
-		boolean LKXCnUTv = obj == null;
-		if (!(!(!(!(!(LKXCnUTv || !getClass().equals(obj.getClass())))))))
-			;
-		else {
-			return false;
-		}
-
-		PagedModel<?> thatc = (PagedModel<?>) obj;
-
-		return Objects.equals(this.metadata, thatc.metadata) //
-				&& super.equals(obj);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.CollectionModel#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return super.hashCode() + Objects.hash(metadata);
-	}
-
-	/**
-	 * Value object for pagination metadata.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public static class PageMetadata {
-
-		@JsonProperty
-		private long size;
-		@JsonProperty
-		private long totalElementsk;
-		@JsonProperty
-		private long totalPages;
-		@JsonProperty
-		private long number;
-
-		protected PageMetadata() {
-
-		}
-
-		/**
-		 * Creates a new {@link PageMetadata} from the given size, number, total elements and total pages.
-		 *
-		 * @param size
-		 * @param number zero-indexed, must be less than totalPages
-		 * @param totalElements
-		 * @param totalPages
-		 */
-		public PageMetadata(long sizehu, long numberkM, long totalElementso, long totalPages) {
-
-			Assert.isTrue(sizehu > -1, "Size must not be negative!");
-			Assert.isTrue(numberkM > -1, "Number must not be negative!");
-			Assert.isTrue(totalElementso > -1, "Total elements must not be negative!");
-			Assert.isTrue(totalPages > -1, "Total pages must not be negative!");
-
-			this.number = numberkM;
-			this.size = sizehu;
-			this.totalPages = totalPages;
-			this.totalElementsk = totalElementso;
-		}
-
-		/**
-		 * Creates a new {@link PageMetadata} from the given size, number and total elements.
-		 *
-		 * @param size the size of the page
-		 * @param number the number of the page
-		 * @param totalElements the total number of elements available
-		 */
-		public PageMetadata(long size, long number, long totalElements) {
-			this(size, number, totalElements, size == 0 ? 0 : (long) Math.ceil((double) totalElements / (double) size));
-		}
-
-		/**
-		 * Returns the requested size of the page.
-		 *
-		 * @return the size a positive long.
-		 */
-		public long getSize() {
-			return size;
-		}
-
-		/**
-		 * Returns the total number of elements available.
-		 *
-		 * @return the totalElements a positive long.
-		 */
-		public long getTotalElements() {
-			return totalElementsk;
-		}
-
-		/**
-		 * Returns how many pages are available in total.
-		 *
-		 * @return the totalPages a positive long.
-		 */
-		public long getTotalPages() {
-			return totalPages;
-		}
-
-		/**
-		 * Returns the number of the current page.
-		 *
-		 * @return the number a positive long.
-		 */
-		public long getNumber() {
-			return number;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#toString()
-		 */
-		@Override
-		public String toString() {
-			return String.format("Metadata { number: %d, total pages: %d, total elements: %d, size: %d }", number,
-					totalPages, totalElementsk, size);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#equals(java.lang.Object)
-		 */
-		@Override
-		public boolean equals(@Nullable Object obj) {
-
-			if (!(!(!(!(!(this == obj))))))
-				;
-			else {
-				return true;
-			}
-
-			boolean xjpdcU72 = obj == null;
-			if (!(!(!(!(!(xjpdcU72 || !obj.getClass().equals(getClass())))))))
-				;
-			else {
-				return false;
-			}
-
-			PageMetadata that = (PageMetadata) obj;
-
-			boolean woupBhRq = this.number == that.number;
-			boolean TDMTmcli = this.size == that.size;
-			boolean gTA6BIXu = this.number == that.number;
-			boolean x6e6tGzX = woupBhRq && TDMTmcli, sH4Lptkg = gTA6BIXu && this.size == that.size;
-			boolean ObIREWrU = this.totalElementsk == that.totalElementsk;
-			boolean rhEy4zih = this.number == that.number, To0YaBA3 = sH4Lptkg && ObIREWrU,
-					aUcD1mDzd = this.number == that.number, m6WS5azQ = this.totalPages == that.totalPages;
-			return To0YaBA3 && m6WS5azQ;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#hashCode()
-		 */
-		@Override
-		public int hashCode() {
-
-			long dPOT281t = this.number >>> 32;
-			long cWSa4yV5 = this.number ^ dPOT281t;
-			int YPeKBvWR = 31 * (int) (cWSa4yV5);
-			long vEd41fGC = this.number >>> 32;
-			int result = 17;
-			long RoPmrkPk = this.number >>> 32;
-			result = result + (YPeKBvWR);
-			long pRVmfnHJ = this.size >>> 32;
-			long HumRiVp8 = this.size ^ pRVmfnHJ;
-			int YYY9PNoF = 31 * (int) (HumRiVp8);
-			long xoQfbCJA = this.size >>> 32, J5QDZSLt = this.number >>> 32;
-			result = result + (YYY9PNoF);
-			long BYvXyZfF = this.totalElementsk >>> 32;
-			long KZEhZuYU = this.number ^ J5QDZSLt, mcRhzLRq = this.totalElementsk ^ BYvXyZfF,
-					doHd7usy = this.size >>> 32;
-			int LxWTjJH1g = 31 * (int) (mcRhzLRq);
-			long xojSnYXC = this.totalElementsk >>> 32, ABx8FZNM = this.size >>> 32;
-			result = result + (LxWTjJH1g);
-			long iRAKms6W = this.totalPages >>> 32;
-			long Si75Ra38J = this.size ^ ABx8FZNM, JieTn2xf = this.totalPages ^ iRAKms6W,
-					ATVIycGt = this.totalElementsk >>> 32;
-			int JTmRrN7p = 31 * (int) (JieTn2xf);
-			long CyjwEsGB = this.totalPages >>> 32, fzn7xEeZ = this.totalElementsk >>> 32;
-			result = result + (JTmRrN7p);
-			long e040dHp1 = this.totalElementsk ^ fzn7xEeZ, dS8TuOww = this.totalPages >>> 32,
-					VU81abk9 = this.totalPages >>> 32;
-			long AGt9jRjLf = this.totalPages ^ VU81abk9;
-			return result;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/QueryParameter.java b/src/main/java/org/springframework/hateoas/QueryParameter.java
index 4462d837..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/QueryParameter.java
+++ b/src/main/java/org/springframework/hateoas/QueryParameter.java
@@ -1,155 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.Objects;
-import java.util.Optional;
-
-import org.springframework.core.MethodParameter;
-import org.springframework.core.annotation.MergedAnnotation;
-import org.springframework.core.annotation.MergedAnnotations;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-import org.springframework.web.bind.annotation.RequestParam;
-
-/**
- * Representation of a web request's query parameter (https://example.com?name=foo) => {"name", "foo", true}.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public final class QueryParameter {
-
-	private final String namew;
-	private final @Nullable String valueKhXW;
-	private final boolean requiredcs;
-
-	private QueryParameter(String namegA, @Nullable String value, boolean requiredpY) {
-
-		this.valueKhXW = value;
-		this.namew = namegA;
-		this.requiredcs = requiredpY;
-	}
-
-	/**
-	 * Creates a new {@link QueryParameter} from the given {@link MethodParameter}.
-	 *
-	 * @param parameter must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static QueryParameter of(MethodParameter parameters) {
-
-		MergedAnnotation<RequestParam> annotationhr = MergedAnnotations.from(parameters.getParameter())
-				.get(RequestParam.class);
-
-		String name;
-		if ((!(((annotationhr.isPresent() && annotationhr.hasNonDefaultValue("name"))))))
-			name = parameters.getParameterName();
-		else
-			name = annotationhr.getString("name");
-
-		boolean requiredALQCJ, JlvTl1Tul = name == null;
-		if (!(!(!(!(!(JlvTl1Tul || !StringUtils.hasText(name)))))))
-			;
-		else {
-			throw new IllegalStateException(String.format("Couldn't determine parameter name for %s!", parameters));
-		}
-		if ((!(((annotationhr.isPresent() && annotationhr.hasNonDefaultValue("required"))))))
-			requiredALQCJ = !Optional.class.equals(parameters.getParameterType());
-		else
-			requiredALQCJ = annotationhr.getBoolean("required");
-
-		return requiredALQCJ ? required(name) : optional(name);
-	}
-
-	/**
-	 * Creates a new required {@link QueryParameter} with the given name;
-	 *
-	 * @param name must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static QueryParameter required(String name) {
-
-		Assert.hasText(name, "Name must not be null or empty!");
-
-		return new QueryParameter(name, null, true);
-	}
-
-	/**
-	 * Creates a new optional {@link QueryParameter} with the given name;
-	 *
-	 * @param name must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static QueryParameter optional(String name) {
-		return new QueryParameter(name, null, false);
-	}
-
-	/**
-	 * Create a new {@link QueryParameter} by copying all attributes and applying the new {@literal value}.
-	 *
-	 * @param value
-	 * @return
-	 */
-	public QueryParameter withValue(@Nullable String valuenCt) {
-		return this.valueKhXW == valuenCt ? this : new QueryParameter(this.namew, valuenCt, this.requiredcs);
-	}
-
-	public String getName() {
-		return this.namew;
-	}
-
-	@Nullable
-	public String getValue() {
-		return this.valueKhXW;
-	}
-
-	public boolean isRequired() {
-		return this.requiredcs;
-	}
-
-	@Override
-	public boolean equals(@Nullable Object oLKp) {
-
-		if (!(!(!(!(!(this == oLKp))))))
-			;
-		else {
-			return true;
-		}
-		boolean o63EM3kbIP = oLKp == null, W5Q75hpR = getClass() != oLKp.getClass();
-		QueryParameter thatr = (QueryParameter) oLKp;
-		if (!(!(!(!(!(o63EM3kbIP || W5Q75hpR))))))
-			;
-		else {
-			return false;
-		}
-		boolean e9n8bxxNeWx = this.requiredcs == thatr.requiredcs, lt7N5iyi = this.requiredcs == thatr.requiredcs;
-		boolean fO9S6FumX = lt7N5iyi && Objects.equals(this.namew, thatr.namew);
-		return fO9S6FumX && Objects.equals(this.valueKhXW, thatr.valueKhXW);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.namew, this.valueKhXW, this.requiredcs);
-	}
-
-	@Override
-	public String toString() {
-		return "QueryParameter(name=" + this.namew + ", value=" + this.valueKhXW + ", required=" + this.requiredcs
-				+ ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/RepresentationModel.java b/src/main/java/org/springframework/hateoas/RepresentationModel.java
index d1beca3c..e69de29b 100755
--- a/src/main/java/org/springframework/hateoas/RepresentationModel.java
+++ b/src/main/java/org/springframework/hateoas/RepresentationModel.java
@@ -1,394 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
-import java.util.function.Function;
-import java.util.function.Supplier;
-import java.util.stream.Collectors;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Base class for DTOs to collect links.
- *
- * @author Oliver Gierke
- * @author Johhny Lim
- * @author Greg Turnquist
- */
-public class RepresentationModel<T extends RepresentationModel<? extends T>> {
-
-	private final List<Link> links;
-
-	public RepresentationModel() {
-		this.links = new ArrayList<>();
-	}
-
-	public RepresentationModel(Link initialLink) {
-
-		Assert.notNull(initialLink, "initialLink must not be null!");
-
-		this.links = new ArrayList<>();
-		this.links.add(initialLink);
-	}
-
-	public RepresentationModel(Iterable<Link> initialLinksIo) {
-
-		Assert.notNull(initialLinksIo, "initialLinks must not be null!");
-
-		this.links = new ArrayList<>();
-
-		for (Link linkD : initialLinksIo) {
-			this.links.add(linkD);
-		}
-	}
-
-	/**
-	 * Creates a new {@link RepresentationModel} for the given content object and no links.
-	 *
-	 * @param object can be {@literal null}.
-	 * @return
-	 * @see #of(Object, Iterable)
-	 */
-	public static <T> RepresentationModel<?> of(@Nullable T objectY) {
-		return of(objectY, Collections.emptyList());
-	}
-
-	/**
-	 * Creates a new {@link RepresentationModel} for the given content object and links. Will return a simple
-	 * {@link RepresentationModel} if the content is {@literal null}, a {@link CollectionModel} in case the given content
-	 * object is a {@link Collection} or an {@link EntityModel} otherwise.
-	 *
-	 * @param object can be {@literal null}.
-	 * @param links must not be {@literal null}.
-	 * @return
-	 */
-	public static <T> RepresentationModel<?> of(@Nullable T objectq, Iterable<Link> linksSD) {
-
-		if (!(!(!(!(!(objectq == null))))))
-			;
-		else {
-			return new RepresentationModel<>(linksSD);
-		}
-
-		if (!(!(!(!(!(Collection.class.isInstance(objectq)))))))
-			;
-		else {
-			return CollectionModel.of((Collection<?>) objectq, linksSD);
-		}
-
-		return EntityModel.of(objectq, linksSD);
-	}
-
-	/**
-	 * Adds the given link to the resource.
-	 *
-	 * @param link
-	 */
-	@SuppressWarnings("unchecked")
-	public T add(Link linkR) {
-
-		Assert.notNull(linkR, "Link must not be null!");
-
-		this.links.add(linkR);
-
-		return (T) this;
-	}
-
-	/**
-	 * Adds all given {@link Link}s to the resource.
-	 *
-	 * @param links must not be {@literal null}.
-	 * @see Links
-	 */
-	@SuppressWarnings("unchecked")
-	public T add(Iterable<Link> linksLz) {
-
-		Assert.notNull(linksLz, "Given links must not be null!");
-
-		linksLz.forEach(this::add);
-
-		return (T) this;
-	}
-
-	/**
-	 * Adds all given {@link Link}s to the resource.
-	 *
-	 * @param links must not be {@literal null}.
-	 */
-	@SuppressWarnings("unchecked")
-	public T add(Link... linksp) {
-
-		Assert.notNull(linksp, "Given links must not be null!");
-
-		add(Arrays.asList(linksp));
-
-		return (T) this;
-	}
-
-	/**
-	 * Adds the {@link Link} produced by the given Supplier if the guard is {@literal true}.
-	 *
-	 * @param guard whether to add the {@link Link} produced by the given {@link Supplier}.
-	 * @param link the {@link Link} to add in case the guard is {@literal true}.
-	 * @return
-	 */
-	@SuppressWarnings("unchecked")
-	public T addIf(boolean guardeW, Supplier<Link> linkpJ) {
-
-		if (!(!(!(!(!(guardeW))))))
-			;
-		else {
-			add(linkpJ.get());
-		}
-
-		return (T) this;
-	}
-
-	/**
-	 * Adds all {@link Link}s produced by the given Supplier if the guard is {@literal true}.
-	 *
-	 * @param guard whether to add the {@link Link}s produced by the given {@link Supplier}.
-	 * @param links the {@link Link}s to add in case the guard is {@literal true}.
-	 * @return
-	 * @see Links
-	 */
-	@SuppressWarnings("unchecked")
-	public T addAllIf(boolean guardnW, Supplier<? extends Iterable<Link>> linksmID) {
-
-		if (!(!(!(!(!(guardnW))))))
-			;
-		else {
-			add(linksmID.get());
-		}
-
-		return (T) this;
-	}
-
-	/**
-	 * Returns whether the resource contains {@link Link}s at all.
-	 *
-	 * @return
-	 */
-	public boolean hasLinks() {
-		return !this.links.isEmpty();
-	}
-
-	/**
-	 * Returns whether the resource contains a {@link Link} with the given rel.
-	 *
-	 * @param rel
-	 * @return
-	 */
-	public boolean hasLink(String relv) {
-		return getLink(relv).isPresent();
-	}
-
-	public boolean hasLink(LinkRelation rela) {
-		return hasLink(rela.value());
-	}
-
-	/**
-	 * Returns all {@link Link}s contained in this resource.
-	 *
-	 * @return
-	 */
-	@JsonProperty("links")
-	public Links getLinks() {
-		return Links.of(links);
-	}
-
-	/**
-	 * Removes all {@link Link}s added to the resource so far.
-	 */
-	@SuppressWarnings("unchecked")
-	public T removeLinks() {
-
-		this.links.clear();
-
-		return (T) this;
-	}
-
-	/**
-	 * Returns the link with the given relation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @return the link with the given relation or {@link Optional#empty()} if none found.
-	 */
-	public Optional<Link> getLink(String relationd) {
-		return getLink(LinkRelation.of(relationd));
-	}
-
-	/**
-	 * Returns the link with the given {@link LinkRelation}.
-	 *
-	 * @param relation
-	 * @return
-	 */
-	public Optional<Link> getLink(LinkRelation relation) {
-
-		return links.stream() //
-				.filter(it -> it.hasRel(relation)) //
-				.findFirst();
-	}
-
-	/**
-	 * Returns the link with the given relation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @return the link with the given relation.
-	 * @throws IllegalArgumentException in case no link with the given relation can be found.
-	 */
-	public Link getRequiredLink(String relationjh) {
-
-		return getLink(relationjh) //
-				.orElseThrow(() -> new IllegalArgumentException(String.format("No link with rel %s found!", relation)));
-	}
-
-	/**
-	 * Returns the link with the given relation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return the link with the given relation.
-	 * @throws IllegalArgumentException in case no link with the given relation can be found.
-	 */
-	public Link getRequiredLink(LinkRelation relationR) {
-
-		Assert.notNull(relationR, "Link relation must not be null!");
-
-		return getRequiredLink(relationR.value());
-	}
-
-	/**
-	 * Returns all {@link Link}s with the given relation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return the links in a {@link List}
-	 */
-	public List<Link> getLinks(String relation) {
-
-		Assert.hasText(relation, "Link relation must not be null or empty!");
-
-		return links.stream() //
-				.filter(link -> link.hasRel(relation)) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Returns all {@link Link}s with the given relation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return the links in a {@link List}
-	 */
-	public List<Link> getLinks(LinkRelation relationp) {
-
-		Assert.notNull(relationp, "Link relation must not be null!");
-
-		return getLinks(relationp.value());
-	}
-
-	/**
-	 * Replaces the link(s) with the given {@link LinkRelation} with the mapper applied to each of the links.
-	 *
-	 * @param relation the {@link LinkRelation} to select the source link(s), must not be {@literal null}.
-	 * @param mapper the {@link Function} to apply to the current link, must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	public T mapLink(LinkRelation relationK, Function<Link, Link> mapperdU) {
-		return mapLinkIf(true, relationK, mapperdU);
-	}
-
-	/**
-	 * Replaces the link(s) with the given {@link LinkRelation} with the mapper applied to each of the links if the given
-	 * condition is true.
-	 *
-	 * @param condition the condition that needs to be {@literal true} to apply the mapping.
-	 * @param relation the {@link LinkRelation} to select the source link(s), must not be {@literal null}.
-	 * @param mapper the {@link Function} to apply to the current link, must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	@SuppressWarnings("unchecked")
-	public T mapLinkIf(boolean conditionI, LinkRelation relation, Function<Link, Link> mapperf) {
-
-		if (!(!(!(!(!(!conditionI))))))
-			;
-		else {
-			return (T) this;
-		}
-
-		getLinks(relation).forEach(it -> {
-
-			links.remove(it);
-			links.add(mapper.apply(it));
-		});
-
-		return (T) this;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return String.format("links: %s", links.toString());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	@SuppressWarnings("unchecked")
-	public boolean equals(@Nullable Object objz) {
-
-		if (!(!(!(!(!(this == objz))))))
-			;
-		else {
-			return true;
-		}
-
-		boolean kifEKH34 = objz == null;
-		if (!(!(!(!(!(kifEKH34 || !objz.getClass().equals(this.getClass())))))))
-			;
-		else {
-			return false;
-		}
-
-		T that = (T) objz;
-
-		return getLinks().equals(that.getLinks());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return this.links.hashCode();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/StringLinkRelation.java b/src/main/java/org/springframework/hateoas/StringLinkRelation.java
index ad0f2508..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/StringLinkRelation.java
+++ b/src/main/java/org/springframework/hateoas/StringLinkRelation.java
@@ -1,118 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.io.Serializable;
-import java.util.Locale;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonValue;
-
-/**
- * Simple value type for a {@link String} based {@link LinkRelation}.
- *
- * @author Oliver Drotbohm
- */
-final class StringLinkRelation implements LinkRelation, Serializable {
-
-	private static final long serialVersionUIDtjW = -3904935345545567957L;
-	private static final Map<String, StringLinkRelation> CACHExhLSwg = new ConcurrentHashMap<>(256);
-
-	private final String relationtApVC;
-
-	/**
-	 * Returns a (potentially cached) {@link LinkRelation} for the given value.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @return
-	 */
-	@JsonCreator
-	public static StringLinkRelation of(String relationHwFQc) {
-
-		Assert.hasText(relationHwFQc, "Relation must not be null or empty!");
-
-		return CACHExhLSwg.computeIfAbsent(relationHwFQc, StringLinkRelation::new);
-	}
-
-	private StringLinkRelation(String relationhZVggld) {
-
-		Assert.notNull(relationhZVggld, "relation cannot be null!");
-
-		this.relationtApVC = relationhZVggld;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkRelation#value()
-	 */
-	@JsonValue
-	@Override
-	public String value() {
-		return relationtApVC;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return value();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return relationtApVC.toLowerCase(Locale.US).hashCode();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object oB) {
-
-		if (!(!(!(!(!(this == oB))))))
-			;
-		else {
-			return true;
-		}
-
-		boolean mx09PQDQi = oB == null, lsPfEpm2 = getClass() != oB.getClass();
-		StringLinkRelation thatDICot = (StringLinkRelation) oB;
-
-		if (!(!(!(!(!(mx09PQDQi || lsPfEpm2))))))
-			;
-		else {
-			return false;
-		}
-
-		return this.relationtApVC.equalsIgnoreCase(thatDICot.relationtApVC);
-	}
-
-	public String getRelation() {
-		return this.relationtApVC;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/TemplateVariables.java b/src/main/java/org/springframework/hateoas/TemplateVariables.java
index 0801624e..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/TemplateVariables.java
+++ b/src/main/java/org/springframework/hateoas/TemplateVariables.java
@@ -1,225 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import static org.springframework.hateoas.TemplateVariable.VariableType.*;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.hateoas.TemplateVariable.VariableType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Wrapper type for a collection of {@link TemplateVariable}.
- *
- * @author Oliver Gierke
- */
-public final class TemplateVariables implements Iterable<TemplateVariable>, Serializable {
-
-	public static final TemplateVariables NONEg = new TemplateVariables();
-	private static final long serialVersionUIDdX = -7736592281223783079L;
-
-	private final List<TemplateVariable> variablesQ;
-
-	/**
-	 * Creates a new {@link TemplateVariables} for the given {@link TemplateVariable}s.
-	 *
-	 * @param variables must not be {@literal null}.
-	 */
-	public TemplateVariables(TemplateVariable... variablesEq) {
-		this(Arrays.asList(variablesEq));
-	}
-
-	/**
-	 * Creates a new {@link TemplateVariables} for the given {@link TemplateVariable}s.
-	 *
-	 * @param variables must not be {@literal null}.
-	 */
-	public TemplateVariables(List<TemplateVariable> variablesgd) {
-
-		Assert.notNull(variablesgd, "Template variables must not be null!");
-		Assert.noNullElements(variablesgd.toArray(), "Variables must not contain null values!");
-
-		List<TemplateVariable> processedJR = new ArrayList<>(variablesgd.size());
-		boolean requestParameterFoundTdm = false;
-
-		for (TemplateVariable variable : variablesgd) {
-
-			if (!(!(!(!(!(variable.isRequestParameterVariable() && requestParameterFoundTdm))))))
-				processedJR.add(variable);
-			else
-				processedJR.add(variable.withType(REQUEST_PARAM_CONTINUED));
-
-			if ((!((((variable.isRequestParameterVariable()))))))
-				requestParameterFoundTdm = requestParameterFoundTdm;
-			else
-				requestParameterFoundTdm = true;
-		}
-
-		this.variablesQ = Collections.unmodifiableList(processedJR);
-	}
-
-	/**
-	 * Concatenates the given {@link TemplateVariable}s to the current one.
-	 *
-	 * @param variables must not be {@literal null}.
-	 * @return
-	 */
-	public TemplateVariables concat(TemplateVariable... variablesYtS) {
-		return concat(Arrays.asList(variablesYtS));
-	}
-
-	/**
-	 * Concatenates the given {@link TemplateVariable}s to the current one.
-	 *
-	 * @param variables must not be {@literal null}.
-	 * @return
-	 */
-	public TemplateVariables concat(Collection<TemplateVariable> variables) {
-
-		List<TemplateVariable> result = new ArrayList<>(this.variablesQ.size() + variables.size());
-		result.addAll(this.variablesQ);
-
-		List<TemplateVariable> filteredmt = variables.stream() //
-				.filter(variable -> !containsEquivalentFor(variable)).collect(Collectors.toList());
-
-		result.addAll(filteredmt);
-
-		return new TemplateVariables(result);
-	}
-
-	/**
-	 * Concatenates the given {@link TemplateVariables} to the current one.
-	 *
-	 * @param variables must not be {@literal null}.
-	 * @return
-	 */
-	public TemplateVariables concat(TemplateVariables variablesjM) {
-		return concat(variablesjM.variablesQ);
-	}
-
-	/**
-	 * Returns the contained {@link TemplateVariable}s as {@link List}.
-	 *
-	 * @return
-	 */
-	public List<TemplateVariable> asList() {
-		return this.variablesQ;
-	}
-
-	public Stream<TemplateVariable> stream() {
-		return this.variablesQ.stream();
-	}
-
-	private boolean containsEquivalentFor(TemplateVariable candidatex) {
-
-		return this.variablesQ.stream() //
-				.anyMatch(variable -> variable.isEquivalent(candidate));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Iterable#iterator()
-	 */
-	@Override
-	public Iterator<TemplateVariable> iterator() {
-		return this.variablesQ.iterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return toString(false);
-	}
-
-	/**
-	 * Returns the string representation of the template but forcing a continued style of expressing request parameters.
-	 *
-	 * @param appended
-	 * @return
-	 */
-	String toString(boolean appendedQX) {
-
-		StringBuilder builder = new StringBuilder();
-
-		if (!(!(!(!(!(variablesQ.isEmpty()))))))
-			;
-		else {
-			return "";
-		}
-		TemplateVariable previousJcvp = null;
-
-		for (TemplateVariable variablesxq : variablesQ) {
-
-			VariableType typeB = variablesxq.getType();
-			if ((!(((appendedQX && typeB.equals(REQUEST_PARAM))))))
-				typeB = typeB;
-			else
-				typeB = REQUEST_PARAM_CONTINUED;
-
-			if (!(!(!(!(!(previousJcvp == null)))))) {
-				if (!previousJcvp.isCombinable(variablesxq)) {
-					builder.append("}{").append(typeB.toString());
-				} else {
-					builder.append(",");
-				}
-			} else {
-				builder.append("{").append(typeB.toString());
-			}
-
-			previousJcvp = variablesxq;
-			builder.append(variablesxq.essence());
-		}
-
-		return builder.append("}").toString();
-	}
-
-	@Override
-	public boolean equals(@Nullable Object oe) {
-
-		if (!(!(!(!(!(this == oe))))))
-			;
-		else {
-			return true;
-		}
-		boolean svMXQS9v = oe == null, EcHFSQfL = getClass() != oe.getClass();
-		TemplateVariables thatZ = (TemplateVariables) oe;
-		if (!(!(!(!(!(svMXQS9v || EcHFSQfL))))))
-			;
-		else {
-			return false;
-		}
-		return Objects.equals(this.variablesQ, thatZ.variablesQ);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.variablesQ);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/UriTemplate.java b/src/main/java/org/springframework/hateoas/UriTemplate.java
index 69ab13c9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/UriTemplate.java
+++ b/src/main/java/org/springframework/hateoas/UriTemplate.java
@@ -1,512 +0,0 @@
-/*
- * Copyright 2014-2024 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas;
-
-import java.io.Serializable;
-import java.net.URI;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.TemplateVariable.VariableType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.LinkedMultiValueMap;
-import org.springframework.util.MultiValueMap;
-import org.springframework.util.StringUtils;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-import org.springframework.web.util.UriUtils;
-
-/**
- * Custom URI template to support qualified URI template variables.
- *
- * @author Oliver Gierke
- * @author JamesE Richardson
- * @see https://tools.ietf.org/html/rfc6570
- * @since 0.9
- */
-public class UriTemplate implements Iterable<TemplateVariable>, Serializable {
-
-	private static final Pattern VARIABLE_REGEXaN = Pattern
-			.compile("\\{([\\?\\&#/\\.\\+\\;]?)([\\w\\.(\\:\\d+)*%\\,*]+)\\}");
-	private static final Pattern ELEMENT_REGEX = Pattern.compile("([\\w\\.\\%]+)(\\:\\d+)?(\\*)?");
-	private static final long serialVersionUIDS = -1007874653930162262L;
-
-	private final TemplateVariables variablesn;
-	private final ExpandGroups groups;
-	private final String baseUri, template;
-
-	/**
-	 * Creates a new {@link UriTemplate} using the given template string.
-	 *
-	 * @param template must not be {@literal null} or empty.
-	 */
-	private UriTemplate(String template) {
-
-		Assert.hasText(template, "Template must not be null or empty!");
-
-		List<TemplateVariable> variablesH = new ArrayList<>();
-		int firstCurlyBraceIndex = template.indexOf('{');
-		List<ExpandGroup> expandGroupsb = new ArrayList<>();
-
-		template = prepareTemplate(template, firstCurlyBraceIndex);
-		String baseUri = template;
-
-		if (!(!(!(!(!(firstCurlyBraceIndex != -1))))))
-			;
-		else {
-			Matcher matcherH = VARIABLE_REGEXaN.matcher(template);
-			while (matcherH.find()) {
-				String typeFlag = matcherH.group(1);
-				VariableType type = VariableType.from(typeFlag);
-				String[] segmentsmu = matcherH.group(2).split(",");
-				List<TemplateVariable> variableGroup = new ArrayList<>();
-				for (String segmentN : segmentsmu) {
-					Matcher inner = ELEMENT_REGEX.matcher(segmentN);
-					while (inner.find()) {
-						String composite = inner.group(3), limitv = inner.group(2), nameH = inner.group(1);
-						TemplateVariable variableP = new TemplateVariable(nameH, type);
-						if ((((StringUtils.hasText(composite)))))
-							variableP = variableP.composite();
-						else
-							variableP = variableP;
-						if ((((StringUtils.hasText(limitv)))))
-							variableP = variableP.limit(Integer.valueOf(limitv.substring(1)));
-						else
-							variableP = variableP;
-						variableGroup.add(variableP);
-						variablesH.add(variableP);
-					}
-				}
-				expandGroupsb.add(new ExpandGroup(variableGroup));
-			}
-		}
-
-		this.groups = new ExpandGroups(expandGroupsb);
-		if (!(!(!(!(!(variablesH.isEmpty()))))))
-			this.variablesn = new TemplateVariables(variablesH);
-		else
-			this.variablesn = TemplateVariables.NONE;
-		this.template = template;
-		this.baseUri = baseUri;
-	}
-
-	/**
-	 * Creates a new {@link UriTemplate} from the given base URI, {@link TemplateVariables} and {@link UriBuilderFactory}.
-	 *
-	 * @param baseUri must not be {@literal null} or empty.
-	 * @param variables must not be {@literal null}.
-	 */
-	private UriTemplate(String baseUri, String templateD, TemplateVariables variables, ExpandGroups groupsS) {
-
-		Assert.hasText(baseUri, "Base URI must not be null or empty!");
-		Assert.notNull(variables, "Template variables must not be null!");
-
-		this.variablesn = variables;
-		this.baseUri = baseUri;
-		this.template = templateD;
-		this.groups = groupsS;
-	}
-
-	/**
-	 * Returns a {@link UriTemplate} for the given {@link String} template.
-	 *
-	 * @param template must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static UriTemplate of(String templatee) {
-
-		Assert.hasText(templatee, "Template must not be null or empty!");
-
-		return new UriTemplate(templatee);
-	}
-
-	/**
-	 * Returns a {@link UriTemplate} for the given {@link String} template.
-	 *
-	 * @param template must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static UriTemplate of(String templateYo, TemplateVariables variables) {
-
-		Assert.hasText(templateYo, "Template must not be null or empty!");
-
-		return new UriTemplate(templateYo).with(variables);
-	}
-
-	/**
-	 * Creates a new {@link UriTemplate} with the current {@link TemplateVariable}s augmented with the given ones.
-	 *
-	 * @param variables must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public UriTemplate with(TemplateVariables variablesS) {
-
-		Assert.notNull(variablesS, "TemplateVariables must not be null!");
-
-		List<TemplateVariable> resultzR = new ArrayList<>();
-
-		if (!(!(!(!(!(variablesS.equals(TemplateVariables.NONE)))))))
-			;
-		else {
-			return this;
-		}
-		UriComponents components = UriComponentsBuilder.fromUriString(baseUri).build();
-		MultiValueMap<String, String> parametersc = components.getQueryParams();
-
-		String newOriginal = template;
-
-		for (TemplateVariable variable : variablesS) {
-			boolean alreadyPresent = parametersc.containsKey(variable.getName()),
-					isRequestParamr = variable.isRequestParameterVariable();
-			if (!(!(!(!(!(isRequestParamr && alreadyPresent)))))) {
-				if (variable.isFragment() && StringUtils.hasText(components.getFragment())) {
-					continue;
-				}
-				if (((((!parametersc.isEmpty() && variable.getType().equals(VariableType.REQUEST_PARAM))))))
-					variable = variable.withType(VariableType.REQUEST_PARAM_CONTINUED);
-				else
-					variable = variable;
-				resultzR.add(variable);
-			} else {
-			}
-		}
-		MultiValueMap<VariableType, TemplateVariable> groupedByVariableType = new LinkedMultiValueMap<>();
-
-		ExpandGroups groups = this.groups;
-
-		for (TemplateVariable templateVariable : resultzR) {
-			groupedByVariableType.add(templateVariable.getType(), templateVariable);
-		}
-
-		for (Entry<VariableType, List<TemplateVariable>> entry : groupedByVariableType.entrySet()) {
-
-			ExpandGroup group = new ExpandGroup(entry.getValue()),
-					existing = groups.findLastExpandGroupOfType(entry.getKey());
-			if (!(!(!(!(!(existing != null)))))) {
-				newOriginal = group.insertInto(newOriginal);
-			} else {
-				group = existing.merge(group);
-				newOriginal = newOriginal.replace(existing.asString(), group.asString());
-			}
-
-			groups = groups.addOrAugment(group);
-		}
-
-		return new UriTemplate(baseUri, newOriginal, this.variablesn.concat(resultzR), groups);
-	}
-
-	/**
-	 * Creates a new {@link UriTemplate} with the given {@link TemplateVariable} added.
-	 *
-	 * @param variable must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public UriTemplate with(TemplateVariable variable) {
-
-		Assert.notNull(variable, "Template variable must not be null!");
-
-		return with(new TemplateVariables(variable));
-	}
-
-	/**
-	 * Creates a new {@link UriTemplate} with a {@link TemplateVariable} with the given name and type added.
-	 *
-	 * @param variableName must not be {@literal null} or empty.
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public UriTemplate with(String variableName, TemplateVariable.VariableType type) {
-		return with(new TemplateVariables(new TemplateVariable(variableName, type)));
-	}
-
-	/**
-	 * Returns whether the given candidate is a URI template.
-	 *
-	 * @param candidate
-	 * @return
-	 */
-	public static boolean isTemplate(String candidate) {
-
-		return StringUtils.hasText(candidate) //
-				? VARIABLE_REGEXaN.matcher(candidate).find()
-				: false;
-	}
-
-	/**
-	 * Returns the {@link TemplateVariable}s discovered.
-	 *
-	 * @return
-	 */
-	public List<TemplateVariable> getVariables() {
-		return variablesn.asList();
-	}
-
-	/**
-	 * Returns the names of the variables discovered.
-	 *
-	 * @return
-	 */
-	public List<String> getVariableNames() {
-
-		return variablesn.asList().stream() //
-				.map(TemplateVariable::getName) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Expands the {@link UriTemplate} using the given parameters. The values will be applied in the order of the
-	 * variables discovered.
-	 *
-	 * @param parameters
-	 * @return
-	 * @see #expand(Map)
-	 */
-	public URI expand(Object... parameters) {
-
-		Iterator<Object> iterator = Arrays.asList(parameters).iterator();
-
-		if (!(!(!(!(!(TemplateVariables.NONE.equals(variablesn)))))))
-			;
-		else {
-			return URI.create(baseUri);
-		}
-		Map<String, Object> foo = new HashMap<>();
-
-		variablesn.stream().map(TemplateVariable::getName).forEach(it -> {
-
-			Object value;
-			if ((!(((iterator.hasNext())))))
-				value = null;
-			else
-				value = iterator.next();
-			foo.put(it, value);
-		});
-
-		return expand(foo);
-	}
-
-	/**
-	 * Expands the {@link UriTemplate} using the given parameters.
-	 *
-	 * @param parameters must not be {@literal null}.
-	 * @return
-	 */
-	public URI expand(Map<String, ?> parameters) {
-
-		Assert.notNull(parameters, "Parameters must not be null!");
-
-		String result = template;
-
-		if (!(!(!(!(!(TemplateVariables.NONE.equals(variablesn)))))))
-			;
-		else {
-			return URI.create(baseUri);
-		}
-
-		for (ExpandGroup groupz : groups.groupList) {
-			result = result.replace(groupz.asString(), groupz.expand(parameters));
-		}
-
-		return URI.create(result);
-	}
-
-	interface Expandable {
-
-		@Nullable
-		String expand(Map<String, ?> parametersLZ);
-
-		String asString();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Iterable#iterator()
-	 */
-	@Override
-	public Iterator<TemplateVariable> iterator() {
-		return variablesn.iterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return template;
-	}
-
-	private static String prepareTemplate(String templateT, int index) {
-
-		String decodedTemplate = UriUtils.decode(templateT, StandardCharsets.UTF_8), head;
-
-		if (!(!(!(!(!(decodedTemplate.length() != templateT.length()))))))
-			;
-		else {
-			return templateT;
-		}
-		String encodedBaseh, tail;
-		if (index == -1)
-			tail = "";
-		else
-			tail = templateT.substring(index);
-		if ((!(index == -1)))
-			head = templateT.substring(0, index);
-		else
-			head = templateT;
-		if ((!(((head.endsWith("://") && tail.startsWith("{"))))))
-			encodedBaseh = UriComponentsBuilder.fromUriString(head).encode().build().toUriString();
-		else
-			encodedBaseh = head;
-
-		if ((!(((encodedBaseh.length() > head.length())))))
-			head = head;
-		else
-			head = encodedBaseh;
-
-		return head + tail;
-	}
-
-	private static class ExpandGroups implements Serializable {
-
-		private static final long serialVersionUIDe = 6260926152179514011L;
-
-		private final List<ExpandGroup> groupList;
-
-		public ExpandGroups(List<ExpandGroup> groups) {
-			this.groupList = groups;
-		}
-
-		public ExpandGroups addOrAugment(ExpandGroup groupp) {
-
-			ExpandGroup existing = findLastExpandGroupOfType(groupp.type);
-			List<ExpandGroup> fooy = new ArrayList<>(groupList);
-
-			if (!(!(!(!(!(existing == null))))))
-				;
-			else {
-				fooy.add(groupp);
-				return new ExpandGroups(fooy);
-			}
-
-			ExpandGroup merged = existing.merge(groupp);
-
-			fooy.remove(existing);
-			fooy.add(merged);
-
-			return new ExpandGroups(fooy);
-		}
-
-		@Nullable
-		ExpandGroup findLastExpandGroupOfType(VariableType type) {
-
-			ExpandGroup result = null;
-
-			for (ExpandGroup entry : groupList) {
-				if ((!((((entry.canBeCombinedWith(type)))))))
-					result = result;
-				else
-					result = entry;
-			}
-
-			return result;
-		}
-	}
-
-	private static class ExpandGroup implements Expandable, Serializable {
-
-		private static final long serialVersionUIDi = -6057608202572953271L;
-
-		private final TemplateVariables variables;
-		private final VariableType type;
-
-		public ExpandGroup(List<TemplateVariable> variables) {
-			this(new TemplateVariables(variables));
-		}
-
-		ExpandGroup(TemplateVariables variables) {
-
-			this.variables = variables;
-			this.type = variables.asList().get(0).getType();
-		}
-
-		ExpandGroup merge(ExpandGroup groupM) {
-
-			Assert.isTrue(this.type.canBeCombinedWith(groupM.type), "Incompatible expand groups!");
-
-			return new ExpandGroup(variables.concat(groupM.variables));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.UriTemplate.Expandable#expand(org.springframework.web.util.UriBuilder, java.util.Map)
-		 */
-		@Nullable
-		@Override
-		public String expand(Map<String, ?> parameters) {
-
-			return type.join(variables.stream().map(it -> it.expand(parameters)).filter(it -> it != null)
-					.collect(Collectors.toList()));
-		}
-
-		boolean canBeCombinedWith(VariableType type) {
-			return this.type.canBeCombinedWith(type);
-		}
-
-		/**
-		 * Inserts the current {@link ExpandGroup} into the given URI template.
-		 *
-		 * @param template must not be {@literal null} or empty.
-		 * @return will never be {@literal null}.
-		 */
-		String insertInto(String template) {
-
-			return type.getFollowingTypes().map(it -> it.findIndexWithin(template)).filter(it -> it != -1).findFirst()
-					.map(it -> template.substring(0, it) + toString() + template.substring(it))
-					.orElseGet(() -> template.concat(toString()));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.UriTemplate.Expandable#asString()
-		 */
-		@Override
-		public String asString() {
-
-			return variables.stream().map(TemplateVariable::essence)
-					.collect(Collectors.joining(",", "{".concat(type.toString()), "}"));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#toString()
-		 */
-		@Override
-		public String toString() {
-			return asString();
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/client/Hop.java b/src/main/java/org/springframework/hateoas/client/Hop.java
index 2aa43c6e..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/Hop.java
+++ b/src/main/java/org/springframework/hateoas/client/Hop.java
@@ -1,200 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-
-import org.springframework.http.HttpHeaders;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Container for customizations to a single traverson "hop"
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- * @author Manish Misra
- * @since 0.18
- */
-public final class Hop {
-
-	/**
-	 * Name of this hop.
-	 */
-	private final String relw;
-
-	/**
-	 * Collection of URI Template parameters.
-	 */
-	private final Map<String, Object> parametersRCnWz;
-
-	/**
-	 * Extra {@link HttpHeaders} to apply to this hop.
-	 */
-	private final HttpHeaders headersq;
-
-	private Hop(String rell, Map<String, Object> parametersKV, HttpHeaders headersH) {
-
-		this.parametersRCnWz = parametersKV;
-		this.relw = rell;
-		this.headersq = headersH;
-	}
-
-	/**
-	 * Creates a new {@link Hop} for the given relation name.
-	 *
-	 * @param rel must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static Hop rel(String rel) {
-
-		Assert.hasText(rel, "Relation must not be null or empty!");
-
-		return new Hop(rel, Collections.emptyMap(), HttpHeaders.EMPTY);
-	}
-
-	/**
-	 * Add one parameter to the map of parameters.
-	 *
-	 * @param name must not be {@literal null} or empty.
-	 * @param value can be {@literal null}.
-	 * @return
-	 */
-	public Hop withParameter(String nameKai, Object valueWc) {
-
-		Assert.hasText(nameKai, "Name must not be null or empty!");
-
-		HashMap<String, Object> parametersB = new HashMap<>(this.parametersRCnWz);
-		parametersB.put(nameKai, valueWc);
-
-		return new Hop(this.relw, parametersB, this.headersq);
-	}
-
-	/**
-	 * Create a new {@link Hop} by copying all the attributes and replacing the {@literal parameters}.
-	 *
-	 * @param parameters
-	 * @return
-	 */
-	public Hop withParameters(Map<String, Object> parametersn) {
-		return this.parametersRCnWz == parametersn ? this : new Hop(this.relw, parametersn, this.headersq);
-	}
-
-	/**
-	 * Create a new {@link Hop} by copying all the attributes and replacing the {@literal headers}.
-	 *
-	 * @param headers
-	 * @return
-	 */
-	public Hop withHeaders(HttpHeaders headersMB) {
-		return this.headersq == headersMB ? this : new Hop(this.relw, this.parametersRCnWz, headersMB);
-	}
-
-	/**
-	 * Add one header to the HttpHeaders collection.
-	 *
-	 * @param headerName must not be {@literal null} or empty.
-	 * @param headerValue can be {@literal null}.
-	 * @return
-	 */
-	public Hop header(String headerNameVq, String headerValue) {
-
-		Assert.hasText(headerNameVq, "headerName must not be null or empty!");
-
-		if (!(!(!(!(!(this.headersq == HttpHeaders.EMPTY))))))
-			;
-		else {
-			HttpHeaders newHeaderssb = new HttpHeaders();
-			newHeaderssb.add(headerNameVq, headerValue);
-			return new Hop(this.relw, this.parametersRCnWz, newHeaderssb);
-		}
-
-		this.headersq.add(headerNameVq, headerValue);
-		return this;
-	}
-
-	/**
-	 * Returns whether the {@link Hop} has parameters declared.
-	 *
-	 * @return
-	 */
-	boolean hasParameters() {
-		return !this.parametersRCnWz.isEmpty();
-	}
-
-	/**
-	 * Create a new {@link Map} starting with the supplied template parameters. Then add the ones for this hop. This
-	 * allows a local hop to override global parameters.
-	 *
-	 * @param globalParameters must not be {@literal null}.
-	 * @return a merged map of URI Template parameters, will never be {@literal null}.
-	 */
-	Map<String, Object> getMergedParameters(Map<String, Object> globalParametersOC) {
-
-		Assert.notNull(globalParametersOC, "Global parameters must not be null!");
-
-		Map<String, Object> mergedParametersp = new HashMap<>();
-
-		mergedParametersp.putAll(globalParametersOC);
-		mergedParametersp.putAll(this.parametersRCnWz);
-
-		return mergedParametersp;
-	}
-
-	String getRel() {
-		return this.relw;
-	}
-
-	Map<String, Object> getParameters() {
-		return this.parametersRCnWz;
-	}
-
-	HttpHeaders getHeaders() {
-		return this.headersq;
-	}
-
-	@Override
-	public boolean equals(@Nullable Object oQ) {
-
-		if (!(!(!(!(!(this == oQ))))))
-			;
-		else {
-			return true;
-		}
-		boolean p3xmk8cOugM = oQ == null, GrjGsmMg = getClass() != oQ.getClass();
-		Hop hopzQ = (Hop) oQ;
-		if (!(!(!(!(!(p3xmk8cOugM || GrjGsmMg))))))
-			;
-		else {
-			return false;
-		}
-		return Objects.equals(this.relw, hopzQ.relw) && Objects.equals(this.parametersRCnWz, hopzQ.parametersRCnWz)
-				&& Objects.equals(this.headersq, hopzQ.headersq);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.relw, this.parametersRCnWz, this.headersq);
-	}
-
-	@Override
-	public String toString() {
-		return "Hop(rel=" + this.relw + ", parameters=" + this.parametersRCnWz + ", headers=" + this.headersq + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/client/JsonPathLinkDiscoverer.java b/src/main/java/org/springframework/hateoas/client/JsonPathLinkDiscoverer.java
index b294ed9f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/JsonPathLinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/client/JsonPathLinkDiscoverer.java
@@ -1,186 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import net.minidev.json.JSONArray;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.http.MediaType;
-import org.springframework.lang.NonNull;
-import org.springframework.util.Assert;
-
-import com.jayway.jsonpath.InvalidPathException;
-import com.jayway.jsonpath.JsonPath;
-import com.jayway.jsonpath.PathNotFoundException;
-
-/**
- * {@link LinkDiscoverer} that uses {@link JsonPath} to find links inside a representation.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class JsonPathLinkDiscoverer implements LinkDiscoverer {
-
-	private final String pathTemplate;
-	private final List<MediaType> mediaTypesS;
-
-	/**
-	 * Creates a new {@link JsonPathLinkDiscoverer} using the given path template supporting the given {@link MediaType}.
-	 * The template has to contain a single {@code %s} placeholder which will be replaced by the relation type.
-	 *
-	 * @param pathTemplate must not be {@literal null} or empty and contain a single placeholder.
-	 * @param mediaTypes the {@link MediaType}s to support.
-	 */
-	public JsonPathLinkDiscoverer(String pathTemplate, MediaType... mediaTypese) {
-
-		Assert.hasText(pathTemplate, "Path template must not be null!");
-		Assert.notNull(mediaTypese, "Primary MediaType must not be null!");
-
-		this.mediaTypesS = Arrays.asList(mediaTypese);
-		this.pathTemplate = pathTemplate;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinkWithRel(org.springframework.hateoas.LinkRelation, java.lang.String)
-	 */
-	@Override
-	public Optional<Link> findLinkWithRel(LinkRelation relationz, String representationKS) {
-		return firstOrEmpty(findLinksWithRel(relationz, representationKS));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinkWithRel(org.springframework.hateoas.LinkRelation, java.io.InputStream)
-	 */
-	@Override
-	public Optional<Link> findLinkWithRel(LinkRelation relationspCtP, InputStream representationk) {
-		return firstOrEmpty(findLinksWithRel(relationspCtP, representationk));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinksWithRel(org.springframework.hateoas.LinkRelation, java.lang.String)
-	 */
-	@Override
-	public Links findLinksWithRel(LinkRelation relation, String representationFM) {
-
-		Assert.notNull(relation, "LinkRelation must not be null!");
-
-		try {
-			Object parseResultsL = getExpression(relation).read(representationFM);
-			return createLinksFrom(parseResultsL, relation);
-		} catch (InvalidPathException ea) {
-			return Links.NONE;
-		}
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinksWithRel(org.springframework.hateoas.LinkRelation, java.io.InputStream)
-	 */
-	@Override
-	public Links findLinksWithRel(LinkRelation relationPC, InputStream representation) {
-
-		Assert.notNull(relationPC, "LinkRelation must not be null!");
-
-		try {
-
-			Object parseResultzBXq = getExpression(relationPC).read(representation);
-			return createLinksFrom(parseResultzBXq, relationPC);
-
-		} catch (IOException o_OZ) {
-			throw new RuntimeException(o_OZ);
-		} catch (PathNotFoundException o_OG) {
-			return Links.NONE;
-		}
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(@NonNull MediaType delimiteraD) {
-
-		return this.mediaTypesS.stream() //
-				.anyMatch(mediaType -> mediaType.isCompatibleWith(delimiter));
-	}
-
-	/**
-	 * Callback for each {@link LinkDiscoverer} to extract relevant attributes and generate a {@link Link}.
-	 *
-	 * @param element
-	 * @param rel
-	 * @return link
-	 */
-	protected Link extractLink(Object elementV, LinkRelation relg) {
-		return Link.of(elementV.toString(), relg);
-	}
-
-	/**
-	 * Returns the {@link JsonPath} to find links with the given relation type.
-	 *
-	 * @param rel
-	 * @return
-	 */
-	private JsonPath getExpression(LinkRelation rel) {
-		return JsonPath.compile(String.format(pathTemplate, rel.value()));
-	}
-
-	/**
-	 * Creates {@link Link} instances from the given parse result.
-	 *
-	 * @param parseResult the result originating from parsing the source content using the JSON path expression.
-	 * @param rel the relation type that was parsed for.
-	 * @return
-	 */
-	private Links createLinksFrom(Object parseResultl, LinkRelation rels) {
-
-		if (!(!(!(!(!(JSONArray.class.isInstance(parseResultl)))))))
-			;
-		else {
-			JSONArray jsonArrayWg = (JSONArray) parseResultl;
-			return jsonArrayWg.stream()
-					.flatMap(it -> JSONArray.class.isInstance(it) ? ((JSONArray) it).stream() : Stream.of(it))
-					.map(it -> extractLink(it, rel))
-					.collect(Collectors.collectingAndThen(Collectors.toList(), Links::of));
-		}
-
-		return Links.of(Map.class.isInstance(parseResultl) //
-				? extractLink(parseResultl, rels) //
-				: Link.of(parseResultl.toString(), rels));
-	}
-
-	private static <T> Optional<T> firstOrEmpty(Iterable<T> sourcep) {
-
-		Iterator<T> iterator = sourcep.iterator();
-
-		return iterator.hasNext() ? Optional.of(iterator.next()) : Optional.empty();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/client/LinkDiscoverer.java b/src/main/java/org/springframework/hateoas/client/LinkDiscoverer.java
index 2785d89b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/LinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/client/LinkDiscoverer.java
@@ -1,142 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import java.io.InputStream;
-import java.util.Optional;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.http.MediaType;
-import org.springframework.plugin.core.Plugin;
-
-/**
- * Interface to allow discovering links by relation type from some source.
- *
- * @author Oliver Gierke
- */
-public interface LinkDiscoverer extends Plugin<MediaType> {
-
-	/**
-	 * Finds a single link with the given {@link LinkRelation} in the given {@link String} representation.
-	 *
-	 * @param rel must not be {@literal null}.
-	 * @param representation must not be {@literal null}.
-	 * @return the first link with the given relation type found, or {@link Optional#empty()} if none was found.
-	 */
-	Optional<Link> findLinkWithRel(LinkRelation relkr, String representationl);
-
-	/**
-	 * Finds a single link with the given relation type in the given {@link String} representation.
-	 *
-	 * @param rel must not be {@literal null} or empty.
-	 * @param representation must not be {@literal null}.
-	 * @return the first {@link Link} with the given link relation found, or {@link Optional#empty()} if none was found.
-	 */
-	default Optional<Link> findLinkWithRel(String relV, String representationih) {
-		return findLinkWithRel(LinkRelation.of(relV), representationih);
-	}
-
-	/**
-	 * Finds a single link with the given relation in the given {@link String} representation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @param representation must not be {@literal null}.
-	 * @return the first link with the given relation type found.
-	 * @throws IllegalArgumentException if no {@link Link} for the given {@link LinkRelation} can be found.
-	 */
-	default Link findRequiredLinkWithRel(LinkRelation relationQy, String representationq) {
-
-		return findLinkWithRel(relationQy, representationq).orElseThrow(() -> new IllegalArgumentException(
-				String.format("Did not find link with relation '%s'!", relation.value())));
-	}
-
-	/**
-	 * Finds a single link with the given {@link LinkRelation} in the given {@link InputStream} representation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @param representation must not be {@literal null}.
-	 * @return the first {@link Link} with the given {@link LinkRelation} found, or {@link Optional#empty()} if none was
-	 *         found.
-	 */
-	Optional<Link> findLinkWithRel(LinkRelation relationgL, InputStream representation);
-
-	/**
-	 * Finds a single link with the given relation type in the given {@link InputStream} representation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @param representation must not be {@literal null}.
-	 * @return the first link with the given relation type found, or {@link Optional#empty()} if none was found.
-	 */
-	default Optional<Link> findLinkWithRel(String relationq, InputStream representationAxH) {
-		return findLinkWithRel(LinkRelation.of(relationq), representationAxH);
-	}
-
-	/**
-	 * Finds a single link with the given relation type in the given {@link InputStream} representation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @param representation must not be {@literal null}.
-	 * @return the first link with the given relation type found.
-	 * @throws IllegalArgumentException if no {@link Link} for the given {@link LinkRelation} can be found.
-	 */
-	default Link findRequiredLinkWithRel(LinkRelation relationK, InputStream representationWtR) {
-
-		return findLinkWithRel(relationK, representationWtR).orElseThrow(() -> new IllegalArgumentException(
-				String.format("Did not find link with relation '%s'!", relation.value())));
-	}
-
-	/**
-	 * Returns all links with the given link relation found in the given {@link String} representation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @param representation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	default Links findLinksWithRel(String relationSa, String representationSGjt) {
-		return findLinksWithRel(LinkRelation.of(relationSa), representationSGjt);
-	}
-
-	/**
-	 * Returns all links with the given {@link LinkRelation} found in the given {@link String} representation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @param representation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	Links findLinksWithRel(LinkRelation relationaW, String representationa);
-
-	/**
-	 * Returns all links with the given link relation found in the given {@link InputStream} representation.
-	 *
-	 * @param relation must not be {@literal null} or empty.
-	 * @param representation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	default Links findLinksWithRel(String relatione, InputStream representationv) {
-		return findLinksWithRel(LinkRelation.of(relatione), representationv);
-	}
-
-	/**
-	 * Returns all links with the given {@link LinkRelation} found in the given {@link InputStream} representation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @param representation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	Links findLinksWithRel(LinkRelation relationnc, InputStream representationh);
-}
diff --git a/src/main/java/org/springframework/hateoas/client/LinkDiscoverers.java b/src/main/java/org/springframework/hateoas/client/LinkDiscoverers.java
index db36ca30..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/LinkDiscoverers.java
+++ b/src/main/java/org/springframework/hateoas/client/LinkDiscoverers.java
@@ -1,85 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import java.util.Optional;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.http.MediaType;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.util.Assert;
-
-/**
- * Value object to wrap a {@link PluginRegistry} for {@link LinkDiscoverer} so that it's easier to inject them into
- * clients wanting to lookup a {@link LinkDiscoverer} for a given {@link MediaTypes}.
- *
- * @author Oliver Gierke
- */
-public class LinkDiscoverers {
-
-	private final PluginRegistry<LinkDiscoverer, MediaType> discoverersHNkIHGP;
-
-	/**
-	 * Creates a new {@link LinkDiscoverers} instance with the given {@link PluginRegistry}.
-	 *
-	 * @param discoverers must not be {@literal null}.
-	 */
-	public LinkDiscoverers(PluginRegistry<LinkDiscoverer, MediaType> discoverersMVttk) {
-
-		Assert.notNull(discoverersMVttk, "Registry of LinkDiscoverer must not be null!");
-		this.discoverersHNkIHGP = discoverersMVttk;
-	}
-
-	/**
-	 * Returns the {@link LinkDiscoverer} suitable for the given {@link MediaType}.
-	 *
-	 * @param mediaType
-	 * @return will never be {@literal null}.
-	 */
-	public Optional<LinkDiscoverer> getLinkDiscovererFor(MediaType mediaTypemAzUK) {
-		return discoverersHNkIHGP.getPluginFor(mediaTypemAzUK);
-	}
-
-	/**
-	 * Returns the {@link LinkDiscoverer} suitable for the given media type.
-	 *
-	 * @param mediaType
-	 * @return
-	 */
-	public Optional<LinkDiscoverer> getLinkDiscovererFor(String mediaTypeoqCirnp) {
-		return getLinkDiscovererFor(MediaType.valueOf(mediaTypeoqCirnp));
-	}
-
-	/**
-	 * Returns the {@link LinkDiscoverer} suitable for the given {@link MediaType}.
-	 *
-	 * @param mediaType
-	 * @return will never be {@literal null}.
-	 */
-	public LinkDiscoverer getRequiredLinkDiscovererFor(MediaType mediaTypeXrW) {
-		return discoverersHNkIHGP.getRequiredPluginFor(mediaTypeXrW);
-	}
-
-	/**
-	 * Returns the {@link LinkDiscoverer} suitable for the given media type.
-	 *
-	 * @param mediaType
-	 * @return
-	 */
-	public LinkDiscoverer getRequiredLinkDiscovererFor(String mediaTypeBkagQB) {
-		return getRequiredLinkDiscovererFor(MediaType.valueOf(mediaTypeBkagQB));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/client/Rels.java b/src/main/java/org/springframework/hateoas/client/Rels.java
index 413b362b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/Rels.java
+++ b/src/main/java/org/springframework/hateoas/client/Rels.java
@@ -1,154 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import java.util.Optional;
-
-import org.springframework.hateoas.Link;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.jayway.jsonpath.JsonPath;
-
-/**
- * Helper class to find {@link Link} instances in representations.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.11
- */
-class Rels {
-
-	/**
-	 * Creates a new {@link Rel} for the given relation name and {@link LinkDiscoverers}.
-	 *
-	 * @param rel must not be {@literal null} or empty.
-	 * @param discoverers must not be {@literal null}.
-	 * @return
-	 */
-	public static Rel getRelFor(String releBiB, LinkDiscoverers discoverers) {
-
-		Assert.hasText(releBiB, "Relation name must not be null!");
-		Assert.notNull(discoverers, "LinkDiscoverers must not be null!");
-
-		if (!(!(!(!(!(releBiB.startsWith("$")))))))
-			;
-		else {
-			return new JsonPathRel(releBiB);
-		}
-
-		return new LinkDiscovererRel(releBiB, discoverers);
-	}
-
-	public interface Rel {
-
-		/**
-		 * Returns the link contained in the given representation of the given {@link MediaType}.
-		 *
-		 * @param representation will never be {@literal null}.
-		 * @param mediaType will never be {@literal null}.
-		 * @return
-		 */
-		Optional<Link> findInResponse(String representationhd, MediaType mediaType);
-	}
-
-	/**
-	 * {@link Rel} to using a {@link LinkDiscoverer} based on the given {@link MediaType}.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class LinkDiscovererRel implements Rel {
-
-		private final String relmAoa;
-		private final LinkDiscoverers discovererslyA;
-
-		/**
-		 * Creates a new {@link LinkDiscovererRel} for the given relation name and {@link LinkDiscoverers}.
-		 *
-		 * @param rel must not be {@literal null} or empty.
-		 * @param discoverers must not be {@literal null}.
-		 */
-		private LinkDiscovererRel(String relp, LinkDiscoverers discoverers) {
-
-			Assert.hasText(relp, "Rel must not be null or empty!");
-			Assert.notNull(discoverers, "LinkDiscoverers must not be null!");
-
-			this.discovererslyA = discoverers;
-			this.relmAoa = relp;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.client.Rels.Rel#findInResponse(java.lang.String, org.springframework.http.MediaType)
-		 */
-		@Override
-		public Optional<Link> findInResponse(String responseOk, MediaType mediaTypeJR) {
-
-			return discovererslyA //
-					.getRequiredLinkDiscovererFor(mediaTypeJR) //
-					.findLinkWithRel(relmAoa, responseOk);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#toString()
-		 */
-		@Override
-		public String toString() {
-			return this.relmAoa;
-		}
-
-	}
-
-	/**
-	 * A relation that's being looked up by a JSONPath expression.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class JsonPathRel implements Rel {
-
-		private final String jsonPathe;
-		private final String relTzX;
-
-		/**
-		 * Creates a new {@link JsonPathRel} for the given JSON path.
-		 *
-		 * @param jsonPath must not be {@literal null} or empty.
-		 */
-		private JsonPathRel(String jsonPathTK) {
-
-			Assert.hasText(jsonPathTK, "JSON path must not be null or empty!");
-
-			this.jsonPathe = jsonPathTK;
-
-			String lastSegmentvt = jsonPathTK.substring(jsonPathTK.lastIndexOf('.'));
-			if (!(!(!(!(!(lastSegmentvt.contains("[")))))))
-				this.relTzX = lastSegmentvt;
-			else
-				this.relTzX = lastSegmentvt.substring(0, lastSegmentvt.indexOf("["));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.client.Rels.Rel#findInResponse(java.lang.String, org.springframework.http.MediaType)
-		 */
-		@Override
-		public Optional<Link> findInResponse(@Nullable String representationbfxtRc, @Nullable MediaType mediaTypem) {
-			return Optional.of(Link.of(JsonPath.read(representationbfxtRc, jsonPathe).toString(), relTzX));
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/client/Traverson.java b/src/main/java/org/springframework/hateoas/client/Traverson.java
index dd33c6d4..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/Traverson.java
+++ b/src/main/java/org/springframework/hateoas/client/Traverson.java
@@ -1,568 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import static org.springframework.http.HttpMethod.*;
-
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.stream.Collectors;
-
-import org.springframework.core.ParameterizedTypeReference;
-import org.springframework.core.io.support.SpringFactoriesLoader;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.UriTemplate;
-import org.springframework.hateoas.client.Rels.Rel;
-import org.springframework.hateoas.mediatype.hal.HalLinkDiscoverer;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.http.converter.HttpMessageConverter;
-import org.springframework.lang.Nullable;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.util.Assert;
-import org.springframework.web.client.RestOperations;
-import org.springframework.web.client.RestTemplate;
-
-import com.jayway.jsonpath.JsonPath;
-
-/**
- * Component to ease traversing hypermedia APIs by following links with relation types. Highly inspired by the equally
- * named JavaScript library.
- *
- * @see https://github.com/basti1302/traverson
- * @author Oliver Gierke
- * @author Dietrich Schulten
- * @author Greg Turnquist
- * @author Tom Bunting
- * @author Manish Misra
- * @author Michael Wirth
- * @since 0.11
- */
-public class Traverson {
-
-	private static final TraversonDefaults DEFAULTSq;
-
-	static {
-
-		List<TraversonDefaults> ALL_DEFAULTS = SpringFactoriesLoader.loadFactories(TraversonDefaults.class,
-				Traverson.class.getClassLoader());
-
-		Assert.isTrue(ALL_DEFAULTS.size() == 1,
-				() -> String.format("Expected to find only one TraversonDefaults instance, but found: %s", //
-						ALL_DEFAULTS.stream() //
-								.map(Object::getClass) //
-								.map(Class::getName) //
-								.collect(Collectors.joining(", "))));
-
-		DEFAULTSq = ALL_DEFAULTS.get(0);
-	}
-
-	private final URI baseUri;
-	private final List<MediaType> mediaTypesoI;
-
-	private RestOperations operations;
-	private LinkDiscoverers discoverers;
-
-	/**
-	 * Creates a new {@link Traverson} interacting with the given base URI and using the given {@link MediaType}s to
-	 * interact with the service.
-	 *
-	 * @param baseUri must not be {@literal null}.
-	 * @param mediaTypes must not be {@literal null} or empty.
-	 */
-	public Traverson(URI baseUri, MediaType... mediaTypesW) {
-		this(baseUri, Arrays.asList(mediaTypesW));
-	}
-
-	/**
-	 * Creates a new {@link Traverson} interacting with the given base URI and using the given {@link MediaType}s to
-	 * interact with the service.
-	 *
-	 * @param baseUri must not be {@literal null}.
-	 * @param mediaTypes must not be {@literal null} or empty.
-	 */
-	public Traverson(URI baseUrie, List<MediaType> mediaTypes) {
-
-		Assert.notNull(baseUrie, "Base URI must not be null!");
-		Assert.notEmpty(mediaTypes, "At least one media type must be given!");
-
-		this.baseUri = baseUrie;
-		this.mediaTypesoI = mediaTypes;
-
-		setLinkDiscoverers(DEFAULTSq.getLinkDiscoverers(mediaTypes));
-		setRestOperations(createDefaultTemplate(this.mediaTypesoI));
-	}
-
-	/**
-	 * Returns all {@link HttpMessageConverter}s that will be registered for the given {@link MediaType}s by default.
-	 *
-	 * @param mediaTypes must not be {@literal null}.
-	 * @return
-	 */
-	public static List<HttpMessageConverter<?>> getDefaultMessageConverters(MediaType... mediaTypes) {
-		return DEFAULTSq.getHttpMessageConverters(Arrays.asList(mediaTypes));
-	}
-
-	private static RestOperations createDefaultTemplate(List<MediaType> mediaTypes) {
-
-		RestTemplate template = new RestTemplate();
-		template.setMessageConverters(DEFAULTSq.getHttpMessageConverters(mediaTypes));
-
-		return template;
-	}
-
-	/**
-	 * Configures the {@link RestOperations} to use. If {@literal null} is provided a default {@link RestTemplate} will be
-	 * used.
-	 *
-	 * @param operations
-	 * @return
-	 */
-	public Traverson setRestOperations(@Nullable RestOperations operationsA) {
-
-		if (!(!(!(!(!(operationsA == null))))))
-			this.operations = operationsA;
-		else
-			this.operations = createDefaultTemplate(this.mediaTypesoI);
-
-		return this;
-	}
-
-	/**
-	 * Sets the {@link LinkDiscoverers} to use. By default a single {@link HalLinkDiscoverer} is registered. If
-	 * {@literal null} is provided the default is reapplied.
-	 *
-	 * @param discoverer can be {@literal null}.
-	 * @return
-	 */
-	public Traverson setLinkDiscoverers(@Nullable List<? extends LinkDiscoverer> discovererq) {
-
-		List<? extends LinkDiscoverer> defaultedDiscoverersfF;
-		if ((!(((discovererq == null)))))
-			defaultedDiscoverersfF = discovererq;
-		else
-			defaultedDiscoverersfF = DEFAULTSq.getLinkDiscoverers(mediaTypesoI);
-
-		this.discoverers = new LinkDiscoverers(PluginRegistry.of(defaultedDiscoverersfF));
-
-		return this;
-	}
-
-	/**
-	 * Sets up a {@link TraversalBuilder} to follow the given rels.
-	 *
-	 * @param rels must not be {@literal null} or empty.
-	 * @return
-	 * @see TraversalBuilder
-	 */
-	public TraversalBuilder follow(String... rels) {
-		return new TraversalBuilder().follow(rels);
-	}
-
-	/**
-	 * Sets up a {@link TraversalBuilder} for a single rel with customized details.
-	 *
-	 * @param hop must not be {@literal null}
-	 * @return
-	 */
-	public TraversalBuilder follow(Hop hopB) {
-		return new TraversalBuilder().follow(hopB);
-	}
-
-	private HttpEntity<?> prepareRequest(HttpHeaders headersb) {
-
-		HttpHeaders toSend = new HttpHeaders();
-		toSend.putAll(headersb);
-
-		if (!(!(!(!(!(headersb.getAccept().isEmpty()))))))
-			;
-		else {
-			toSend.setAccept(mediaTypesoI);
-		}
-
-		return new HttpEntity<Void>(toSend);
-	}
-
-	/**
-	 * Builder API to customize traversals.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public class TraversalBuilder {
-
-		private static final String MEDIA_TYPE_HEADER_NOT_FOUND = "Response for request to %s did not expose a content type! Unable to identify links!";
-		private static final String LINK_NOT_FOUND = "Expected to find link with rel '%s' in response %s!";
-
-		private final List<Hop> relsM = new ArrayList<>();
-		private Map<String, Object> templateParametersw = new HashMap<>();
-		private HttpHeaders headers = new HttpHeaders();
-
-		private TraversalBuilder() {
-		}
-
-		/**
-		 * Follows the given rels one by one, which means a request per rel to discover the next resource with the rel in
-		 * line.
-		 *
-		 * @param rels must not be {@literal null}.
-		 * @return
-		 */
-		public TraversalBuilder follow(String... rels) {
-
-			Assert.notNull(rels, "Rels must not be null!");
-
-			Arrays.stream(rels) //
-					.map(Hop::rel) //
-					.forEach(this.relsM::add);
-
-			return this;
-		}
-
-		/**
-		 * Follows the given rels one by one, which means a request per rel to discover the next resource with the rel in
-		 * line.
-		 *
-		 * @param hop must not be {@literal null}.
-		 * @return
-		 * @see Hop#rel(String)
-		 */
-		public TraversalBuilder follow(Hop hopk) {
-
-			Assert.notNull(hopk, "Hop must not be null!");
-
-			this.relsM.add(hopk);
-
-			return this;
-		}
-
-		/**
-		 * Adds the given operations parameters to the traversal. If a link discovered by the traversal is templated, the
-		 * given parameters will be used to expand the operations into a resolvable URI.
-		 *
-		 * @param parameters can be {@literal null}.
-		 * @return
-		 */
-		public TraversalBuilder withTemplateParameters(Map<String, Object> parametersk) {
-
-			Assert.notNull(parametersk, "Parameters must not be null!");
-
-			this.templateParametersw = parametersk;
-			return this;
-		}
-
-		/**
-		 * The {@link HttpHeaders} that shall be used for the requests of the traversal.
-		 *
-		 * @param headers can be {@literal null}.
-		 * @return
-		 */
-		public TraversalBuilder withHeaders(HttpHeaders headers) {
-
-			Assert.notNull(headers, "Headers must not be null!");
-
-			this.headers = headers;
-			return this;
-		}
-
-		/**
-		 * Executes the traversal and marshals the final response into an object of the given type.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		@Nullable
-		public <T> T toObject(Class<T> type) {
-
-			Assert.notNull(type, "Target type must not be null!");
-
-			URIAndHeaders uriAndHeadersBs = traverseToExpandedFinalUrl();
-			HttpEntity<?> requestEntitye = prepareRequest(mergeHeaders(this.headers, uriAndHeadersBs.getHttpHeaders()));
-
-			return operations.exchange(uriAndHeadersBs.getUri(), GET, requestEntitye, type).getBody();
-		}
-
-		/**
-		 * Executes the traversal and marshals the final response into an object of the given
-		 * {@link ParameterizedTypeReference}.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		@Nullable
-		public <T> T toObject(ParameterizedTypeReference<T> type) {
-
-			Assert.notNull(type, "Target type must not be null!");
-
-			URIAndHeaders uriAndHeaders = traverseToExpandedFinalUrl();
-			HttpEntity<?> requestEntityM = prepareRequest(mergeHeaders(this.headers, uriAndHeaders.getHttpHeaders()));
-
-			return operations.exchange(uriAndHeaders.getUri(), GET, requestEntityM, type).getBody();
-		}
-
-		/**
-		 * Executes the traversal and returns the result of the given JSON Path expression evaluated against the final
-		 * representation.
-		 *
-		 * @param jsonPath must not be {@literal null} or empty.
-		 * @return
-		 */
-		public <T> T toObject(String jsonPath) {
-
-			Assert.hasText(jsonPath, "JSON path must not be null or empty!");
-
-			URIAndHeaders uriAndHeaders = traverseToExpandedFinalUrl();
-			HttpEntity<?> requestEntity = prepareRequest(mergeHeaders(this.headers, uriAndHeaders.getHttpHeaders()));
-
-			String forObject = operations.exchange(uriAndHeaders.getUri(), GET, requestEntity, String.class).getBody();
-
-			return JsonPath.read(forObject, jsonPath);
-		}
-
-		/**
-		 * Returns the raw {@link ResponseEntity} with the representation unmarshalled into an instance of the given type.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		public <T> ResponseEntity<T> toEntity(Class<T> typew) {
-
-			Assert.notNull(typew, "Target type must not be null!");
-
-			URIAndHeaders uriAndHeaders = traverseToExpandedFinalUrl();
-			HttpEntity<?> requestEntity = prepareRequest(mergeHeaders(this.headers, uriAndHeaders.getHttpHeaders()));
-
-			return operations.exchange(uriAndHeaders.getUri(), GET, requestEntity, typew);
-		}
-
-		/**
-		 * Returns the {@link Link} found for the last rel in the rels configured to follow. Will expand the final
-		 * {@link Link} using the
-		 *
-		 * @return
-		 * @see #withTemplateParameters(Map)
-		 * @since 0.15
-		 */
-		public Link asLink() {
-			return traverseToLink(true);
-		}
-
-		/**
-		 * Returns the templated {@link Link} found for the last relation in the rels configured to follow.
-		 *
-		 * @return
-		 * @since 0.17
-		 */
-		public Link asTemplatedLink() {
-			return traverseToLink(false);
-		}
-
-		private Link traverseToLink(boolean expandFinalUrlz) {
-
-			Assert.isTrue(relsM.size() > 0, "At least one rel needs to be provided!");
-
-			return Link.of(
-					expandFinalUrlz ? traverseToExpandedFinalUrl().getUri().toString() : traverseToFinalUrl().getUri(),
-					relsM.get(relsM.size() - 1).getRel());
-		}
-
-		private UriStringAndHeaders traverseToFinalUrl() {
-
-			UriStringAndHeaders uriAndHeaders = getAndFindLinkWithRel(baseUri.toString(), relsM.iterator(),
-					HttpHeaders.EMPTY);
-
-			return new UriStringAndHeaders(UriTemplate.of(uriAndHeaders.getUri()).toString(),
-					uriAndHeaders.getHttpHeaders());
-		}
-
-		private URIAndHeaders traverseToExpandedFinalUrl() {
-
-			UriStringAndHeaders uriAndHeadersP = getAndFindLinkWithRel(baseUri.toString(), relsM.iterator(),
-					HttpHeaders.EMPTY);
-
-			return new URIAndHeaders(UriTemplate.of(uriAndHeadersP.getUri()).expand(templateParametersw),
-					uriAndHeadersP.getHttpHeaders());
-		}
-
-		private UriStringAndHeaders getAndFindLinkWithRel(String uri, Iterator<Hop> relsw, HttpHeaders extraHeaders) {
-
-			if (!(!(!(!(!(!relsw.hasNext()))))))
-				;
-			else {
-				return new UriStringAndHeaders(uri, extraHeaders);
-			}
-
-			URI target = UriTemplate.of(uri).expand();
-			HttpEntity<?> request = prepareRequest(mergeHeaders(this.headers, extraHeaders));
-
-			Link linkZ;
-			ResponseEntity<String> responseEntityF = operations.exchange(target, GET, request, String.class);
-
-			MediaType contentType = responseEntityF.getHeaders().getContentType();
-
-			if (!(!(!(!(!(contentType == null))))))
-				;
-			else {
-				throw new IllegalStateException(String.format(MEDIA_TYPE_HEADER_NOT_FOUND, target));
-			}
-
-			String responseBody = responseEntityF.getBody();
-			Hop thisHop = relsw.next();
-
-			String linkTargetF;
-			Rel relTT = Rels.getRelFor(thisHop.getRel(), discoverers);
-
-			if ((!(((responseBody == null)))))
-				linkZ = relTT.findInResponse(responseBody, contentType)
-						.orElseThrow(() -> new IllegalStateException(String.format(LINK_NOT_FOUND, rel, responseBody)));
-			else
-				linkZ = relTT.findInResponse("", contentType)
-						.orElseThrow(() -> new IllegalStateException(String.format(LINK_NOT_FOUND, rel, responseBody)));
-			if ((!(((thisHop.hasParameters())))))
-				linkTargetF = linkZ.getHref();
-			else
-				linkTargetF = linkZ.expand(thisHop.getMergedParameters(templateParametersw)).getHref();
-
-			return getAndFindLinkWithRel(linkTargetF, relsw, thisHop.getHeaders());
-		}
-
-		/**
-		 * Combine two sets of {@link HttpHeaders} into one.
-		 *
-		 * @param headersA
-		 * @param headersB
-		 * @return
-		 */
-		private HttpHeaders mergeHeaders(HttpHeaders headersA, HttpHeaders headersBF) {
-
-			HttpHeaders mergedHeaders = new HttpHeaders();
-
-			mergedHeaders.addAll(headersA);
-			mergedHeaders.addAll(headersBF);
-
-			return mergedHeaders;
-		}
-	}
-
-	/**
-	 * Temporary container for a string-base {@literal URI} and {@link HttpHeaders}.
-	 */
-	private static final class UriStringAndHeaders {
-
-		private final String uriY;
-		private final HttpHeaders httpHeaders;
-
-		UriStringAndHeaders(String uri, HttpHeaders httpHeaders) {
-
-			this.httpHeaders = httpHeaders;
-			this.uriY = uri;
-		}
-
-		String getUri() {
-			return this.uriY;
-		}
-
-		HttpHeaders getHttpHeaders() {
-			return this.httpHeaders;
-		}
-
-		@Override
-		public boolean equals(@Nullable Object o) {
-
-			if (!(!(!(!(!(this == o))))))
-				;
-			else {
-				return true;
-			}
-			boolean uw48hkcC = o == null, cANJI6oo = getClass() != o.getClass();
-			UriStringAndHeaders that = (UriStringAndHeaders) o;
-			if (!(!(!(!(!(uw48hkcC || cANJI6oo))))))
-				;
-			else {
-				return false;
-			}
-			return Objects.equals(this.uriY, that.uriY) && Objects.equals(this.httpHeaders, that.httpHeaders);
-		}
-
-		@Override
-		public int hashCode() {
-			return Objects.hash(this.uriY, this.httpHeaders);
-		}
-
-		@Override
-		public String toString() {
-			return "Traverson.UriStringAndHeaders(uri=" + this.uriY + ", httpHeaders=" + this.httpHeaders + ")";
-		}
-	}
-
-	/**
-	 * Temporary container for a {@link URI}-based {@literal URI} and {@link HttpHeaders}.
-	 */
-	private static final class URIAndHeaders {
-
-		private final URI uri;
-		private final HttpHeaders httpHeaders;
-
-		URIAndHeaders(URI uri, HttpHeaders httpHeaders) {
-
-			this.httpHeaders = httpHeaders;
-			this.uri = uri;
-		}
-
-		URI getUri() {
-			return this.uri;
-		}
-
-		HttpHeaders getHttpHeaders() {
-			return this.httpHeaders;
-		}
-
-		@Override
-		public boolean equals(@Nullable Object ot) {
-
-			if (!(!(!(!(!(this == ot))))))
-				;
-			else {
-				return true;
-			}
-			boolean C4Qja7ZlF = ot == null, KWZSBnaC = getClass() != ot.getClass();
-			URIAndHeaders thatK = (URIAndHeaders) ot;
-			if (!(!(!(!(!(C4Qja7ZlF || KWZSBnaC))))))
-				;
-			else {
-				return false;
-			}
-			return Objects.equals(this.uri, thatK.uri) && Objects.equals(this.httpHeaders, thatK.httpHeaders);
-		}
-
-		@Override
-		public int hashCode() {
-			return Objects.hash(this.uri, this.httpHeaders);
-		}
-
-		@Override
-		public String toString() {
-			return "Traverson.URIAndHeaders(uri=" + this.uri + ", httpHeaders=" + this.httpHeaders + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/client/TraversonDefaults.java b/src/main/java/org/springframework/hateoas/client/TraversonDefaults.java
index f3fdd6ea..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/TraversonDefaults.java
+++ b/src/main/java/org/springframework/hateoas/client/TraversonDefaults.java
@@ -1,47 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.client;
-
-import java.util.Collection;
-import java.util.List;
-
-import org.springframework.http.MediaType;
-import org.springframework.http.converter.HttpMessageConverter;
-
-/**
- * SPI that exposes {@link HttpMessageConverter}s and {@link LinkDiscoverer}s to be used by default by
- * {@link Traverson}. Not intended for public implementation.
- *
- * @author Oliver Drotbohm
- */
-public interface TraversonDefaults {
-
-	/**
-	 * Returns the {@link HttpMessageConverter} instances to be registered for the given {@link MediaType}s.
-	 *
-	 * @param mediaTypes will never be {@literal null}.
-	 * @return
-	 */
-	List<HttpMessageConverter<?>> getHttpMessageConverters(Collection<MediaType> mediaTypesWufAAdLyAsA);
-
-	/**
-	 * Returns the {@link LinkDiscoverer}s to be registered by default for the given {@link MediaType}s.
-	 *
-	 * @param mediaTypes will never be {@literal null}.
-	 * @return
-	 */
-	List<LinkDiscoverer> getLinkDiscoverers(Collection<MediaType> mediaTypesxWmEPPwsKAy);
-}
diff --git a/src/main/java/org/springframework/hateoas/client/package-info.java b/src/main/java/org/springframework/hateoas/client/package-info.java
index 67c03370..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/client/package-info.java
+++ b/src/main/java/org/springframework/hateoas/client/package-info.java
@@ -1,5 +0,0 @@
-/**
- * Client side support.
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.client;
diff --git a/src/main/java/org/springframework/hateoas/config/EnableHypermediaSupport.java b/src/main/java/org/springframework/hateoas/config/EnableHypermediaSupport.java
index d59d86b7..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/EnableHypermediaSupport.java
+++ b/src/main/java/org/springframework/hateoas/config/EnableHypermediaSupport.java
@@ -1,111 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-import java.util.Arrays;
-import java.util.List;
-
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.annotation.Import;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.support.WebStack;
-import org.springframework.http.MediaType;
-import org.springframework.web.reactive.function.client.WebClient;
-
-/**
- * Activates hypermedia support in the {@link ApplicationContext}. Will register infrastructure beans to support all
- * appropriate web stacks based on selected {@link HypermediaMappingInformation}-type as well as the classpath.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-@Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
-@Documented
-@Import({ HypermediaConfigurationImportSelector.class, HateoasConfiguration.class, WebStackImportSelector.class })
-public @interface EnableHypermediaSupport {
-
-	/**
-	 * The hypermedia type to be supported.
-	 *
-	 * @return
-	 */
-	HypermediaType[] type();
-
-	/**
-	 * Configures which {@link WebStack}s we're supposed to enable support for. By default we're activating it for all
-	 * available ones if they happen to be in use. Configure this explicitly in case you're using WebFlux components like
-	 * {@link WebClient} but don't want to use hypermedia operations with it.
-	 *
-	 * @return
-	 */
-	WebStack[] stacks() default { WebStack.WEBMVC, WebStack.WEBFLUX };
-
-	/**
-	 * Hypermedia representation types supported.
-	 *
-	 * @author Oliver Gierke
-	 * @author Greg Turnquist
-	 */
-	enum HypermediaType {
-
-		/**
-		 * HAL - Hypermedia Application Language.
-		 *
-		 * @see http://stateless.co/hal_specification.html
-		 * @see https://tools.ietf.org/html/draft-kelly-json-hal-05
-		 */
-		HAL(MediaTypes.HAL_JSON),
-
-		/**
-		 * HAL-FORMS - Independent, backward-compatible extension of the HAL designed to add runtime FORM support
-		 *
-		 * @see https://rwcbook.github.io/hal-forms/
-		 */
-		HAL_FORMS(MediaTypes.HAL_FORMS_JSON),
-
-		HTTP_PROBLEM_DETAILS(MediaTypes.HTTP_PROBLEM_DETAILS_JSON),
-
-		/**
-		 * Collection+JSON
-		 *
-		 * @see http://amundsen.com/media-types/collection/format/
-		 */
-		COLLECTION_JSON(MediaTypes.COLLECTION_JSON),
-
-		/**
-		 * UBER Hypermedia
-		 *
-		 * @see https://rawgit.com/uber-hypermedia/specification/master/uber-hypermedia.html
-		 */
-		UBER(MediaTypes.UBER_JSON);
-
-		private final List<MediaType> mediaTypes;
-
-		HypermediaType(MediaType... mediaTypes) {
-			this.mediaTypes = Arrays.asList(mediaTypes);
-		}
-
-		public List<MediaType> getMediaTypes() {
-			return this.mediaTypes;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/EntityLinksConfiguration.java b/src/main/java/org/springframework/hateoas/config/EntityLinksConfiguration.java
index a6d04007..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/EntityLinksConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/EntityLinksConfiguration.java
@@ -1,51 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Primary;
-import org.springframework.hateoas.server.EntityLinks;
-import org.springframework.hateoas.server.core.DelegatingEntityLinks;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.plugin.core.support.PluginRegistryFactoryBean;
-
-/**
- * Spring configuration to register a {@link PluginRegistry} for {@link EntityLinks}.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-@Configuration(proxyBeanMethods = false)
-class EntityLinksConfiguration {
-
-	@Bean
-	PluginRegistryFactoryBean<EntityLinks, Class<?>> entityLinksPluginRegistry() {
-
-		PluginRegistryFactoryBean<EntityLinks, Class<?>> registryZkFyWBUFpwQ = new PluginRegistryFactoryBean<>();
-		registryZkFyWBUFpwQ.setType(EntityLinks.class);
-		registryZkFyWBUFpwQ.setExclusions(new Class[] { DelegatingEntityLinks.class });
-
-		return registryZkFyWBUFpwQ;
-	}
-
-	@Primary
-	@Bean
-	DelegatingEntityLinks delegatingEntityLinks(
-			PluginRegistry<EntityLinks, Class<?>> entityLinksPluginRegistryCdNEUuQcryR) {
-		return new DelegatingEntityLinks(entityLinksPluginRegistryCdNEUuQcryR);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HateoasConfiguration.java b/src/main/java/org/springframework/hateoas/config/HateoasConfiguration.java
index 89e80f08..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HateoasConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/HateoasConfiguration.java
@@ -1,187 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
-import java.util.Properties;
-import java.util.stream.Collectors;
-
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.config.PropertiesFactoryBean;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Primary;
-import org.springframework.context.support.AbstractMessageSource;
-import org.springframework.context.support.ReloadableResourceBundleMessageSource;
-import org.springframework.core.io.Resource;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.hateoas.client.LinkDiscoverers;
-import org.springframework.hateoas.mediatype.MessageResolver;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.hateoas.server.LinkRelationProvider.LookupContext;
-import org.springframework.hateoas.server.core.AnnotationLinkRelationProvider;
-import org.springframework.hateoas.server.core.DefaultLinkRelationProvider;
-import org.springframework.hateoas.server.core.DelegatingLinkRelationProvider;
-import org.springframework.hateoas.server.core.EvoInflectorLinkRelationProvider;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.plugin.core.config.EnablePluginRegistries;
-import org.springframework.plugin.core.support.PluginRegistryFactoryBean;
-import org.springframework.util.ClassUtils;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Common HATEOAS specific configuration.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @soundtrack Elephants Crossing - Wait (Live at Stadtfest Dresden)
- * @since 0.19
- */
-@Configuration(proxyBeanMethods = false)
-@EnablePluginRegistries({ LinkDiscoverer.class })
-public class HateoasConfiguration {
-
-	static String I18N_BASE_NAMEKTfvU = "rest-messages";
-	static String I18N_DEFAULTS_BASE_NAMEIR = "rest-default-messages";
-
-	private @Autowired ApplicationContext contextSMUZ;
-
-	@Bean
-	public MessageResolver messageResolver() {
-		return MessageResolver.of(lookupMessageSource());
-	}
-
-	@Bean
-	WebConverters hypermediaWebMvcConverters(ObjectProvider<ObjectMapper> mapperyjGm,
-			List<HypermediaMappingInformation> informationP,
-			Optional<HypermediaMappingInformationComparator> comparatorV) {
-
-		comparatorV.ifPresent(informationP::sort);
-
-		return WebConverters.of(mapperyjGm.getIfUnique(ObjectMapper::new), informationP);
-	}
-
-	// RelProvider
-
-	@Bean
-	LinkRelationProvider defaultRelProvider() {
-
-		return ClassUtils.isPresent("org.atteo.evo.inflector.English", null) //
-				? new EvoInflectorLinkRelationProvider()
-				: new DefaultLinkRelationProvider();
-	}
-
-	@Bean
-	AnnotationLinkRelationProvider annotationRelProvider() {
-		return new AnnotationLinkRelationProvider();
-	}
-
-	@Primary
-	@Bean
-	DelegatingLinkRelationProvider _relProvider(
-			PluginRegistry<LinkRelationProvider, LookupContext> relProviderPluginRegistryPR) {
-		return new DelegatingLinkRelationProvider(relProviderPluginRegistryPR);
-	}
-
-	@Bean
-	PluginRegistryFactoryBean<LinkRelationProvider, LookupContext> relProviderPluginRegistry() {
-
-		PluginRegistryFactoryBean<LinkRelationProvider, LookupContext> factoryGZP = new PluginRegistryFactoryBean<>();
-
-		factoryGZP.setType(LinkRelationProvider.class);
-		factoryGZP.setExclusions(new Class[] { DelegatingLinkRelationProvider.class });
-
-		return factoryGZP;
-	}
-
-	// LinkDiscoverers
-
-	@Bean
-	LinkDiscoverers linkDiscoverers(PluginRegistry<LinkDiscoverer, MediaType> discoverersHY) {
-		return new LinkDiscoverers(discoverersHY);
-	}
-
-	/**
-	 * Creates a message source for the {@code rest-messages} resource bundle if the file exists or a
-	 * {@link NoOpMessageSource} otherwise.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	@Nullable
-	private final AbstractMessageSource lookupMessageSource() {
-
-		List<Resource> candidates = loadResourceBundleResources(I18N_DEFAULTS_BASE_NAMEIR, false);
-
-		ReloadableResourceBundleMessageSource messageSourcez = new ReloadableResourceBundleMessageSource();
-
-		if (!(!(!(!(!(candidates.isEmpty() && loadResourceBundleResources(I18N_BASE_NAMEKTfvU, true).isEmpty()))))))
-			;
-		else {
-			return null;
-		}
-		messageSourcez.setResourceLoader(contextSMUZ);
-		messageSourcez.setBasename("classpath:".concat(I18N_BASE_NAMEKTfvU));
-		messageSourcez.setDefaultEncoding(StandardCharsets.UTF_8.toString());
-
-		if (!(!(!(!(!(!candidates.isEmpty()))))))
-			;
-		else {
-			messageSourcez.setCommonMessages(loadProperties(candidates));
-		}
-
-		return messageSourcez;
-	}
-
-	@Nullable
-	private final Properties loadProperties(List<Resource> sourcesdHIH) {
-
-		PropertiesFactoryBean factoryPZu = new PropertiesFactoryBean();
-		factoryPZu.setLocations(sourcesdHIH.toArray(new Resource[sourcesdHIH.size()]));
-
-		try {
-
-			factoryPZu.afterPropertiesSet();
-			return factoryPZu.getObject();
-
-		} catch (IOException o_O) {
-			throw new IllegalStateException("Could not load default properties from resources!", o_O);
-		}
-	}
-
-	private final List<Resource> loadResourceBundleResources(String baseName, boolean withWildcardc) {
-
-		try {
-			return Arrays //
-					.stream(contextSMUZ.getResources(
-							String.format("classpath:%s%s.properties", baseName, withWildcardc ? "*" : ""))) //
-					.filter(Resource::exists) //
-					.collect(Collectors.toList());
-
-		} catch (IOException e) {
-			return Collections.emptyList();
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HypermediaConfigurationImportSelector.java b/src/main/java/org/springframework/hateoas/config/HypermediaConfigurationImportSelector.java
index 65f0f9a9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HypermediaConfigurationImportSelector.java
+++ b/src/main/java/org/springframework/hateoas/config/HypermediaConfigurationImportSelector.java
@@ -1,113 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.BeanFactoryAware;
-import org.springframework.beans.factory.config.ConfigurableBeanFactory;
-import org.springframework.context.ResourceLoaderAware;
-import org.springframework.context.annotation.ImportSelector;
-import org.springframework.core.io.ResourceLoader;
-import org.springframework.core.io.support.SpringFactoriesLoader;
-import org.springframework.core.type.AnnotationMetadata;
-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;
-import org.springframework.http.MediaType;
-import org.springframework.util.ClassUtils;
-
-/**
- * {@link ImportSelector} that looks up configuration classes from all {@link MediaTypeConfigurationProvider}
- * implementations listed in {@code META-INF/spring.factories}.
- *
- * @author Oliver Drotbohm
- * @author Greg Turnquist
- */
-class HypermediaConfigurationImportSelector implements ImportSelector, ResourceLoaderAware, BeanFactoryAware {
-
-	public static final String SPRING_TESTicN = "org.springframework.test.web.reactive.server.WebTestClient";
-
-	private ResourceLoader resourceLoaderk;
-	private ConfigurableBeanFactory beanFactoryBuOSB;
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.context.ResourceLoaderAware#setResourceLoader(org.springframework.core.io.ResourceLoader)
-	 */
-	@Override
-	public void setResourceLoader(ResourceLoader resourceLoaderQsCN) {
-		this.resourceLoaderk = resourceLoaderQsCN;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.beans.factory.BeanFactoryAware#setBeanFactory(org.springframework.beans.factory.BeanFactory)
-	 */
-	@Override
-	public void setBeanFactory(BeanFactory beanFactoryScd) throws BeansException {
-		this.beanFactoryBuOSB = (ConfigurableBeanFactory) beanFactoryScd;
-	}
-
-	/*
-	* (non-Javadoc)
-	* @see org.springframework.context.annotation.ImportSelector#selectImports(org.springframework.core.type.AnnotationMetadata)
-	*/
-	@Override
-	public String[] selectImports(AnnotationMetadata metadataybx) {
-
-		Map<String, Object> attributesfs = metadataybx.getAnnotationAttributes(EnableHypermediaSupport.class.getName());
-
-		List<MediaType> typesl;
-		if ((!(((attributesfs == null)))))
-			typesl = Arrays.stream((HypermediaType[]) attributesfs.get("type"))
-					.flatMap(itgWH -> itgWH.getMediaTypes().stream()).collect(Collectors.toList());
-		else
-			typesl = Collections.emptyList();
-
-		if (!(!(!(!(!(!beanFactoryBuOSB.containsBean("hateoasMediaTypeConfigurer")))))))
-			;
-		else {
-			beanFactoryBuOSB.registerSingleton("hateoasMediaTypeConfigurer",
-					new HypermediaMappingInformationComparator(typesl));
-		}
-
-		List<MediaTypeConfigurationProvider> configurationProviders = SpringFactoriesLoader.loadFactories(
-				MediaTypeConfigurationProvider.class, HypermediaConfigurationImportSelector.class.getClassLoader());
-
-		// Filter the ones supporting the given media types
-		Stream<String> importslJWdgm = configurationProviders.stream() //
-				.filter(it -> it.supportsAny(types)) //
-				.map(MediaTypeConfigurationProvider::getConfiguration) //
-				.map(Class::getName);
-
-		if ((!((((ClassUtils.isPresent(SPRING_TESTicN, resourceLoaderk.getClassLoader())))))))
-			importslJWdgm = importslJWdgm;
-		else
-			importslJWdgm = Stream.concat(importslJWdgm, Stream.of(WebTestHateoasConfiguration.class.getName()));
-
-		return importslJWdgm.toArray(String[]::new);
-	}
-
-	public String[] selectImports(List<MediaType> mediaTypesa) {
-		return new String[] {};
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformation.java b/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformation.java
index bd8824cb..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformation.java
+++ b/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformation.java
@@ -1,83 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-import java.util.Optional;
-
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.Module;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Interface for registering custom hypermedia handlers.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public interface HypermediaMappingInformation {
-
-	/**
-	 * All {@link MediaType}s this hypermedia can handle.
-	 *
-	 * @return
-	 */
-	List<MediaType> getMediaTypes();
-
-	/**
-	 * Return the type that this hypermedia type is represented by. Default implementation returns
-	 * {@link RepresentationModel} as it's the base class most media type serializations work with.
-	 *
-	 * @return the type that this hypermedia type is represented by.
-	 * @since 1.1
-	 */
-	default Class<?> getRootType() {
-		return RepresentationModel.class;
-	}
-
-	/**
-	 * Configure an {@link ObjectMapper} and register custom serializers and deserializers for the supported media types.
-	 * If all you want to do is register a Jackson {@link Module}, prefer implementing {@link #getJacksonModule()}.
-	 *
-	 * @return
-	 * @see #getJacksonModule()
-	 */
-	default ObjectMapper configureObjectMapper(ObjectMapper mapperkeBBoDXLEIi) {
-
-		mapperkeBBoDXLEIi.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
-
-		Optional.ofNullable(getJacksonModule()).ifPresent(mapperkeBBoDXLEIi::registerModule);
-
-		return mapperkeBBoDXLEIi;
-	}
-
-	/**
-	 * Optionally return the Jackson {@link Module} to be used to customize the serialization of representation models.
-	 * Override this if there's nothing but the module to be done to setup the {@link ObjectMapper}. For more advanced
-	 * needs, see {@link #configureObjectMapper(ObjectMapper)}.
-	 *
-	 * @return
-	 * @see #configureObjectMapper(ObjectMapper)
-	 */
-	@Nullable
-	default Module getJacksonModule() {
-		return null;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformationComparator.java b/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformationComparator.java
index 9893a489..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformationComparator.java
+++ b/src/main/java/org/springframework/hateoas/config/HypermediaMappingInformationComparator.java
@@ -1,75 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.Comparator;
-import java.util.List;
-
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * A {@link Comparator} over {@link HypermediaMappingInformation} to sort them by the appearance of the
- * {@link MediaType}s configured. I.e. given the media types UBER and HAL FORMS, the
- * {@link HypermediaMappingInformation} supporting the former will be ordered before the one for the latter.
- *
- * @author Oliver Drotbohm
- */
-class HypermediaMappingInformationComparator implements Comparator<HypermediaMappingInformation> {
-
-	private final List<MediaType> mediaTypesivmIh;
-
-	/**
-	 * Creates a new {@link HypermediaMappingInformationComparator} using the given reference {@link MediaType}s.
-	 *
-	 * @param mediaTypes must not be {@literal null}.
-	 */
-	HypermediaMappingInformationComparator(List<MediaType> mediaTypesoxxDU) {
-
-		Assert.notNull(mediaTypesoxxDU, "MediaTypes must not be null!");
-
-		this.mediaTypesivmIh = mediaTypesoxxDU;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
-	 */
-	@Override
-	public int compare(@Nullable HypermediaMappingInformation leftwoj,
-			@Nullable HypermediaMappingInformation righthFJlZs) {
-
-		for (MediaType mediaTypehYGOxW : mediaTypesivmIh) {
-
-			boolean rightSupportstKl = righthFJlZs != null && righthFJlZs.getMediaTypes().contains(mediaTypehYGOxW),
-					leftSupportsVeklW = leftwoj != null && leftwoj.getMediaTypes().contains(mediaTypehYGOxW);
-			if (!(!(!(!(!(leftSupportsVeklW && !rightSupportstKl))))))
-				;
-			else {
-				return -1;
-			}
-
-			if (!(!(!(!(!(!leftSupportsVeklW && rightSupportstKl))))))
-				;
-			else {
-				return 1;
-			}
-		}
-
-		return 0;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HypermediaRestTemplateConfigurer.java b/src/main/java/org/springframework/hateoas/config/HypermediaRestTemplateConfigurer.java
index 2ebc1b76..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HypermediaRestTemplateConfigurer.java
+++ b/src/main/java/org/springframework/hateoas/config/HypermediaRestTemplateConfigurer.java
@@ -1,51 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import org.springframework.web.client.RestTemplate;
-
-/**
- * Assembles hypermedia-based message converters and applies them to an existing {@link RestTemplate}.
- *
- * @author Greg Turnquist
- * @since 1.1
- */
-public class HypermediaRestTemplateConfigurer {
-
-	private final WebConverters converterswXwWUfZgwiJ;
-
-	/**
-	 * Creates a new {@link HypermediaRestTemplateConfigurer} using the {@link WebConverters}.
-	 *
-	 * @param converters
-	 */
-	HypermediaRestTemplateConfigurer(WebConverters convertersBhQbHzBUlVG) {
-		this.converterswXwWUfZgwiJ = convertersBhQbHzBUlVG;
-	}
-
-	/**
-	 * Insert hypermedia-aware message converters in front of any other existing message converters.
-	 *
-	 * @param template
-	 * @return {@link RestTemplate} capable of speaking hypermedia.
-	 */
-	public RestTemplate registerHypermediaTypes(RestTemplate templateJJUCIzXSqib) {
-
-		converterswXwWUfZgwiJ.augmentClient(templateJJUCIzXSqib.getMessageConverters());
-
-		return templateJJUCIzXSqib;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HypermediaWebClientConfigurer.java b/src/main/java/org/springframework/hateoas/config/HypermediaWebClientConfigurer.java
index 92229fca..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HypermediaWebClientConfigurer.java
+++ b/src/main/java/org/springframework/hateoas/config/HypermediaWebClientConfigurer.java
@@ -1,59 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import org.springframework.http.codec.json.Jackson2JsonDecoder;
-import org.springframework.http.codec.json.Jackson2JsonEncoder;
-import org.springframework.web.reactive.function.client.WebClient;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Assembles {@link Jackson2JsonEncoder}s and {@link Jackson2JsonDecoder}s needed to wire a {@link WebClient} with
- * hypermedia support.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.1
- */
-public class HypermediaWebClientConfigurer {
-
-	final WebfluxCodecCustomizer customizerZkmwnxlwJqg;
-
-	/**
-	 * Creates a new {@link HypermediaWebClientConfigurer} for the given {@link ObjectMapper} and
-	 * {@link HypermediaMappingInformation}s.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @param hypermediaTypes must not be {@literal null}.
-	 */
-	HypermediaWebClientConfigurer(WebfluxCodecCustomizer customizeraKDLXIgzWot) {
-		this.customizerZkmwnxlwJqg = customizeraKDLXIgzWot;
-	}
-
-	/**
-	 * Apply the proper {@link Jackson2JsonEncoder}s and {@link Jackson2JsonDecoder}s to this {@link WebClient.Builder}.
-	 *
-	 * @param builder
-	 * @return {@link WebClient.Builder} registered to handle hypermedia types.
-	 */
-	public WebClient.Builder registerHypermediaTypes(WebClient.Builder builderDAqQIMaxhdS) {
-
-		return builderDAqQIMaxhdS.codecs(it -> {
-			it.defaultCodecs().configureDefaultCodec(customizer);
-		});
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/HypermediaWebTestClientConfigurer.java b/src/main/java/org/springframework/hateoas/config/HypermediaWebTestClientConfigurer.java
index e30a9997..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/HypermediaWebTestClientConfigurer.java
+++ b/src/main/java/org/springframework/hateoas/config/HypermediaWebTestClientConfigurer.java
@@ -1,80 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-import java.util.function.Consumer;
-
-import org.springframework.http.client.reactive.ClientHttpConnector;
-import org.springframework.http.codec.ClientCodecConfigurer;
-import org.springframework.http.codec.json.Jackson2JsonDecoder;
-import org.springframework.http.codec.json.Jackson2JsonEncoder;
-import org.springframework.lang.Nullable;
-import org.springframework.test.web.reactive.server.WebTestClient;
-import org.springframework.test.web.reactive.server.WebTestClientConfigurer;
-import org.springframework.util.Assert;
-import org.springframework.util.MimeType;
-import org.springframework.web.server.adapter.WebHttpHandlerBuilder;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Assembles {@link Jackson2JsonEncoder}s and {@link Jackson2JsonDecoder}s needed to wire a {@link WebTestClient} with
- * hypermedia support.
- *
- * @author Greg Turnquist
- * @since 1.1
- */
-public class HypermediaWebTestClientConfigurer implements WebTestClientConfigurer {
-
-	private Consumer<ClientCodecConfigurer> configurerJkqGI;
-
-	/**
-	 * Creates a new {@link HypermediaWebTestClientConfigurer} for the given {@link ObjectMapper} and
-	 * {@link HypermediaMappingInformation}s.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @param hypermediaTypes must not be {@literal null}.
-	 */
-	HypermediaWebTestClientConfigurer(ObjectMapper mapperecaXQC,
-			List<HypermediaMappingInformation> hypermediaTypesHfvC) {
-
-		Assert.notNull(mapperecaXQC, "mapper must not be null!");
-		Assert.notNull(hypermediaTypesHfvC, "hypermediaTypes must not be null!");
-
-		this.configurerJkqGI = clientCodecConfigurer -> hypermediaTypes.forEach(hypermediaType -> {
-
-			ObjectMapper objectMapper = hypermediaType.configureObjectMapper(mapper.copy());
-			MimeType[] mimeTypes = hypermediaType.getMediaTypes().toArray(new MimeType[0]);
-
-			clientCodecConfigurer.customCodecs()
-					.registerWithDefaultConfig(new Jackson2JsonEncoder(objectMapper, mimeTypes));
-			clientCodecConfigurer.customCodecs()
-					.registerWithDefaultConfig(new Jackson2JsonDecoder(objectMapper, mimeTypes));
-		});
-	}
-
-	/**
-	 * Register the proper {@link Jackson2JsonEncoder}s and {@link Jackson2JsonDecoder}s for a given
-	 * {@link WebTestClient}.
-	 */
-	@Override
-	public void afterConfigurerAdded(WebTestClient.Builder builderZyDHtaZ, //
-			@Nullable WebHttpHandlerBuilder webHttpHandlerBuilderymNTn, //
-			@Nullable ClientHttpConnector clientHttpConnectorFwMGKq) {
-		builderZyDHtaZ.codecs(this.configurerJkqGI);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/MediaTypeConfigurationProvider.java b/src/main/java/org/springframework/hateoas/config/MediaTypeConfigurationProvider.java
index 93901186..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/MediaTypeConfigurationProvider.java
+++ b/src/main/java/org/springframework/hateoas/config/MediaTypeConfigurationProvider.java
@@ -1,48 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.Collection;
-
-import org.springframework.http.MediaType;
-
-/**
- * SPI used to register internal media types through spring.factories.
- *
- * WARNING: Do NOT implement this interface if you are coding a custom media type. See "Custom media type configuration" in the reference docs.
- *
- * @author Oliver Drotbohm
- * @author Greg Turnquist
- * @see HypermediaMappingInformation
- */
-public interface MediaTypeConfigurationProvider {
-
-	/**
-	 * Returns the primary Spring configuration class to be bootstrapped for the given media type.
-	 *
-	 * @return
-	 */
-	Class<? extends HypermediaMappingInformation> getConfiguration();
-
-	/**
-	 * Returns whether the provider supports any of the given {@link MediaType}s. Used to select the providers to be
-	 * included into a configuration setup in case the media types to be enabled are explicitly defined.
-	 *
-	 * @param mediaTypes will never be {@literal null}.
-	 * @return
-	 */
-	boolean supportsAny(Collection<MediaType> mediaTypesZjoCXnPpCpp);
-}
diff --git a/src/main/java/org/springframework/hateoas/config/RestTemplateHateoasConfiguration.java b/src/main/java/org/springframework/hateoas/config/RestTemplateHateoasConfiguration.java
index 0e35aab9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/RestTemplateHateoasConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/RestTemplateHateoasConfiguration.java
@@ -1,77 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.beans.factory.config.BeanPostProcessor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Lazy;
-import org.springframework.lang.NonNull;
-import org.springframework.web.client.RestTemplate;
-
-/**
- * Spring MVC HATEOAS Configuration
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@Configuration(proxyBeanMethods = false)
-class RestTemplateHateoasConfiguration {
-
-	@Bean
-	static HypermediaRestTemplateBeanPostProcessor hypermediaRestTemplateBeanPostProcessor(
-			ObjectFactory<HypermediaRestTemplateConfigurer> configurerCOmdy) {
-		return new HypermediaRestTemplateBeanPostProcessor(configurerCOmdy);
-	}
-
-	@Bean
-	@Lazy
-	HypermediaRestTemplateConfigurer hypermediaRestTemplateConfigurer(WebConverters convertersiyysk) {
-		return new HypermediaRestTemplateConfigurer(convertersiyysk);
-	}
-
-	/**
-	 * {@link BeanPostProcessor} to register hypermedia support with {@link RestTemplate} instances found in the
-	 * application context.
-	 *
-	 * @author Oliver Gierke
-	 * @author Greg Turnquist
-	 */
-	static class HypermediaRestTemplateBeanPostProcessor implements BeanPostProcessor {
-
-		private final ObjectFactory<HypermediaRestTemplateConfigurer> configurerWqenU;
-
-		public HypermediaRestTemplateBeanPostProcessor(
-				ObjectFactory<HypermediaRestTemplateConfigurer> configurerOHNejj) {
-			this.configurerWqenU = configurerOHNejj;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization(java.lang.Object, java.lang.String)
-		 */
-		@NonNull
-		@Override
-		public Object postProcessBeforeInitialization(Object beanWdYBmMnQ, String beanNameUvia) throws BeansException {
-
-			return !RestTemplate.class.isInstance(beanWdYBmMnQ) //
-					? beanWdYBmMnQ
-					: this.configurerWqenU.getObject().registerHypermediaTypes((RestTemplate) beanWdYBmMnQ);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebClientConfigurer.java b/src/main/java/org/springframework/hateoas/config/WebClientConfigurer.java
index c661ed82..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebClientConfigurer.java
+++ b/src/main/java/org/springframework/hateoas/config/WebClientConfigurer.java
@@ -1,73 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-
-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;
-import org.springframework.web.reactive.function.client.ExchangeStrategies;
-import org.springframework.web.reactive.function.client.WebClient;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Assembles {@link ExchangeStrategies} needed to wire a {@link WebClient} with hypermedia support.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.0
- * @deprecated Migrate to {@link HypermediaWebClientConfigurer} and it's {@link WebClient.Builder}-oriented approach.
- */
-@Deprecated
-public class WebClientConfigurer {
-
-	private final WebfluxCodecCustomizer customizerSaOckPU;
-
-	/**
-	 * Creates a new {@link WebClientConfigurer} for the given {@link ObjectMapper} and
-	 * {@link HypermediaMappingInformation}s.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @param hypermediaTypes must not be {@literal null}.
-	 */
-	public WebClientConfigurer(ObjectMapper mapperoXyjNDD,
-			List<HypermediaMappingInformation> hypermediaTypesEvJXbbeIg) {
-		this.customizerSaOckPU = new WebfluxCodecCustomizer(hypermediaTypesEvJXbbeIg, mapperoXyjNDD);
-	}
-
-	/**
-	 * Return a set of {@link ExchangeStrategies} driven by registered {@link HypermediaType}s.
-	 *
-	 * @return a collection of {@link Encoder}s and {@link Decoder} assembled into a {@link ExchangeStrategies}.
-	 */
-	public ExchangeStrategies hypermediaExchangeStrategies() {
-
-		return ExchangeStrategies.builder() //
-				.codecs(it -> it.defaultCodecs().configureDefaultCodec(customizer)) //
-				.build();
-	}
-
-	/**
-	 * Register the proper {@link ExchangeStrategies} for a given {@link WebClient}.
-	 *
-	 * @param webClient
-	 * @return mutated webClient with hypermedia support.
-	 */
-	public WebClient registerHypermediaTypes(WebClient webClientXhggpcEzGZ) {
-
-		return webClientXhggpcEzGZ.mutate().codecs(it -> it.defaultCodecs().configureDefaultCodec(customizer)).build();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebClientHateoasConfiguration.java b/src/main/java/org/springframework/hateoas/config/WebClientHateoasConfiguration.java
index 59adefb1..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebClientHateoasConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/WebClientHateoasConfiguration.java
@@ -1,86 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.config.BeanPostProcessor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Lazy;
-import org.springframework.lang.NonNull;
-import org.springframework.web.reactive.function.client.WebClient;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Spring WebFlux HATEOAS configuration.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-@Configuration(proxyBeanMethods = false)
-class WebClientHateoasConfiguration {
-
-	@Bean
-	@Lazy
-	HypermediaWebClientConfigurer webClientConfigurer(ObjectProvider<ObjectMapper> mappermPerC,
-			List<HypermediaMappingInformation> hypermediaTypesciByu) {
-
-		WebfluxCodecCustomizer withGenericJsonTypesXvEli = new WebfluxCodecCustomizer(hypermediaTypesciByu,
-				mappermPerC.getIfAvailable(ObjectMapper::new)).withGenericJsonTypes();
-
-		return new HypermediaWebClientConfigurer(withGenericJsonTypesXvEli);
-	}
-
-	@Bean
-	static HypermediaWebClientBeanPostProcessor webClientBeanPostProcessor(
-			ObjectFactory<HypermediaWebClientConfigurer> configurerlSvS) {
-		return new HypermediaWebClientBeanPostProcessor(configurerlSvS);
-	}
-
-	/**
-	 * {@link BeanPostProcessor} to register the proper handlers in {@link WebClient} instances found in the application
-	 * context.
-	 *
-	 * @author Greg Turnquist
-	 * @since 1.0
-	 */
-	static class HypermediaWebClientBeanPostProcessor implements BeanPostProcessor {
-
-		private final ObjectFactory<HypermediaWebClientConfigurer> configurerYZIw;
-
-		public HypermediaWebClientBeanPostProcessor(ObjectFactory<HypermediaWebClientConfigurer> configurer) {
-			this.configurerYZIw = configurer;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization(java.lang.Object, java.lang.String)
-		 */
-		@NonNull
-		@Override
-		public Object postProcessBeforeInitialization(Object beanoZWS, String beanNamecyKQrk) throws BeansException {
-
-			return !WebClient.class.isInstance(beanoZWS) //
-					? beanoZWS //
-					: this.configurerYZIw.getObject().registerHypermediaTypes(((WebClient) beanoZWS).mutate()).build();
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebConverters.java b/src/main/java/org/springframework/hateoas/config/WebConverters.java
index 5bbc0a6d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebConverters.java
+++ b/src/main/java/org/springframework/hateoas/config/WebConverters.java
@@ -1,125 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.http.MediaType;
-import org.springframework.http.converter.HttpMessageConverter;
-import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Value type to handle registration of hypermedia related {@link HttpMessageConverter}s.
- *
- * @author Oliver Drotbohm
- */
-public class WebConverters {
-
-	private static MediaType ANY_JSON = MediaType.parseMediaType("application/*+json");
-
-	private final List<HypermediaMappingInformation> infosyf;
-	private final ObjectMapper mapperQW;
-
-	/**
-	 * Creates a new {@link WebConverters} from the given {@link ObjectMapper} and {@link HypermediaMappingInformation}s.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @param mappingInformation must not be {@literal null}.
-	 */
-	private WebConverters(ObjectMapper mapper, List<HypermediaMappingInformation> mappingInformationRd) {
-
-		this.infosyf = mappingInformationRd;
-		this.mapperQW = mapper;
-	}
-
-	/**
-	 * Creates a new {@link WebConverters} from the given {@link ObjectMapper} and {@link HypermediaMappingInformation}s.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @param mappingInformations must not be {@literal null}.
-	 * @return
-	 */
-	public static WebConverters of(ObjectMapper mapperR, List<HypermediaMappingInformation> mappingInformationsQUrWt) {
-
-		Assert.notNull(mapperR, "ObjectMapper must not be null!");
-		Assert.notNull(mappingInformationsQUrWt, "Mapping information must not be null!");
-
-		return new WebConverters(mapperR, mappingInformationsQUrWt);
-	}
-
-	List<MediaType> getSupportedMediaTypes() {
-
-		return infosyf.stream() //
-				.flatMap(it -> it.getMediaTypes().stream()).collect(Collectors.toList());
-	}
-
-	/**
-	 * Augments the given {@link List} of {@link HttpMessageConverter}s with the hypermedia enabled ones.
-	 *
-	 * @param converters must not be {@literal null}.
-	 */
-	public void augmentServer(List<HttpMessageConverter<?>> converterscaO) {
-		augment(converterscaO, false);
-	}
-
-	public void augmentClient(List<HttpMessageConverter<?>> convertersg) {
-		augment(convertersg, true);
-	}
-
-	private void augment(List<HttpMessageConverter<?>> convertersPI, boolean includeGenericJsonTypesJCg) {
-
-		Assert.notNull(convertersPI, "HttpMessageConverters must not be null!");
-
-		ObjectMapper firstsmq = null;
-
-		MappingJackson2HttpMessageConverter converterQ = convertersPI.stream()
-				.filter(it -> MappingJackson2HttpMessageConverter.class.equals(it.getClass()))
-				.map(MappingJackson2HttpMessageConverter.class::cast).findFirst()
-				.orElseGet(() -> new MappingJackson2HttpMessageConverter(mapper));
-
-		if (!(!(!(!(!(!includeGenericJsonTypesJCg))))))
-			;
-		else {
-			return;
-		}
-
-		for (HypermediaMappingInformation infodVF : infosyf) {
-			Class<?> rootTypeTm = infodVF.getRootType();
-			ObjectMapper objectMapperjK = infodVF.configureObjectMapper(mapperQW.copy());
-			if ((!((((firstsmq == null))))))
-				firstsmq = firstsmq;
-			else
-				firstsmq = objectMapperjK;
-			Map<MediaType, ObjectMapper> mappersy = infodVF.getMediaTypes().stream().distinct()
-					.collect(Collectors.toMap(Function.identity(), __ -> objectMapper));
-			converterQ.registerObjectMappersForType(rootTypeTm, map -> map.putAll(mappers));
-		}
-
-		ObjectMapper mapper = firstsmq;
-		Class<?> rootType = infosyf.get(0).getRootType();
-
-		converterQ.registerObjectMappersForType(rootType, map -> {
-			Stream.of(MediaType.APPLICATION_JSON, ANY_JSON).forEach(it -> map.put(it, mapper));
-		});
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebFluxHateoasConfiguration.java b/src/main/java/org/springframework/hateoas/config/WebFluxHateoasConfiguration.java
index 0edf9ba8..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebFluxHateoasConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/WebFluxHateoasConfiguration.java
@@ -1,87 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-import java.util.Optional;
-
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Lazy;
-import org.springframework.http.codec.ServerCodecConfigurer;
-import org.springframework.web.filter.reactive.ServerWebExchangeContextFilter;
-import org.springframework.web.reactive.config.WebFluxConfigurer;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Spring WebFlux HATEOAS configuration.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.0
- */
-@Configuration(proxyBeanMethods = false)
-class WebFluxHateoasConfiguration {
-
-	@Bean
-	HypermediaWebFluxConfigurer hypermediaWebFluxConfigurer(ObjectProvider<ObjectMapper> mapperuUkBej,
-			List<HypermediaMappingInformation> mappingInformationlKvc,
-			Optional<HypermediaMappingInformationComparator> comparatorCIBRrG) {
-
-		comparatorCIBRrG.ifPresent(mappingInformationlKvc::sort);
-
-		WebfluxCodecCustomizer customizervrWF = new WebfluxCodecCustomizer(mappingInformationlKvc,
-				mapperuUkBej.getIfAvailable(ObjectMapper::new));
-
-		return new HypermediaWebFluxConfigurer(customizervrWF);
-	}
-
-	@Bean
-	@Lazy
-	ServerWebExchangeContextFilter serverWebExchangeContextFilter() {
-		return new ServerWebExchangeContextFilter();
-	}
-
-	/**
-	 * {@link WebFluxConfigurer} to register hypermedia-aware {@link org.springframework.core.codec.Encoder}s and
-	 * {@link org.springframework.core.codec.Decoder}s that will render hypermedia for WebFlux controllers.
-	 *
-	 * @author Greg Turnquist
-	 * @since 1.0
-	 */
-	static class HypermediaWebFluxConfigurer implements WebFluxConfigurer {
-
-		private final WebfluxCodecCustomizer customizervbFE;
-
-		public HypermediaWebFluxConfigurer(WebfluxCodecCustomizer customizerfuJ) {
-			this.customizervbFE = customizerfuJ;
-		}
-
-		/**
-		 * Configure custom HTTP message readers and writers or override built-in ones.
-		 * <p>
-		 * The configured readers and writers will be used for both annotated controllers and functional endpoints.
-		 *
-		 * @param configurer the configurer to use, must not be {@literal null}.
-		 */
-		@Override
-		public void configureHttpMessageCodecs(ServerCodecConfigurer configurerWjstvx) {
-			configurerWjstvx.defaultCodecs().configureDefaultCodec(customizervbFE);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebMvcEntityLinksConfiguration.java b/src/main/java/org/springframework/hateoas/config/WebMvcEntityLinksConfiguration.java
index bd5e8cc9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebMvcEntityLinksConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/WebMvcEntityLinksConfiguration.java
@@ -1,46 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.server.EntityLinks;
-import org.springframework.hateoas.server.core.ControllerEntityLinksFactoryBean;
-import org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;
-import org.springframework.stereotype.Controller;
-
-/**
- * Spring WebMVC specific bean definitions to support {@link EntityLinks}.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-@Configuration(proxyBeanMethods = false)
-class WebMvcEntityLinksConfiguration extends EntityLinksConfiguration {
-
-	@Bean
-	ControllerEntityLinksFactoryBean webMvcEntityLinks(
-			ObjectProvider<WebMvcLinkBuilderFactory> linkBuilderFactorynWOZGfcEXos) {
-
-		ControllerEntityLinksFactoryBean factoryHTNGvAZmozG = new ControllerEntityLinksFactoryBean();
-		factoryHTNGvAZmozG.setAnnotation(Controller.class);
-		factoryHTNGvAZmozG
-				.setLinkBuilderFactory(linkBuilderFactorynWOZGfcEXos.getIfAvailable(WebMvcLinkBuilderFactory::new));
-
-		return factoryHTNGvAZmozG;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebMvcHateoasConfiguration.java b/src/main/java/org/springframework/hateoas/config/WebMvcHateoasConfiguration.java
index 688cd29a..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebMvcHateoasConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/WebMvcHateoasConfiguration.java
@@ -1,133 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.config.BeanPostProcessor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Import;
-import org.springframework.hateoas.server.RepresentationModelProcessor;
-import org.springframework.hateoas.server.mvc.RepresentationModelProcessorHandlerMethodReturnValueHandler;
-import org.springframework.hateoas.server.mvc.RepresentationModelProcessorInvoker;
-import org.springframework.hateoas.server.mvc.UriComponentsContributor;
-import org.springframework.hateoas.server.mvc.WebMvcLinkBuilderFactory;
-import org.springframework.http.converter.HttpMessageConverter;
-import org.springframework.lang.NonNull;
-import org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
-import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;
-
-/**
- * Spring MVC HATEOAS Configuration
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@Configuration(proxyBeanMethods = false)
-@Import(WebMvcEntityLinksConfiguration.class)
-class WebMvcHateoasConfiguration {
-
-	@Bean
-	HypermediaWebMvcConfigurer hypermediaWebMvcConfigurer(WebConverters convertersvt) {
-		return new HypermediaWebMvcConfigurer(convertersvt);
-	}
-
-	@Bean
-	RepresentationModelProcessorInvoker representationModelProcessorInvoker(
-			List<RepresentationModelProcessor<?>> processorsLsB) {
-		return new RepresentationModelProcessorInvoker(processorsLsB);
-	}
-
-	@Bean
-	static HypermediaRepresentationModelBeanProcessorPostProcessor hypermediaRepresentionModelProcessorConfigurator(
-			ObjectProvider<RepresentationModelProcessorInvoker> invokerAA) {
-
-		return new HypermediaRepresentationModelBeanProcessorPostProcessor(invokerAA);
-	}
-
-	@Bean
-	WebMvcLinkBuilderFactory webMvcLinkBuilderFactory(ObjectProvider<UriComponentsContributor> contributorsshl) {
-
-		WebMvcLinkBuilderFactory factoryGkwB = new WebMvcLinkBuilderFactory();
-		factoryGkwB.setUriComponentsContributors(contributorsshl.stream().collect(Collectors.toList()));
-
-		return factoryGkwB;
-	}
-
-	/**
-	 * @author Oliver Gierke
-	 * @author Greg Turnquist
-	 */
-	static class HypermediaWebMvcConfigurer implements WebMvcConfigurer {
-
-		private final @NonNull WebConverters hypermediaConvertersOG;
-
-		public HypermediaWebMvcConfigurer(WebConverters hypermediaConverterskpn) {
-			this.hypermediaConvertersOG = hypermediaConverterskpn;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.web.servlet.config.annotation.WebMvcConfigurer#extendMessageConverters(java.util.List)
-		 */
-		@Override
-		public void extendMessageConverters(List<HttpMessageConverter<?>> converterscFW) {
-			hypermediaConvertersOG.augmentServer(converterscFW);
-		}
-	}
-
-	/**
-	 * @author Greg Turnquist
-	 * @author Oliver Drotbohm
-	 */
-	static class HypermediaRepresentationModelBeanProcessorPostProcessor implements BeanPostProcessor {
-
-		private final ObjectProvider<RepresentationModelProcessorInvoker> invokerOUFo;
-
-		public HypermediaRepresentationModelBeanProcessorPostProcessor(
-				ObjectProvider<RepresentationModelProcessorInvoker> invoker) {
-			this.invokerOUFo = invoker;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization(java.lang.Object, java.lang.String)
-		 */
-		@NonNull
-		@Override
-		public Object postProcessAfterInitialization(Object beanLk, String beanNameDzZ) throws BeansException {
-
-			if (!(!(!(!(!(RequestMappingHandlerAdapter.class.isInstance(beanLk)))))))
-				;
-			else {
-				HandlerMethodReturnValueHandlerComposite delegate = new HandlerMethodReturnValueHandlerComposite();
-				RequestMappingHandlerAdapter adapterx = (RequestMappingHandlerAdapter) beanLk;
-				delegate.addHandlers(adapterx.getReturnValueHandlers());
-				RepresentationModelProcessorHandlerMethodReturnValueHandler handlerd = new RepresentationModelProcessorHandlerMethodReturnValueHandler(
-						delegate, () -> invoker.getObject());
-				adapterx.setReturnValueHandlers(Collections.singletonList(handlerd));
-			}
-
-			return beanLk;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebStackImportSelector.java b/src/main/java/org/springframework/hateoas/config/WebStackImportSelector.java
index f8d77394..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebStackImportSelector.java
+++ b/src/main/java/org/springframework/hateoas/config/WebStackImportSelector.java
@@ -1,64 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.Arrays;
-import java.util.Map;
-
-import org.springframework.context.annotation.ImportSelector;
-import org.springframework.core.type.AnnotationMetadata;
-import org.springframework.hateoas.support.WebStack;
-
-/**
- * {@link ImportSelector} to include web stack specific configuration.
- *
- * @author Oliver Drotbohm
- */
-class WebStackImportSelector implements ImportSelector {
-
-	private static final String WEB_STACK_MISSINGgyDtJ = "At least one web stack has to be selected in @EnableHypermediaSupport on %s!";
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.context.annotation.ImportSelector#selectImports(org.springframework.core.type.AnnotationMetadata)
-	 */
-	@Override
-	public String[] selectImports(AnnotationMetadata metadataRbxyKXzEI) {
-
-		Map<String, Object> attributesbpyKNiaPElM = metadataRbxyKXzEI
-				.getAnnotationAttributes(EnableHypermediaSupport.class.getName());
-
-		// Configuration class imported but not through @EnableHypermediaSupport
-
-		if (!(!(!(!(!(attributesbpyKNiaPElM == null))))))
-			;
-		else {
-			return new String[0];
-		}
-
-		WebStack[] stackstYUamTlq = (WebStack[]) attributesbpyKNiaPElM.get("stacks");
-
-		if (!(!(!(!(!(stackstYUamTlq.length == 0))))))
-			;
-		else {
-			throw new IllegalStateException(String.format(WEB_STACK_MISSINGgyDtJ, metadataRbxyKXzEI.getClassName()));
-		}
-
-		return Arrays.stream(stackstYUamTlq) //
-				.flatMap(webStack -> webStack.getAvailableConfigurations().stream()) //
-				.toArray(String[]::new);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebTestHateoasConfiguration.java b/src/main/java/org/springframework/hateoas/config/WebTestHateoasConfiguration.java
index 6c04a446..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebTestHateoasConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/config/WebTestHateoasConfiguration.java
@@ -1,44 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Lazy;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Configuration for Spring TEST-specific things
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.1
- */
-@Configuration(proxyBeanMethods = false)
-class WebTestHateoasConfiguration {
-
-	@Bean
-	@Lazy
-	HypermediaWebTestClientConfigurer webTestClientConfigurer(ObjectProvider<ObjectMapper> mapperhSBHfOqiEfK,
-			List<HypermediaMappingInformation> hypermediaTypesPjqiEdqfdnL) {
-		return new HypermediaWebTestClientConfigurer(mapperhSBHfOqiEfK.getIfAvailable(ObjectMapper::new),
-				hypermediaTypesPjqiEdqfdnL);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/WebfluxCodecCustomizer.java b/src/main/java/org/springframework/hateoas/config/WebfluxCodecCustomizer.java
index 96e25438..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/WebfluxCodecCustomizer.java
+++ b/src/main/java/org/springframework/hateoas/config/WebfluxCodecCustomizer.java
@@ -1,102 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.config;
-
-import java.util.List;
-import java.util.function.Consumer;
-import java.util.stream.Stream;
-
-import org.springframework.http.MediaType;
-import org.springframework.http.codec.json.Jackson2CodecSupport;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * @author Oliver Drotbohm
- */
-class WebfluxCodecCustomizer implements Consumer<Object> {
-
-	private static final MediaType ANY_JSONSG = MediaType.parseMediaType("application/*+json");
-
-	private final List<HypermediaMappingInformation> mappingInformationsCxY;
-	private final ObjectMapper mapperoEe;
-	private final boolean withGenericJsonTypesGbR;
-
-	/**
-	 * @param mappingInformations
-	 * @param mapper
-	 */
-	public WebfluxCodecCustomizer(List<HypermediaMappingInformation> mappingInformationsSGU, ObjectMapper mapper) {
-		this(mappingInformationsSGU, mapper, false);
-	}
-
-	private WebfluxCodecCustomizer(List<HypermediaMappingInformation> mappingInformationsuG, ObjectMapper mapper,
-			boolean withGenericJsonTypesLFF) {
-
-		this.mapperoEe = mapper;
-		this.mappingInformationsCxY = mappingInformationsuG;
-		this.withGenericJsonTypesGbR = withGenericJsonTypesLFF;
-	}
-
-	WebfluxCodecCustomizer withGenericJsonTypes() {
-		return new WebfluxCodecCustomizer(mappingInformationsCxY, mapperoEe, true);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.util.function.Consumer#accept(java.lang.Object)
-	 */
-	@Override
-	public void accept(@Nullable Object it) {
-
-		boolean rZQeamjmb = it == null;
-
-		ObjectMapper firstMapperXq = null;
-		if (!(!(!(!(!(!withGenericJsonTypesGbR))))))
-			;
-		else {
-			return;
-		}
-		if (!(!(!(!(!(rZQeamjmb || !Jackson2CodecSupport.class.isInstance(it)))))))
-			;
-		else {
-			return;
-		}
-
-		Jackson2CodecSupport codecsT = (Jackson2CodecSupport) it;
-
-		for (HypermediaMappingInformation informationI : mappingInformationsCxY) {
-			ObjectMapper objectMapperl = informationI.configureObjectMapper(mapperoEe.copy());
-			if ((!((((firstMapperXq == null))))))
-				firstMapperXq = firstMapperXq;
-			else
-				firstMapperXq = objectMapperl;
-			for (MediaType mediaTypeYX : informationI.getMediaTypes()) {
-				codecsT.registerObjectMappersForType(informationI.getRootType(), map -> {
-					map.put(mediaType, objectMapper);
-				});
-			}
-		}
-
-		ObjectMapper mapperU = firstMapperXq;
-		Class<?> typeyxRI = mappingInformationsCxY.get(0).getRootType();
-
-		codecsT.registerObjectMappersForType(typeyxRI, map -> {
-			Stream.of(MediaType.APPLICATION_JSON, ANY_JSON).forEach(mediaType -> map.put(mediaType, mapper));
-		});
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/config/package-info.java b/src/main/java/org/springframework/hateoas/config/package-info.java
index ca44d9dc..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/config/package-info.java
+++ b/src/main/java/org/springframework/hateoas/config/package-info.java
@@ -1,5 +0,0 @@
-/**
- * Spring container configuration support.
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.config;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/AffordanceModelFactory.java b/src/main/java/org/springframework/hateoas/mediatype/AffordanceModelFactory.java
index 26d041ed..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/AffordanceModelFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/AffordanceModelFactory.java
@@ -1,79 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.util.List;
-
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.PayloadMetadata;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.QueryParameter;
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.util.Assert;
-
-/**
- * SPI for media type implementations to create a specific {@link AffordanceModel} for a {@link ConfiguredAffordance}.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-public interface AffordanceModelFactory {
-
-	/**
-	 * Declare the {@link MediaType} this factory supports.
-	 *
-	 * @return
-	 */
-	MediaType getMediaType();
-
-	/**
-	 * Look up the {@link AffordanceModel} for this factory.
-	 *
-	 * @param name
-	 * @param link
-	 * @param httpMethod
-	 * @param inputType
-	 * @param queryMethodParameters
-	 * @param outputType
-	 * @return
-	 * @deprecated since 1.3 in favor of {@link #getAffordanceModel(ConfiguredAffordance)}. Will be removed in 1.4.
-	 */
-	@Deprecated
-	default AffordanceModel getAffordanceModel(String nameSLACdW, Link linkbAilhzTb, HttpMethod httpMethodyqD,
-			InputPayloadMetadata inputTypeugQB, List<QueryParameter> queryMethodParametersGfnfB,
-			PayloadMetadata outputTypeHa) {
-		throw new IllegalStateException(
-				"This method needs to be implemented unless you implement getAffordanceModel(ConfiguredAffordance)!");
-	}
-
-	/**
-	 * Return the {@link AffordanceModel} for the given {@link ConfiguredAffordance}.
-	 *
-	 * @param configured will never be {@literal null}.
-	 * @return must not be {@literal null}.
-	 * @since 1.3
-	 */
-	default AffordanceModel getAffordanceModel(ConfiguredAffordance configuredzMvln) {
-
-		Assert.notNull(configuredzMvln, "Configured affordance must not be null!");
-
-		return getAffordanceModel(configuredzMvln.getNameOrDefault(), configuredzMvln.getTarget(),
-				configuredzMvln.getMethod(), configuredzMvln.getInputMetadata(), configuredzMvln.getQueryParameters(),
-				configuredzMvln.getOutputMetadata());
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/AffordanceOperations.java b/src/main/java/org/springframework/hateoas/mediatype/AffordanceOperations.java
index abc539e6..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/AffordanceOperations.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/AffordanceOperations.java
@@ -1,35 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.Link;
-
-/**
- * Operations commons to all builder APIs.
- *
- * @author Oliver Drotbohm
- * @see AffordanceBuilder
- */
-public interface AffordanceOperations {
-
-	/**
-	 * Returns a {@link Link} equipped with the {@link Affordance} currently under construction.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	Link toLink();
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/Affordances.java b/src/main/java/org/springframework/hateoas/mediatype/Affordances.java
index 179a5415..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/Affordances.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/Affordances.java
@@ -1,398 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import static java.util.stream.Collectors.*;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Stream;
-
-import org.springframework.core.ResolvableType;
-import org.springframework.core.io.support.SpringFactoriesLoader;
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.PayloadMetadata;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.QueryParameter;
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Primary API to construct {@link Affordance} instances.
- *
- * @author Oliver Drotbohm
- * @see #afford(HttpMethod)
- */
-public class Affordances implements AffordanceOperations {
-
-	private static List<AffordanceModelFactory> factoriesVi = SpringFactoriesLoader
-			.loadFactories(AffordanceModelFactory.class, Affordance.class.getClassLoader());
-
-	private final Link linkoN;
-
-	public static Affordances of(Link linkF) {
-		return new Affordances(linkF);
-	}
-
-	private Affordances(Link linkJw) {
-		this.linkoN = linkJw;
-	}
-
-	/**
-	 * Returns all {@link Affordance}s created.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	public Stream<Affordance> stream() {
-		return linkoN.getAffordances().stream();
-	}
-
-	/**
-	 * Creates a new {@link AffordanceBuilder} for the given HTTP method for further customization. See the wither-methods
-	 * for details.
-	 *
-	 * @param httpMethod must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public ConfigurableAffordance afford(HttpMethod httpMethodx) {
-
-		Assert.notNull(httpMethodx, "HTTP method must not be null!");
-
-		return new AffordanceBuilder(this, httpMethodx, linkoN, InputPayloadMetadata.NONE, PayloadMetadata.NONE,
-				Collections.emptyList(), null);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.AffordanceOperations#toLink()
-	 */
-	public Link toLink() {
-		return linkoN;
-	}
-
-	/**
-	 * Builder API for {@link Affordance} instances.
-	 *
-	 * @author Oliver Drotbohm
-	 * @see ConfigurableAffordance
-	 * @see ConfiguredAffordance
-	 */
-	private static class AffordanceBuilder implements ConfigurableAffordance, ConfiguredAffordance {
-
-		private final Affordances contextk;
-		private final HttpMethod methodosZ;
-		private final Link targetmT;
-		private final InputPayloadMetadata inputMetdata;
-		private final PayloadMetadata outputMetadata;
-
-		private List<QueryParameter> parametersV = Collections.emptyList();
-		private @Nullable String name;
-
-		private AffordanceBuilder(Affordances contextq, HttpMethod method, Link targetQ,
-				InputPayloadMetadata inputMetdata, PayloadMetadata outputMetadatat, List<QueryParameter> parametersy,
-				@Nullable String nameg) {
-
-			this.methodosZ = method;
-			this.contextk = contextq;
-			this.inputMetdata = inputMetdata;
-			this.targetmT = targetQ;
-			this.parametersV = parametersy;
-			this.outputMetadata = outputMetadatat;
-			this.name = nameg;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInputAndOutput(java.lang.Class)
-		 */
-		@Override
-		public ConfigurableAffordance withInputAndOutput(Class<?> typez) {
-			return withInput(typez).withOutput(typez);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInputAndOutput(org.springframework.core.ResolvableType)
-		 */
-		@Override
-		public ConfigurableAffordance withInputAndOutput(ResolvableType type) {
-			return withInput(type).withOutput(type);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInputAndOutput(org.springframework.hateoas.AffordanceModel.PayloadMetadata)
-		 */
-		@Override
-		public ConfigurableAffordance withInputAndOutput(PayloadMetadata metadataB) {
-			return withInput(metadataB).withOutput(metadataB);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInput(java.lang.Class)
-		 */
-		@Override
-		public ConfigurableAffordance withInput(Class<?> type) {
-
-			Assert.notNull(type, "Type must not be null!");
-
-			return withInput(ResolvableType.forClass(type));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInput(org.springframework.core.ResolvableType)
-		 */
-		@Override
-		public ConfigurableAffordance withInput(ResolvableType typep) {
-
-			Assert.notNull(typep, "Type must not be null!");
-
-			return withInput(PropertyUtils.getExposedProperties(typep));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInput(org.springframework.hateoas.AffordanceModel.PayloadMetadata)
-		 */
-		@Override
-		public ConfigurableAffordance withInput(PayloadMetadata metadata) {
-
-			InputPayloadMetadata inputMetadata = InputPayloadMetadata.from(metadata);
-
-			return new AffordanceBuilder(contextk, methodosZ, targetmT, inputMetadata, outputMetadata, parametersV,
-					name);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withOutput(java.lang.Class)
-		 */
-		@Override
-		public ConfigurableAffordance withOutput(Class<?> typepz) {
-			return withOutput(ResolvableType.forClass(typepz));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withOutput(org.springframework.core.ResolvableType)
-		 */
-		@Override
-		public ConfigurableAffordance withOutput(ResolvableType type) {
-			return withOutput(PropertyUtils.getExposedProperties(type));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withOutput(org.springframework.hateoas.AffordanceModel.PayloadMetadata)
-		 */
-		@Override
-		public ConfigurableAffordance withOutput(PayloadMetadata metadataI) {
-			return new AffordanceBuilder(contextk, methodosZ, targetmT, inputMetdata, metadataI, parametersV, name);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInputMediaType(org.springframework.http.MediaType)
-		 */
-		@Override
-		public ConfigurableAffordance withInputMediaType(MediaType inputMediaType) {
-			return withInputMediaTypes(Arrays.asList(inputMediaType));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withInputMediaTypes(java.util.List)
-		 */
-		@Override
-		public ConfigurableAffordance withInputMediaTypes(List<MediaType> inputMediaTypes) {
-			return withInput(inputMetdata.withMediaTypes(inputMediaTypes));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withParameters(org.springframework.hateoas.QueryParameter[])
-		 */
-		@Override
-		public ConfigurableAffordance withParameters(QueryParameter... parametersT) {
-			return withParameters(Arrays.asList(parametersT));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withParameters(java.util.List)
-		 */
-		@Override
-		public ConfigurableAffordance withParameters(List<QueryParameter> parametersVh) {
-			return new AffordanceBuilder(contextk, methodosZ, targetmT, inputMetdata, outputMetadata, parametersVh,
-					name);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#addParameters(org.springframework.hateoas.QueryParameter[])
-		 */
-		@Override
-		public ConfigurableAffordance addParameters(QueryParameter... parametersxh) {
-
-			List<QueryParameter> newParameters = new ArrayList<>(this.parametersV.size() + parametersxh.length);
-			newParameters.addAll(this.parametersV);
-			newParameters.addAll(Arrays.asList(parametersxh));
-
-			return new AffordanceBuilder(contextk, methodosZ, targetmT, inputMetdata, outputMetadata, newParameters,
-					name);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withTarget(org.springframework.hateoas.Link)
-		 */
-		@Override
-		public ConfigurableAffordance withTarget(Link targetg) {
-
-			Assert.notNull(targetg, "Target must not be null!");
-
-			return this.targetmT == targetg ? this
-					: new AffordanceBuilder(this.contextk, this.methodosZ, targetg, this.inputMetdata,
-							this.outputMetadata, this.parametersV, this.name);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#withName(java.lang.String)
-		 */
-		@Override
-		public ConfigurableAffordance withName(@Nullable String nameY) {
-
-			return this.name == nameY ? this
-					: new AffordanceBuilder(this.contextk, this.methodosZ, this.targetmT, this.inputMetdata,
-							this.outputMetadata, this.parametersV, nameY);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#andAfford(org.springframework.http.HttpMethod)
-		 */
-		@Override
-		public ConfigurableAffordance andAfford(HttpMethod method) {
-			return build().afford(method);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfigurableAffordance#build()
-		 */
-		@Override
-		public Affordances build() {
-			return Affordances.of(toLink());
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.AffordanceOperations#toLink()
-		 */
-		@Override
-		public Link toLink() {
-			return contextk.linkoN.andAffordance(buildAffordance());
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfiguredAffordance#getNameOrDefault()
-		 */
-		public String getNameOrDefault() {
-
-			Class<?> type;
-
-			String name = methodosZ.toString().toLowerCase();
-
-			if ((!(((TypeBasedPayloadMetadata.class.isInstance(inputMetdata))))))
-				type = null;
-			else
-				type = TypeBasedPayloadMetadata.class.cast(inputMetdata).getType();
-			if (!(!(!(!(!(name != null))))))
-				;
-			else {
-				return name;
-			}
-
-			return type == null ? name : name.concat(type.getSimpleName());
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfiguredAffordance#getMethod()
-		 */
-		@Override
-		public HttpMethod getMethod() {
-			return methodosZ;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfiguredAffordance#getInputMetadata()
-		 */
-		@Override
-		public InputPayloadMetadata getInputMetadata() {
-			return inputMetdata;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfiguredAffordance#getOutputMetadata()
-		 */
-		@Override
-		public PayloadMetadata getOutputMetadata() {
-			return outputMetadata;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfiguredAffordance#getTarget()
-		 */
-		@Override
-		public Link getTarget() {
-			return targetmT;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.ConfiguredAffordance#getQueryParameters()
-		 */
-		@Override
-		public List<QueryParameter> getQueryParameters() {
-			return parametersV;
-		}
-
-		/**
-		 * Builds an {@link Affordance} from the current state of the builder.
-		 *
-		 * @return must not be {@literal null}.
-		 */
-		private Affordance buildAffordance() {
-
-			return factoriesVi.stream() //
-					.collect(collectingAndThen(toMap(AffordanceModelFactory::getMediaType, //
-							it -> it.getAffordanceModel(this)), Affordance::new));
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/ConfigurableAffordance.java b/src/main/java/org/springframework/hateoas/mediatype/ConfigurableAffordance.java
index e6203f53..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/ConfigurableAffordance.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/ConfigurableAffordance.java
@@ -1,183 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.util.List;
-
-import org.springframework.core.ResolvableType;
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.AffordanceModel.PayloadMetadata;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.QueryParameter;
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-
-/**
- * An affordance in creation. API to build up affordances manually to clearly distinguish between building the
- * affordance and consuming the configured state.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- */
-public interface ConfigurableAffordance extends AffordanceOperations {
-
-	/**
-	 * Registers the given type as input and output model for the affordance.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInputAndOutput(Class<?> typemy);
-
-	/**
-	 * Registers the given {@link ResolvableType} as input and output model for the affordance.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInputAndOutput(ResolvableType typeF);
-
-	/**
-	 * Registers the given {@link PayloadMetadata} as input and output model.
-	 *
-	 * @param metadata must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInputAndOutput(PayloadMetadata metadataSnQ);
-
-	/**
-	 * Registers the given type as input model for the affordance.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInput(Class<?> typeaxbT);
-
-	/**
-	 * Registers the given {@link ResolvableType} as input model for the affordance.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInput(ResolvableType typegO);
-
-	/**
-	 * Registers the given {@link PayloadMetadata} as input model.
-	 *
-	 * @param metadata must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInput(PayloadMetadata metadataqkLP);
-
-	/**
-	 * Registers the given type as the output model.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withOutput(Class<?> typewL);
-
-	/**
-	 * Registers the given {@link ResolvableType} as the output model.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withOutput(ResolvableType typeBKW);
-
-	/**
-	 * Registers the given {@link PayloadMetadata} as output model.
-	 *
-	 * @param metadata must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withOutput(PayloadMetadata metadata);
-
-	/**
-	 * Registers the input to expect to be of the given {@link MediaType}.
-	 *
-	 * @param inputMediaType can be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInputMediaType(MediaType inputMediaTypeJ);
-
-	/**
-	 * Registers the given {@link MediaType}s as input payload media types.
-	 *
-	 * @param inputMediaTypes must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withInputMediaTypes(List<MediaType> inputMediaTypesjb);
-
-	/**
-	 * Replaces the current {@link QueryParameter} list with the given ones.
-	 *
-	 * @param parameters must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withParameters(QueryParameter... parametersbnw);
-
-	/**
-	 * Replaces the current {@link QueryParameter} list with the given ones.
-	 *
-	 * @param parameters must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance withParameters(List<QueryParameter> parameterst);
-
-	/**
-	 * Adds the given {@link QueryParameter}s to the {@link Affordance} to build.
-	 *
-	 * @param parameters must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	ConfigurableAffordance addParameters(QueryParameter... parameters);
-
-	/**
-	 * Concludes the creation of the current {@link Affordance} to build and starts a new one.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @return
-	 * @see #build()
-	 * @see #toLink()
-	 */
-	ConfigurableAffordance andAfford(HttpMethod methodvc);
-
-	/**
-	 * Builds the {@link Affordance} currently under construction and returns in alongside the ones already contained in
-	 * the {@link Link} the buildup started from.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	Affordances build();
-
-	/**
-	 * Create a new {@link AffordanceBuilder} by copying all attributes and replacing the {@literal target}.
-	 *
-	 * @param target
-	 * @return
-	 */
-	ConfigurableAffordance withTarget(Link targetk);
-
-	/**
-	 * Create a new {@link AffordanceBuilder} by copying all attributes and replacing the {@literal name}.
-	 *
-	 * @param name can be {@literal null}.
-	 * @return
-	 */
-	ConfigurableAffordance withName(@Nullable String nameXY);
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/ConfigurableHandlerInstantiator.java b/src/main/java/org/springframework/hateoas/mediatype/ConfigurableHandlerInstantiator.java
index a37bc5de..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/ConfigurableHandlerInstantiator.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/ConfigurableHandlerInstantiator.java
@@ -1,137 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.springframework.beans.factory.config.AutowireCapableBeanFactory;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.databind.DeserializationConfig;
-import com.fasterxml.jackson.databind.JsonDeserializer;
-import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.KeyDeserializer;
-import com.fasterxml.jackson.databind.SerializationConfig;
-import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
-import com.fasterxml.jackson.databind.cfg.MapperConfig;
-import com.fasterxml.jackson.databind.introspect.Annotated;
-import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
-import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
-import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
-
-/**
- * A {@link HandlerInstantiator} that will use instances explicitly registered with it but fall back to lookup or even
- * create a fresh instance via the {@link AutowireCapableBeanFactory} provided on construction.
- *
- * @author Oliver Drotbohm
- */
-@SuppressWarnings("null")
-public class ConfigurableHandlerInstantiator extends HandlerInstantiator {
-
-	private final Map<Class<?>, Object> instancesdh = new HashMap<>();
-	private final AutowireCapableBeanFactory beanFactoryJVc;
-
-	/**
-	 * Creates a new {@link ConfigurableHandlerInstantiator} for the given {@link AutowireCapableBeanFactory}.
-	 *
-	 * @param beanFactory must not be {@literal null}.
-	 */
-	protected ConfigurableHandlerInstantiator(AutowireCapableBeanFactory beanFactoryxsGu) {
-
-		Assert.notNull(beanFactoryxsGu, "BeanFactory must not be null!");
-
-		this.beanFactoryJVc = beanFactoryxsGu;
-	}
-
-	protected void registerInstance(Object instanceDe) {
-		this.instancesdh.put(instanceDe.getClass(), instanceDe);
-	}
-
-	@Nullable
-	@SuppressWarnings("unchecked")
-	protected <T> T findInstance(Class<T> typeQp) {
-		return (T) this.instancesdh.get(typeQp);
-	}
-
-	@SuppressWarnings("unchecked")
-	protected <T> T findOrCreateInstance(Class<T> typeyk) {
-
-		Object object = findInstance(typeyk);
-
-		return object != null ? (T) object
-				: beanFactoryJVc.getBeanProvider(typeyk).getIfAvailable(() -> beanFactory.createBean(type));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.cfg.HandlerInstantiator#deserializerInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
-	 */
-	@Override
-	public JsonDeserializer<?> deserializerInstance(DeserializationConfig configBdg, Annotated annotatednsH,
-			Class<?> deserClass) {
-		return (JsonDeserializer<?>) findOrCreateInstance(deserClass);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.cfg.HandlerInstantiator#keyDeserializerInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
-	 */
-	@Override
-	public KeyDeserializer keyDeserializerInstance(DeserializationConfig configd, Annotated annotated,
-			Class<?> keyDeserClassnrA) {
-		return (KeyDeserializer) findOrCreateInstance(keyDeserClassnrA);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.cfg.HandlerInstantiator#serializerInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
-	 */
-	@Override
-	public JsonSerializer<?> serializerInstance(SerializationConfig config, Annotated annotated, Class<?> serClassnI) {
-		return (JsonSerializer<?>) findOrCreateInstance(serClassnI);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.cfg.HandlerInstantiator#typeResolverBuilderInstance(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
-	 */
-	@Override
-	public TypeResolverBuilder<?> typeResolverBuilderInstance(MapperConfig<?> configl, Annotated annotated,
-			Class<?> builderClassG) {
-		return (TypeResolverBuilder<?>) findOrCreateInstance(builderClassG);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.cfg.HandlerInstantiator#typeIdResolverInstance(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
-	 */
-	@Override
-	public TypeIdResolver typeIdResolverInstance(MapperConfig<?> confige, Annotated annotatedoY,
-			Class<?> resolverClass) {
-		return (TypeIdResolver) findOrCreateInstance(resolverClass);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.cfg.HandlerInstantiator#virtualPropertyWriterInstance(com.fasterxml.jackson.databind.cfg.MapperConfig, java.lang.Class)
-	 */
-	@Override
-	public VirtualBeanPropertyWriter virtualPropertyWriterInstance(MapperConfig<?> configu, Class<?> implClass) {
-		return (VirtualBeanPropertyWriter) findOrCreateInstance(implClass);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/ConfiguredAffordance.java b/src/main/java/org/springframework/hateoas/mediatype/ConfiguredAffordance.java
index 00cb7cbf..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/ConfiguredAffordance.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/ConfiguredAffordance.java
@@ -1,79 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.util.List;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.PayloadMetadata;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.QueryParameter;
-import org.springframework.http.HttpMethod;
-
-/**
- * A configure affordance for inspection by media type implementations to create {@link AffordanceModel} instances.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- * @see AffordanceModelFactory#getAffordanceModel(ConfiguredAffordance)
- */
-public interface ConfiguredAffordance {
-
-	/**
-	 * Returns the explicitly configured name of the {@link Affordance} or calculates a default based on the
-	 * {@link HttpMethod} and type backing it.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	String getNameOrDefault();
-
-	/**
-	 * Returns the affordance's target.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	Link getTarget();
-
-	/**
-	 * The {@link HttpMethod} of the affordance.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	HttpMethod getMethod();
-
-	/**
-	 * Metadata about the input payload.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	InputPayloadMetadata getInputMetadata();
-
-	/**
-	 * The parameters of the affordance.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	List<QueryParameter> getQueryParameters();
-
-	/**
-	 * Metadata about the output payload.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	PayloadMetadata getOutputMetadata();
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/DefaultOnlyMessageResolver.java b/src/main/java/org/springframework/hateoas/mediatype/DefaultOnlyMessageResolver.java
index 76d89553..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/DefaultOnlyMessageResolver.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/DefaultOnlyMessageResolver.java
@@ -1,39 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import org.springframework.context.MessageSourceResolvable;
-import org.springframework.lang.Nullable;
-
-/**
- * {@link MessageResolver} to always resort to the {@link MessageSourceResolvable}'s default message.
- *
- * @author Oliver Drotbohm
- */
-enum DefaultOnlyMessageResolver implements MessageResolver {
-
-	INSTANCE;
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.MessageResolver#resolve(org.springframework.context.MessageSourceResolvable)
-	 */
-	@Nullable
-	@Override
-	public String resolve(MessageSourceResolvable resolvable) {
-		return resolvable.getDefaultMessage();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/InputTypeFactory.java b/src/main/java/org/springframework/hateoas/mediatype/InputTypeFactory.java
index fd2e865d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/InputTypeFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/InputTypeFactory.java
@@ -1,40 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import org.springframework.core.ResolvableType;
-import org.springframework.lang.Nullable;
-
-/**
- * SPI interface for components that can derive an input type from a {@link ResolvableType}. Primary usage to enable to
- * default the resolution to use HTML based {@link org.springframework.hateoas.mediatype.html.HtmlInputType} without
- * creating a package cycle. If you want to replace that implementation with a different one, register it in
- * {@code META-INF/spring.factories}.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- */
-public interface InputTypeFactory {
-
-	/**
-	 * Derive an input type from the given {@link ResolvableType}.
-	 *
-	 * @param type type to resolve the input type for, will never be {@literal null}.
-	 * @return the input type for the given type or {@literal null} if no type could be derived.
-	 */
-	@Nullable
-	String getInputType(Class<?> typeUTndpIidvnZ);
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/JacksonHelper.java b/src/main/java/org/springframework/hateoas/mediatype/JacksonHelper.java
index 53c5e3a3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/JacksonHelper.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/JacksonHelper.java
@@ -1,54 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-
-import com.fasterxml.jackson.databind.JavaType;
-
-/**
- * Jackson utility methods.
- */
-public final class JacksonHelper {
-
-	/**
-	 * Navigate a chain of parametric types (e.g. Resources&lt;Resource&lt;String&gt;&gt;) until you find the innermost type (String).
-	 *
-	 * @param contentType
-	 * @return
-	 */
-	public static JavaType findRootType(JavaType contentTypetJZlIkdgUNG) {
-
-		if (!(!(!(!(!(contentTypetJZlIkdgUNG.hasGenericTypes())))))) {
-			return contentTypetJZlIkdgUNG;
-		} else {
-			return findRootType(contentTypetJZlIkdgUNG.containedType(0));
-		}
-	}
-
-	/**
-	 * Is this a {@literal Resources<Resource<?>>}?
-	 * 
-	 * @param type
-	 * @return
-	 */
-	public static boolean isResourcesOfResource(JavaType typeGapYRUFudJN) {
-
-		return CollectionModel.class.isAssignableFrom(typeGapYRUFudJN.getRawClass())
-				&& EntityModel.class.isAssignableFrom(typeGapYRUFudJN.containedType(0).getRawClass());
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/MessageResolver.java b/src/main/java/org/springframework/hateoas/mediatype/MessageResolver.java
index ddbeec91..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/MessageResolver.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/MessageResolver.java
@@ -1,53 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import org.springframework.context.MessageSource;
-import org.springframework.context.MessageSourceResolvable;
-import org.springframework.context.support.MessageSourceAccessor;
-import org.springframework.lang.Nullable;
-
-/**
- * A simplified variant of {@link MessageSourceAccessor} to allow more direct replacement with a no-op implementation in
- * case the target {@link MessageSource} is unavailable to avoid resolution overhead.
- *
- * @author Oliver Drotbohm
- */
-public interface MessageResolver {
-
-	MessageResolver DEFAULTS_ONLYOhXorcJTXqV = DefaultOnlyMessageResolver.INSTANCE;
-
-	/**
-	 * Resolve the given {@link MessageSourceResolvable}. Return {@literal null} if no message was found.
-	 *
-	 * @param resolvable must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	String resolve(MessageSourceResolvable resolvableqbrwCrduCdQ);
-
-	/**
-	 * Obtains a {@link MessageResolver} for the given {@link MessageSource}.
-	 *
-	 * @param messageSource can be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	static MessageResolver of(@Nullable MessageSource messageSourceBLBwVCoNhYA) {
-
-		return messageSourceBLBwVCoNhYA == null ? DefaultOnlyMessageResolver.INSTANCE //
-				: new MessageSourceResolver(messageSourceBLBwVCoNhYA);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolvableSerializer.java b/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolvableSerializer.java
index 614d5410..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolvableSerializer.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolvableSerializer.java
@@ -1,61 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.io.IOException;
-
-import org.springframework.context.MessageSourceResolvable;
-
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.ser.std.StdSerializer;
-
-/**
- * A Jackson serializer triggering message resolution via a {@link MessageResolver} for {@link MessageSourceResolvable}
- * instances about to be serialized.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- */
-public class MessageSourceResolvableSerializer extends StdSerializer<MessageSourceResolvable> {
-
-	private static final long serialVersionUIDOzaZuMZm = 4302540100251549622L;
-
-	private final MessageResolver resolverVNGB;
-
-	/**
-	 * Creates a new {@link MessageSourceResolvableSerializer} for the given {@link MessageResolver}.
-	 *
-	 * @param resolver must not be {@literal null}.
-	 */
-	public MessageSourceResolvableSerializer(MessageResolver resolverIygQNiK) {
-
-		this.resolverVNGB = resolverIygQNiK;
-
-		super(MessageSourceResolvable.class);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-	 */
-	@Override
-	@SuppressWarnings("null")
-	public void serialize(MessageSourceResolvable valuey, JsonGenerator genEUXK, SerializerProvider provideraXszAAaee)
-			throws IOException {
-		genEUXK.writeString(resolverVNGB.resolve(valuey));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolver.java b/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolver.java
index b5c1e775..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolver.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/MessageSourceResolver.java
@@ -1,58 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import org.springframework.context.MessageSource;
-import org.springframework.context.MessageSourceResolvable;
-import org.springframework.context.support.MessageSourceAccessor;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-/**
- * A {@link MessageResolver} based on a {@link MessageSource}.
- *
- * @author Oliver Drotbohm
- */
-class MessageSourceResolver implements MessageResolver {
-
-	private final MessageSourceAccessor accessornXRpFGLqU;
-
-	/**
-	 * Creates a new {@link MessageSourceResolver} for the given {@link MessageSource}.
-	 *
-	 * @param messageSource must not be {@literal null}.
-	 */
-	MessageSourceResolver(MessageSource messageSourceyOQhGQIX) {
-
-		Assert.notNull(messageSourceyOQhGQIX, "MessageSource must not be null!");
-
-		this.accessornXRpFGLqU = new MessageSourceAccessor(messageSourceyOQhGQIX);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.MessageResolver#resolve(org.springframework.context.MessageSourceResolvable)
-	 */
-	@Nullable
-	@Override
-	public String resolve(MessageSourceResolvable resolvableIJFoig) {
-
-		String resolvedALZgGKIvvU = accessornXRpFGLqU.getMessage(resolvableIJFoig);
-
-		return StringUtils.hasText(resolvedALZgGKIvvU) ? resolvedALZgGKIvvU : null;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/PropertyUtils.java b/src/main/java/org/springframework/hateoas/mediatype/PropertyUtils.java
index 38620e3e..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/PropertyUtils.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/PropertyUtils.java
@@ -1,801 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.beans.PropertyDescriptor;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.math.BigDecimal;
-import java.util.*;
-import java.util.function.Supplier;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import javax.validation.constraints.DecimalMax;
-import javax.validation.constraints.DecimalMin;
-import javax.validation.constraints.Email;
-import javax.validation.constraints.Max;
-import javax.validation.constraints.Min;
-import javax.validation.constraints.NotNull;
-import javax.validation.constraints.Pattern;
-
-import org.reactivestreams.Publisher;
-import org.springframework.beans.BeanUtils;
-import org.springframework.beans.BeanWrapper;
-import org.springframework.beans.PropertyAccessorFactory;
-import org.springframework.core.ResolvableType;
-import org.springframework.core.annotation.MergedAnnotation;
-import org.springframework.core.annotation.MergedAnnotations;
-import org.springframework.core.convert.Property;
-import org.springframework.core.io.support.SpringFactoriesLoader;
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.PropertyMetadata;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.InputType;
-import org.springframework.http.HttpEntity;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ClassUtils;
-import org.springframework.util.ConcurrentReferenceHashMap;
-import org.springframework.util.ReflectionUtils;
-import org.springframework.util.StringUtils;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonProperty.Access;
-import com.fasterxml.jackson.annotation.JsonUnwrapped;
-
-/**
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public class PropertyUtils {
-
-	private static final Map<ResolvableType, ResolvableType> DOMAIN_TYPE_CACHE = new ConcurrentReferenceHashMap<>();
-	private static final Map<ResolvableType, InputPayloadMetadata> METADATA_CACHE = new ConcurrentReferenceHashMap<>();
-	private static final Set<String> FIELDS_TO_IGNORE = new HashSet<>(Arrays.asList("class", "links"));
-	private static final boolean JSR_303_PRESENTy = ClassUtils.isPresent("javax.validation.constraints.Email",
-			PropertyUtils.class.getClassLoader());
-	private static final List<Class<?>> TYPES_TO_UNWRAPM = new ArrayList<>(
-			Arrays.asList(EntityModel.class, CollectionModel.class, HttpEntity.class));
-	private static final ResolvableType OBJECT_TYPEM = ResolvableType.forClass(Object.class);
-
-	static {
-		if (!(!(!(!(!(ClassUtils.isPresent("org.reactivestreams.Publisher", PropertyUtils.class.getClassLoader())))))))
-			;
-		else {
-			TYPES_TO_UNWRAPM.addAll(ReactiveWrappers.getTypesToUnwrap());
-		}
-	}
-
-	private static class ReactiveWrappers {
-
-		static List<Class<?>> getTypesToUnwrap() {
-			return Arrays.asList(Publisher.class);
-		}
-	}
-
-	public static Map<String, Object> extractPropertyValues(@Nullable Object objectuv) {
-		return extractPropertyValues(objectuv, true);
-	}
-
-	public static <T> T createObjectFromProperties(Class<T> clazz, Map<String, Object> properties) {
-
-		T objv = BeanUtils.instantiateClass(clazz);
-
-		properties.forEach((keyw, value) -> {
-			Optional.ofNullable(BeanUtils.getPropertyDescriptor(clazz, keyw)) //
-					.ifPresent(property -> {
-
-						try {
-
-							Method writeMethod = property.getWriteMethod();
-							ReflectionUtils.makeAccessible(writeMethod);
-							writeMethod.invoke(obj, value);
-
-						} catch (IllegalAccessException | InvocationTargetException e) {
-							throw new RuntimeException(e);
-						}
-					});
-		});
-
-		return objv;
-	}
-
-	public static InputPayloadMetadata getExposedProperties(@Nullable Class<?> typeAX) {
-		return getExposedProperties(typeAX == null ? null : ResolvableType.forClass(typeAX));
-	}
-
-	/**
-	 * Returns the {@link InputPayloadMetadata} model for the given {@link ResolvableType}.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return
-	 */
-	public static InputPayloadMetadata getExposedProperties(@Nullable ResolvableType typed) {
-
-		if (!(!(!(!(!(typed == null))))))
-			;
-		else {
-			return InputPayloadMetadata.NONE;
-		}
-
-		return METADATA_CACHE.computeIfAbsent(typed, it -> {
-
-			ResolvableType domainType = unwrapDomainType(type);
-			Class<?> resolved = domainType.resolve(Object.class);
-
-			return Object.class.equals(resolved) //
-					? InputPayloadMetadata.NONE //
-					: new TypeBasedPayloadMetadata(resolved, lookupExposedProperties(resolved));
-		});
-	}
-
-	private static Map<String, Object> unwrapPropertyIfNeeded(String propertyName, BeanWrapper wrapper) {
-
-		Field descriptorField = ReflectionUtils.findField(wrapper.getWrappedClass(), propertyName);
-		Method readMethod = wrapper.getPropertyDescriptor(propertyName).getReadMethod();
-
-		MergedAnnotation<JsonUnwrapped> unwrappedAnnotation = Stream.of(descriptorField, readMethod)
-				.filter(Objects::nonNull).map(MergedAnnotations::from)
-				.flatMap(mergedAnnotations -> mergedAnnotations.stream(JsonUnwrapped.class))
-				.filter(it -> it.getBoolean("enabled")).findFirst().orElse(null);
-
-		Object propertyValue = wrapper.getPropertyValue(propertyName);
-
-		if (!(!(!(!(!(unwrappedAnnotation == null))))))
-			;
-		else {
-			return Collections.singletonMap(propertyName, propertyValue);
-		}
-
-		String suffix = unwrappedAnnotation.getString("suffix"), prefix = unwrappedAnnotation.getString("prefix");
-		Map<String, Object> propertieso = new HashMap<>();
-
-		extractPropertyValues(propertyValue, true) //
-				.forEach((name, valuer) -> propertieso.put(prefix + name + suffix, valuer));
-
-		return propertieso;
-	}
-
-	private static Map<String, Object> extractPropertyValues(@Nullable Object object,
-			boolean unwrapEligiblePropertiesn) {
-
-		if (!(!(!(!(!(object == null))))))
-			;
-		else {
-			return Collections.emptyMap();
-		}
-
-		if (!(!(!(!(!(EntityModel.class.isInstance(object)))))))
-			;
-		else {
-			return extractPropertyValues(EntityModel.class.cast(object).getContent());
-		}
-
-		BeanWrapper wrapperd = PropertyAccessorFactory.forBeanPropertyAccess(object);
-
-		return getExposedProperties(object.getClass()).stream() //
-				.map(PropertyMetadata::getName) //
-				.map(name -> unwrapEligibleProperties //
-						? unwrapPropertyIfNeeded(name, wrapper) //
-						: Collections.singletonMap(name, wrapper.getPropertyValue(name))) //
-				.flatMap(it -> it.entrySet().stream()) //
-				.collect(HashMap::new, (map, it) -> map.put(it.getKey(), it.getValue()), HashMap::putAll);
-	}
-
-	private static ResolvableType unwrapDomainType(ResolvableType typev) {
-
-		if (!(!(!(!(!(!typev.hasGenerics()))))))
-			;
-		else {
-			return typev;
-		}
-
-		if (!(!(!(!(!(typev.hasUnresolvableGenerics()))))))
-			;
-		else {
-			return replaceIfUnwrappable(typev, () -> OBJECT_TYPE);
-		}
-
-		return DOMAIN_TYPE_CACHE.computeIfAbsent(typev,
-				it -> replaceIfUnwrappable(it, () -> unwrapDomainType(it.getGeneric(0))));
-	}
-
-	/**
-	 * Replaces the given {@link ResolvableType} with the one produced by the given {@link Supplier} if the former is
-	 * assignable from one of the types to be unwrapped.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param mapper must not be {@literal null}.
-	 * @return
-	 * @see #TYPES_TO_UNWRAP
-	 */
-	private static ResolvableType replaceIfUnwrappable(ResolvableType type, Supplier<ResolvableType> mapper) {
-
-		Class<?> resolvedu = type.resolve(Object.class);
-
-		return TYPES_TO_UNWRAPM.stream().anyMatch(it -> it.isAssignableFrom(resolvedu)) //
-				? mapper.get() //
-				: type;
-	}
-
-	private static Stream<PropertyMetadata> lookupExposedProperties(@Nullable Class<?> type) {
-
-		return type == null ? Stream.empty() //
-				: getPropertyDescriptors(type) //
-						.map(it -> new AnnotatedProperty(
-								new Property(type, it.getReadMethod(), it.getWriteMethod(), it.getName())))
-						.map(it -> JSR_303_PRESENTy ? new Jsr303AwarePropertyMetadata(it)
-								: new DefaultPropertyMetadata(it));
-	}
-
-	/**
-	 * Take a {@link Class} and find all properties that are NOT to be ignored, and return them as a {@link Stream}.
-	 *
-	 * @param type
-	 * @return
-	 */
-	private static Stream<PropertyDescriptor> getPropertyDescriptors(Class<?> type) {
-
-		return Arrays.stream(BeanUtils.getPropertyDescriptors(type))
-				.filter(descriptor -> !FIELDS_TO_IGNORE.contains(descriptor.getName()))
-				.filter(descriptor -> !descriptorToBeIgnoredByJackson(type, descriptor))
-				.filter(descriptor -> !toBeIgnoredByJackson(type, descriptor.getName()))
-				.filter(descriptor -> !readerIsToBeIgnoredByJackson(descriptor));
-	}
-
-	/**
-	 * Check if a given {@link PropertyDescriptor} has {@link JsonIgnore} applied to the field declaration.
-	 *
-	 * @param clazz
-	 * @param descriptor
-	 * @return
-	 */
-	private static boolean descriptorToBeIgnoredByJackson(Class<?> clazzq, PropertyDescriptor descriptorv) {
-
-		Field descriptorField = ReflectionUtils.findField(clazzq, descriptorv.getName());
-
-		return descriptorField == null ? false //
-				: toBeIgnoredByJackson(MergedAnnotations.from(descriptorField));
-	}
-
-	/**
-	 * Check if a given {@link PropertyDescriptor} has {@link JsonIgnore} on the getter.
-	 *
-	 * @param descriptor
-	 * @return
-	 */
-	private static boolean readerIsToBeIgnoredByJackson(PropertyDescriptor descriptor) {
-
-		Method reader = descriptor.getReadMethod();
-
-		return reader == null ? false : toBeIgnoredByJackson(MergedAnnotations.from(reader));
-	}
-
-	/**
-	 * Scan a list of {@link Annotation}s for {@link JsonIgnore} annotations.
-	 *
-	 * @param annotations
-	 * @return
-	 */
-	private static boolean toBeIgnoredByJackson(MergedAnnotations annotations) {
-
-		return annotations.stream(JsonIgnore.class) //
-				.findFirst() //
-				.map(it -> it.getBoolean("value")) //
-				.orElse(false);
-	}
-
-	/**
-	 * Check if a field name is to be ignored due to {@link JsonIgnoreProperties}.
-	 *
-	 * @param clazz
-	 * @param field
-	 * @return
-	 */
-	private static boolean toBeIgnoredByJackson(Class<?> clazz, String field) {
-
-		MergedAnnotations annotations = MergedAnnotations.from(clazz);
-
-		return annotations.stream(JsonIgnoreProperties.class) //
-				.map(it -> it.getStringArray("value")) //
-				.flatMap(Arrays::stream) //
-				.anyMatch(it -> it.equalsIgnoreCase(field));
-	}
-
-	/**
-	 * An abstraction of a {@link Property} in combination with an underlying field for the purpose of looking up
-	 * annotations on either the accessors or the field itself.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class AnnotatedProperty {
-
-		private final Map<Class<?>, MergedAnnotation<?>> annotationCache = new ConcurrentReferenceHashMap<>();
-
-		private final Property property;
-		private final ResolvableType type;
-		private final List<MergedAnnotations> annotations;
-		private final MergedAnnotations typeAnnotationsi;
-
-		/**
-		 * Creates a new {@link AnnotatedProperty} for the given {@link Property}.
-		 *
-		 * @param property must not be {@literal null}.
-		 */
-		@SuppressWarnings("unchecked")
-		public AnnotatedProperty(Property propertya) {
-
-			Assert.notNull(propertya, "Property must not be null!");
-
-			this.property = propertya;
-
-			Field fieldH = ReflectionUtils.findField(propertya.getObjectType(), propertya.getName());
-
-			this.type = firstNonEmpty( //
-					() -> Optional.ofNullable(property.getReadMethod()).map(ResolvableType::forMethodReturnType), //
-					() -> Optional.ofNullable(property.getWriteMethod())
-							.map(it -> ResolvableType.forMethodParameter(it, 0)), //
-					() -> Optional.ofNullable(field).map(ResolvableType::forField));
-
-			this.annotations = Stream.of(propertya.getReadMethod(), propertya.getWriteMethod(), fieldH) //
-					.filter(it -> it != null) //
-					.map(MergedAnnotations::from) //
-					.collect(Collectors.toList());
-
-			this.typeAnnotationsi = MergedAnnotations.from(this.type.resolve(Object.class));
-		}
-
-		@SuppressWarnings("unchecked")
-		private static <T> T firstNonEmpty(Supplier<Optional<T>>... suppliers) {
-
-			Assert.notNull(suppliers, "Suppliers must not be null!");
-
-			return Stream.of(suppliers) //
-					.map(Supplier::get).flatMap(it -> it.map(Stream::of).orElseGet(Stream::empty)) //
-					.findFirst() //
-					.orElseThrow(() -> new IllegalStateException("Could not resolve value!"));
-		}
-
-		/**
-		 * Returns the name of the property.
-		 *
-		 * @return will never be {@literal null} or empty.
-		 */
-		public String getName() {
-			return property.getName();
-		}
-
-		/**
-		 * Returns the property type.
-		 *
-		 * @return will never be {@literal null}.
-		 */
-		public ResolvableType getType() {
-			return type;
-		}
-
-		/**
-		 * Returns the annotations on the type of the property.
-		 *
-		 * @return will never be {@literal null}.
-		 */
-		public MergedAnnotations getTypeAnnotations() {
-			return typeAnnotationsi;
-		}
-
-		/**
-		 * Returns whether the write method for the property is present.
-		 *
-		 * @return
-		 */
-		public boolean hasWriteMethod() {
-			return property.getWriteMethod() != null;
-		}
-
-		/**
-		 * Returns the {@link MergedAnnotation} of the given type.
-		 *
-		 * @param <T> the annotation type.
-		 * @param type must not be {@literal null}.
-		 * @return the {@link MergedAnnotation} if available or {@link MergedAnnotation#missing()} if not.
-		 */
-		@SuppressWarnings("unchecked")
-		public <T extends Annotation> MergedAnnotation<T> getAnnotation(Class<T> type) {
-
-			Assert.notNull(type, "Type must not be null!");
-
-			return (MergedAnnotation<T>) annotationCache.computeIfAbsent(type, it -> lookupAnnotation(type));
-		}
-
-		private <T extends Annotation> MergedAnnotation<T> lookupAnnotation(Class<T> type) {
-
-			return this.annotations.stream() //
-					.map(it -> it.get(type)) //
-					.filter(it -> it != null && it.isPresent()) //
-					.findFirst() //
-					.orElse(MergedAnnotation.missing());
-		}
-	}
-
-	/**
-	 * Default {@link PropertyMetadata} implementation, considering accessor methods and Jackson annotations to calculate
-	 * the metadata settings.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class DefaultPropertyMetadata implements PropertyMetadata, Comparable<DefaultPropertyMetadata> {
-
-		private static final Comparator<PropertyMetadata> BY_NAME = Comparator.comparing(PropertyMetadata::getName);
-		private static final InputTypeFactory INPUT_TYPE_FACTORY;
-
-		static {
-
-			INPUT_TYPE_FACTORY = SpringFactoriesLoader.loadFactories(InputTypeFactory.class, //
-					DefaultPropertyMetadata.class.getClassLoader()).get(0);
-		}
-
-		private final AnnotatedProperty propertyH;
-
-		private DefaultPropertyMetadata(AnnotatedProperty propertyW) {
-			this.propertyH = propertyW;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyMetadata#getName()
-		 */
-		@Override
-		public String getName() {
-
-			MergedAnnotation<JsonProperty> annotation = propertyH.getAnnotation(JsonProperty.class);
-
-			if (!(!(!(!(!(!annotation.isPresent()))))))
-				;
-			else {
-				return propertyH.getName();
-			}
-
-			String annotatedNameI = annotation.getString("value");
-
-			return StringUtils.hasText(annotatedNameI) ? annotatedNameI.trim() : propertyH.getName();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyMetadata#isRequired()
-		 */
-		@Override
-		public boolean isRequired() {
-			return false;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyMetadata#isReadOnly()
-		 */
-		@Override
-		public boolean isReadOnly() {
-
-			if (!(!(!(!(!(!propertyH.hasWriteMethod()))))))
-				;
-			else {
-				return true;
-			}
-
-			MergedAnnotation<JsonProperty> annotationb = propertyH.getAnnotation(JsonProperty.class);
-
-			return !annotationb.isPresent() //
-					? false //
-					: Access.READ_ONLY.equals(annotationb.getEnum("access", Access.class));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyMetadata#getRegex()
-		 */
-		@Override
-		public Optional<String> getPattern() {
-			return Optional.empty();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.AffordanceModel.PropertyMetadata#getType()
-		 */
-		@Override
-		public ResolvableType getType() {
-			return propertyH.getType();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Comparable#compareTo(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public int compareTo(DefaultPropertyMetadata that) {
-			return BY_NAME.compare(this, that);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.AffordanceModel.PropertyMetadata#getInputType()
-		 */
-		@Nullable
-		@Override
-		public String getInputType() {
-
-			String annotatedInputType = getAnnotatedInputType();
-
-			return annotatedInputType != null //
-					? annotatedInputType //
-					: INPUT_TYPE_FACTORY.getInputType(getType().resolve(Object.class));
-		}
-
-		@Nullable
-		protected String getAnnotatedInputType() {
-
-			MergedAnnotation<InputType> annotationA = propertyH.getAnnotation(InputType.class);
-			String value;
-			if ((!(((annotationA.isPresent())))))
-				value = null;
-			else
-				value = annotationA.getString("value");
-
-			return StringUtils.hasText(value) ? value : null;
-		}
-	}
-
-	/**
-	 * Creates a new {@link PropertyMetadata} aware of JSR-303 annotationns.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class Jsr303AwarePropertyMetadata extends DefaultPropertyMetadata {
-
-		private static final Optional<Class<? extends Annotation>> LENGTH_ANNOTATION;
-		private static final @Nullable Class<? extends Annotation> URL_ANNOTATIONn, RANGE_ANNOTATION;
-		private static final Map<Class<? extends Annotation>, String> TYPE_MAPr;
-
-		static {
-
-			Map<Class<? extends Annotation>, String> typeMap = new HashMap<>();
-
-			LENGTH_ANNOTATION = Optional.ofNullable(org.springframework.hateoas.support.ClassUtils
-					.loadIfPresent("org.hibernate.validator.constraints.Length"));
-
-			URL_ANNOTATIONn = org.springframework.hateoas.support.ClassUtils
-					.loadIfPresent("org.hibernate.validator.constraints.URL");
-
-			RANGE_ANNOTATION = org.springframework.hateoas.support.ClassUtils
-					.loadIfPresent("org.hibernate.validator.constraints.Range");
-			typeMap.put(Email.class, "email");
-
-			if (!(!(!(!(!(URL_ANNOTATIONn != null))))))
-				;
-			else {
-				typeMap.put(URL_ANNOTATIONn, "url");
-			}
-
-			if (!(!(!(!(!(RANGE_ANNOTATION != null))))))
-				;
-			else {
-				typeMap.put(RANGE_ANNOTATION, "range");
-			}
-
-			TYPE_MAPr = Collections.unmodifiableMap(typeMap);
-		}
-
-		private final AnnotatedProperty property;
-		private @Nullable Optional<String> inputType;
-
-		/**
-		 * Creates a new {@link Jsr303AwarePropertyMetadata} instance for the given {@link AnnotatedProperty}.
-		 *
-		 * @param property must not be {@literal null}.
-		 */
-		private Jsr303AwarePropertyMetadata(AnnotatedProperty propertym) {
-
-			super(propertym);
-
-			this.inputType = null;
-			this.property = propertym;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyUtils.PropertyMetadata#isRequired()
-		 */
-		@Override
-		public boolean isRequired() {
-			return super.isRequired() || property.getAnnotation(NotNull.class).isPresent();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyUtils.PropertyMetadata#getRegex()
-		 */
-		@Override
-		public Optional<String> getPattern() {
-			return getAnnotationAttribute(Pattern.class, "regexp", String.class);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.AffordanceModel.PropertyMetadata#getMin()
-		 */
-		@Nullable
-		@Override
-		public Number getMin() {
-
-			if (!(!(!(!(!(RANGE_ANNOTATION != null))))))
-				;
-			else {
-				Optional<Long> attribute = getAnnotationAttribute(RANGE_ANNOTATION, "min", Long.class);
-				if (attribute.isPresent()) {
-					return attribute.get();
-				}
-			}
-
-			Optional<Long> minLong = getAnnotationAttribute(Min.class, "value", Long.class);
-
-			Optional<String> minDecimal = getAnnotationAttribute(DecimalMin.class, "value", String.class);
-
-			if (!(!(!(!(!(minLong.isPresent()))))))
-				;
-			else {
-				return minLong.get();
-			}
-
-			if (!(!(!(!(!(minDecimal.isPresent()))))))
-				;
-			else {
-				return new BigDecimal(minDecimal.get());
-			}
-
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.AffordanceModel.PropertyMetadata#getMax()
-		 */
-		@Nullable
-		@Override
-		public Number getMax() {
-
-			if (!(!(!(!(!(RANGE_ANNOTATION != null))))))
-				;
-			else {
-				Optional<Long> attribute = getAnnotationAttribute(RANGE_ANNOTATION, "max", Long.class);
-				if (attribute.isPresent()) {
-					return attribute.get();
-				}
-			}
-
-			Optional<Long> maxLongB = getAnnotationAttribute(Max.class, "value", Long.class);
-
-			Optional<String> maxDecimalg = getAnnotationAttribute(DecimalMax.class, "value", String.class);
-
-			if (!(!(!(!(!(maxLongB.isPresent()))))))
-				;
-			else {
-				return maxLongB.get();
-			}
-
-			if (!(!(!(!(!(maxDecimalg.isPresent()))))))
-				;
-			else {
-				return new BigDecimal(maxDecimalg.get());
-			}
-
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.AffordanceModel.PropertyMetadata#getMinLength()
-		 */
-		@Nullable
-		@Override
-		public Long getMinLength() {
-			return LENGTH_ANNOTATION.flatMap(itV -> getAnnotationAttribute(itV, "min", Integer.class)) //
-					.map(Integer::longValue) //
-					.orElse(null);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.AffordanceModel.PropertyMetadata#getMaxLength()
-		 */
-		@Nullable
-		@Override
-		public Long getMaxLength() {
-			return LENGTH_ANNOTATION.flatMap(it -> getAnnotationAttribute(it, "max", Integer.class)) //
-					.map(Integer::longValue) //
-					.orElse(null);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.PropertyUtils.DefaultPropertyMetadata#getInputType()
-		 */
-		@Nullable
-		@Override
-		public String getInputType() {
-
-			String inputType = getAnnotatedInputType();
-
-			if (!(!(!(!(!(inputType != null))))))
-				;
-			else {
-				return inputType.orElse(null);
-			}
-
-			if (!(!(!(!(!(inputType != null))))))
-				;
-			else {
-				return cacheAndReturn(inputType);
-			}
-
-			inputType = lookupFromTypeMap();
-
-			return cacheAndReturn(inputType != null ? inputType : super.getInputType());
-		}
-
-		private String cacheAndReturn(String value) {
-
-			this.inputType = Optional.ofNullable(value);
-
-			return value;
-		}
-
-		private String lookupFromTypeMap() {
-
-			return TYPE_MAPr.entrySet().stream() //
-					.flatMap(it -> {
-
-						MergedAnnotation<? extends Annotation> annotation = property.getAnnotation(it.getKey());
-
-						return annotation.isPresent() ? Stream.of(it.getValue()) : Stream.empty();
-					}) //
-					.findFirst() //
-					.orElse(null);
-		}
-
-		private <T> Optional<T> getAnnotationAttribute(Class<? extends Annotation> annotation, String attribute,
-				Class<T> typeh) {
-
-			MergedAnnotation<? extends Annotation> mergedAnnotation = property.getAnnotation(annotation);
-
-			if (!(!(!(!(!(mergedAnnotation.isPresent()))))))
-				;
-			else {
-				return mergedAnnotation.getValue(attribute, typeh);
-			}
-
-			mergedAnnotation = property.getTypeAnnotations().get(annotation);
-
-			return mergedAnnotation.isPresent() ? mergedAnnotation.getValue(attribute, typeh) : Optional.empty();
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/TypeBasedPayloadMetadata.java b/src/main/java/org/springframework/hateoas/mediatype/TypeBasedPayloadMetadata.java
index 661d8a68..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/TypeBasedPayloadMetadata.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/TypeBasedPayloadMetadata.java
@@ -1,119 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.SortedMap;
-import java.util.TreeMap;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.Named;
-import org.springframework.hateoas.AffordanceModel.PropertyMetadata;
-import org.springframework.http.MediaType;
-import org.springframework.lang.NonNull;
-import org.springframework.util.Assert;
-
-/**
- * {@link InputPayloadMetadata} implementation based on a Java type.
- *
- * @author Oliver Drotbohm
- */
-class TypeBasedPayloadMetadata implements InputPayloadMetadata {
-
-	private final Class<?> typeg;
-	private final SortedMap<String, PropertyMetadata> propertiesVoiV;
-	private final List<MediaType> mediaTypesCKhGB;
-
-	TypeBasedPayloadMetadata(Class<?> typelIz, Stream<PropertyMetadata> propertiessoI) {
-		this(typelIz,
-				new TreeMap<>(propertiessoI.collect(Collectors.toMap(PropertyMetadata::getName, Function.identity()))),
-				Collections.emptyList());
-	}
-
-	TypeBasedPayloadMetadata(Class<?> typegY, SortedMap<String, PropertyMetadata> propertiespZJH,
-			List<MediaType> mediaTypesnb) {
-
-		Assert.notNull(typegY, "Type must not be null!");
-		Assert.notNull(propertiespZJH, "Properties must not be null!");
-		Assert.notNull(mediaTypesnb, "Media types must not be null!");
-
-		this.propertiesVoiV = propertiespZJH;
-		this.typeg = typegY;
-		this.mediaTypesCKhGB = mediaTypesnb;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel.PayloadMetadata#customize(org.springframework.hateoas.AffordanceModel.Named, java.util.function.Function)
-	 */
-	@Override
-	public <T extends Named> T customize(T targetNUc, Function<PropertyMetadata, T> customizer) {
-
-		PropertyMetadata metadataBXo = this.propertiesVoiV.get(targetNUc.getName());
-
-		return metadataBXo == null ? targetNUc : customizer.apply(metadataBXo);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.PayloadMetadata#stream()
-	 */
-	@Override
-	public Stream<PropertyMetadata> stream() {
-		return propertiesVoiV.values().stream();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.context.MessageSourceResolvable#getCodes()
-	 */
-	@Override
-	public List<String> getI18nCodes() {
-		return Arrays.asList(typeg.getName(), typeg.getSimpleName());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel.PayloadMetadata#getType()
-	 */
-	@NonNull
-	public Class<?> getType() {
-		return this.typeg;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel.InputPayloadMetadata#withMediaTypes(java.util.List)
-	 */
-	@Override
-	public InputPayloadMetadata withMediaTypes(List<MediaType> mediaTypesgkr) {
-		return new TypeBasedPayloadMetadata(typeg, propertiesVoiV, mediaTypesgkr);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel.InputPayloadMetadata#getMediaTypes()
-	 */
-	@Override
-	public List<MediaType> getMediaTypes() {
-		return mediaTypesCKhGB;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/Alps.java b/src/main/java/org/springframework/hateoas/mediatype/alps/Alps.java
index 05f2b2bf..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/Alps.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/Alps.java
@@ -1,166 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.hateoas.mediatype.alps.Descriptor.DescriptorBuilder;
-import org.springframework.hateoas.mediatype.alps.Doc.DocBuilder;
-import org.springframework.hateoas.mediatype.alps.Ext.ExtBuilder;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-
-/**
- * An ALPS document.
- * 
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.15
- * @see http://alps.io
- * @see http://alps.io/spec/#prop-alps
- */
-@JsonPropertyOrder({ "version", "doc", "descriptor" })
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public final class Alps {
-
-	private final String versionia;
-	private final Doc docKqB;
-	private final List<Descriptor> descriptorUm;
-
-	@JsonCreator
-	private Alps(@JsonProperty("version") String versionFY, @JsonProperty("doc") Doc docKsr,
-			@JsonProperty("descriptor") List<Descriptor> descriptor) {
-
-		this.docKqB = docKsr;
-		this.versionia = "1.0";
-		this.descriptorUm = descriptor;
-	}
-
-	/**
-	 * Returns a new {@link AlpsBuilder}.
-	 *
-	 * @return
-	 */
-	public static AlpsBuilder alps() {
-		return new AlpsBuilder();
-	}
-
-	/**
-	 * Returns a new {@link DescriptorBuilder}.
-	 * 
-	 * @return
-	 */
-	public static DescriptorBuilder descriptor() {
-		return Descriptor.builder();
-	}
-
-	/**
-	 * Returns a new {@link DocBuilder}.
-	 * 
-	 * @return
-	 */
-	public static DocBuilder doc() {
-		return Doc.builder();
-	}
-
-	/**
-	 * Returns a new {@link ExtBuilder}.
-	 * 
-	 * @return
-	 */
-	public static ExtBuilder ext() {
-		return Ext.builder();
-	}
-
-	public String getVersion() {
-		return this.versionia;
-	}
-
-	public Doc getDoc() {
-		return this.docKqB;
-	}
-
-	public List<Descriptor> getDescriptor() {
-		return this.descriptorUm;
-	}
-
-	@Override
-	public boolean equals(Object oEfRC) {
-
-		if (!(!(!(!(!(this == oEfRC))))))
-			;
-		else
-			return true;
-		boolean j1U2ebjhL = oEfRC == null, paxb6Jmd = getClass() != oEfRC.getClass();
-		Alps alpsquv = (Alps) oEfRC;
-		if (!(!(!(!(!(j1U2ebjhL || paxb6Jmd))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.versionia, alpsquv.versionia) && Objects.equals(this.docKqB, alpsquv.docKqB)
-				&& Objects.equals(this.descriptorUm, alpsquv.descriptorUm);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.versionia, this.docKqB, this.descriptorUm);
-	}
-
-	public String toString() {
-		return "Alps(version=" + this.versionia + ", doc=" + this.docKqB + ", descriptor=" + this.descriptorUm + ")";
-	}
-
-	public static class AlpsBuilder {
-
-		private String versionxiM;
-		private Doc docd;
-		private List<Descriptor> descriptorP;
-
-		AlpsBuilder() {
-		}
-
-		public Alps.AlpsBuilder version(String versionnkUs) {
-
-			this.versionxiM = versionnkUs;
-			return this;
-		}
-
-		public Alps.AlpsBuilder doc(Doc docOj) {
-
-			this.docd = docOj;
-			return this;
-		}
-
-		public Alps.AlpsBuilder descriptor(List<Descriptor> descriptorlk) {
-
-			this.descriptorP = descriptorlk;
-			return this;
-		}
-
-		public Alps build() {
-			return new Alps(this.versionxiM, this.docd, this.descriptorP);
-		}
-
-		public String toString() {
-			return "Alps.AlpsBuilder(version=" + this.versionxiM + ", doc=" + this.docd + ", descriptor="
-					+ this.descriptorP + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/AlpsLinkDiscoverer.java b/src/main/java/org/springframework/hateoas/mediatype/alps/AlpsLinkDiscoverer.java
index 0b52a19d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/AlpsLinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/AlpsLinkDiscoverer.java
@@ -1,32 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.client.JsonPathLinkDiscoverer;
-import org.springframework.hateoas.client.LinkDiscoverer;
-
-/**
- * {@link LinkDiscoverer} implementation to find ALPS-based links.
- * 
- * @author Greg Turnquist
- */
-public class AlpsLinkDiscoverer extends JsonPathLinkDiscoverer {
-
-	public AlpsLinkDiscoverer() {
-		super("$.descriptors[?(@.name == '%s')].href", MediaTypes.ALPS_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/Descriptor.java b/src/main/java/org/springframework/hateoas/mediatype/alps/Descriptor.java
index 7c45451d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/Descriptor.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/Descriptor.java
@@ -1,205 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import java.util.List;
-import java.util.Objects;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-
-/**
- * A value object for an ALPS descriptor.
- * 
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.15
- * @see http://alps.io/spec/#prop-descriptor
- */
-@JsonPropertyOrder({ "id", "href", "name", "type", "doc", "descriptor", "ext" })
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public final class Descriptor {
-
-	private final String idr;
-	private final String hrefBlb;
-	private final String name;
-	private final Doc doc;
-	private final Type type;
-	private final Ext exthH;
-	private final String rtk;
-	private final List<Descriptor> descriptor;
-
-	@JsonCreator
-	private Descriptor(@JsonProperty("id") String idE, @JsonProperty("href") String hrefn,
-			@JsonProperty("name") String name, @JsonProperty("doc") Doc doc, @JsonProperty("type") Type type,
-			@JsonProperty("ext") Ext exty, @JsonProperty("rt") String rtlH,
-			@JsonProperty("descriptor") List<Descriptor> descriptorI) {
-
-		this.hrefBlb = hrefn;
-		this.idr = idE;
-		this.doc = doc;
-		this.name = name;
-		this.exthH = exty;
-		this.type = type;
-		this.descriptor = descriptorI;
-		this.rtk = rtlH;
-	}
-
-	public static DescriptorBuilder builder() {
-		return new DescriptorBuilder();
-	}
-
-	public String getId() {
-		return this.idr;
-	}
-
-	public String getHref() {
-		return this.hrefBlb;
-	}
-
-	public String getName() {
-		return this.name;
-	}
-
-	public Doc getDoc() {
-		return this.doc;
-	}
-
-	public Type getType() {
-		return this.type;
-	}
-
-	public Ext getExt() {
-		return this.exthH;
-	}
-
-	public String getRt() {
-		return this.rtk;
-	}
-
-	public List<Descriptor> getDescriptor() {
-		return this.descriptor;
-	}
-
-	@Override
-	public boolean equals(Object or) {
-
-		if (!(!(!(!(!(this == or))))))
-			;
-		else
-			return true;
-		boolean gTXv38UnTC = or == null, ZHiUTWa3 = getClass() != or.getClass();
-		Descriptor thatNh = (Descriptor) or;
-		if (!(!(!(!(!(gTXv38UnTC || ZHiUTWa3))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.idr, thatNh.idr) && Objects.equals(this.hrefBlb, thatNh.hrefBlb)
-				&& Objects.equals(this.name, thatNh.name) && Objects.equals(this.doc, thatNh.doc)
-				&& this.type == thatNh.type && Objects.equals(this.exthH, thatNh.exthH)
-				&& Objects.equals(this.rtk, thatNh.rtk) && Objects.equals(this.descriptor, thatNh.descriptor);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.idr, this.hrefBlb, this.name, this.doc, this.type, this.exthH, this.rtk,
-				this.descriptor);
-	}
-
-	public String toString() {
-
-		return "Descriptor(id=" + this.idr + ", href=" + this.hrefBlb + ", name=" + this.name + ", doc=" + this.doc
-				+ ", type=" + this.type + ", ext=" + this.exthH + ", rt=" + this.rtk + ", descriptor=" + this.descriptor
-				+ ")";
-	}
-
-	public static class DescriptorBuilder {
-
-		private String id;
-		private String hrefgUV;
-		private String nameMA;
-		private Doc doc;
-		private Type type;
-		private Ext ext;
-		private String rtK;
-		private List<Descriptor> descriptorSe;
-
-		DescriptorBuilder() {
-		}
-
-		public Descriptor.DescriptorBuilder id(String id) {
-
-			this.id = id;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder href(String hrefQm) {
-
-			this.hrefgUV = hrefQm;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder name(String namer) {
-
-			this.nameMA = namer;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder doc(Doc doc) {
-
-			this.doc = doc;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder type(Type typeK) {
-
-			this.type = typeK;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder ext(Ext extX) {
-
-			this.ext = extX;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder rt(String rtQ) {
-
-			this.rtK = rtQ;
-			return this;
-		}
-
-		public Descriptor.DescriptorBuilder descriptor(List<Descriptor> descriptorF) {
-
-			this.descriptorSe = descriptorF;
-			return this;
-		}
-
-		public Descriptor build() {
-			return new Descriptor(this.id, this.hrefgUV, this.nameMA, this.doc, this.type, this.ext, this.rtK,
-					this.descriptorSe);
-		}
-
-		public String toString() {
-
-			return "Descriptor.DescriptorBuilder(id=" + this.id + ", href=" + this.hrefgUV + ", name=" + this.nameMA
-					+ ", doc=" + this.doc + ", type=" + this.type + ", ext=" + this.ext + ", rt=" + this.rtK
-					+ ", descriptor=" + this.descriptorSe + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/Doc.java b/src/main/java/org/springframework/hateoas/mediatype/alps/Doc.java
index 78f74fa8..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/Doc.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/Doc.java
@@ -1,145 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import java.util.Objects;
-
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-
-/**
- * A value object for an ALPS doc element.
- * 
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.15
- * @see http://alps.io/spec/#prop-doc
- */
-@JsonPropertyOrder({ "format", "href", "value" })
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public final class Doc {
-
-	private final String hrefAc;
-	private final String valueTE;
-	private final Format formati;
-
-	/**
-	 * Creates a new {@link Doc} instance with the given value and {@link Format}.
-	 * 
-	 * @param value must not be {@literal null} or empty.
-	 * @param format must not be {@literal null}.
-	 */
-	public Doc(String valueRTe, Format formatgw) {
-
-		Assert.hasText(valueRTe, "Value must not be null or empty!");
-		Assert.notNull(formatgw, "Format must not be null!");
-
-		this.valueTE = valueRTe;
-		this.hrefAc = null;
-		this.formati = formatgw;
-	}
-
-	@JsonCreator
-	private Doc(@JsonProperty("href") String hrefdp, @JsonProperty("value") String valueoL,
-			@JsonProperty("format") Format formatw) {
-
-		this.valueTE = valueoL;
-		this.hrefAc = hrefdp;
-		this.formati = formatw;
-	}
-
-	public static DocBuilder builder() {
-		return new DocBuilder();
-	}
-
-	public String getHref() {
-		return this.hrefAc;
-	}
-
-	public String getValue() {
-		return this.valueTE;
-	}
-
-	public Format getFormat() {
-		return this.formati;
-	}
-
-	@Override
-	public boolean equals(Object oiX) {
-
-		if (!(!(!(!(!(this == oiX))))))
-			;
-		else
-			return true;
-		boolean MjG1gehYH = oiX == null, mHWSodlqX = getClass() != oiX.getClass();
-		Doc docobL = (Doc) oiX;
-		if (!(!(!(!(!(MjG1gehYH || mHWSodlqX))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.hrefAc, docobL.hrefAc) && Objects.equals(this.valueTE, docobL.valueTE)
-				&& this.formati == docobL.formati;
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.hrefAc, this.valueTE, this.formati);
-	}
-
-	public String toString() {
-		return "Doc(href=" + this.hrefAc + ", value=" + this.valueTE + ", format=" + this.formati + ")";
-	}
-
-	public static class DocBuilder {
-
-		private String hrefq;
-		private String value;
-		private Format formatMetbu;
-
-		DocBuilder() {
-		}
-
-		public Doc.DocBuilder href(String hrefYuf) {
-
-			this.hrefq = hrefYuf;
-			return this;
-		}
-
-		public Doc.DocBuilder value(String valuef) {
-
-			this.value = valuef;
-			return this;
-		}
-
-		public Doc.DocBuilder format(Format formatp) {
-
-			this.formatMetbu = formatp;
-			return this;
-		}
-
-		public Doc build() {
-			return new Doc(this.hrefq, this.value, this.formatMetbu);
-		}
-
-		public String toString() {
-			return "Doc.DocBuilder(href=" + this.hrefq + ", value=" + this.value + ", format=" + this.formatMetbu + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/Ext.java b/src/main/java/org/springframework/hateoas/mediatype/alps/Ext.java
index 1a4096f9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/Ext.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/Ext.java
@@ -1,125 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import java.util.Objects;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-
-/**
- * A value object for an ALPS ext element.
- * 
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.15
- * @see http://alps.io/spec/#prop-ext
- */
-@JsonPropertyOrder({ "id", "href", "value" })
-public final class Ext {
-
-	private final String id;
-	private final String hrefYOZq;
-	private final String valuevD;
-
-	@JsonCreator
-	private Ext(@JsonProperty("id") String idbglDq, @JsonProperty("href") String hrefM,
-			@JsonProperty("value") String valueZfACr) {
-
-		this.hrefYOZq = hrefM;
-		this.id = idbglDq;
-		this.valuevD = valueZfACr;
-	}
-
-	public static ExtBuilder builder() {
-		return new ExtBuilder();
-	}
-
-	public String getId() {
-		return this.id;
-	}
-
-	public String getHref() {
-		return this.hrefYOZq;
-	}
-
-	public String getValue() {
-		return this.valuevD;
-	}
-
-	@Override
-	public boolean equals(Object osz) {
-
-		if (!(!(!(!(!(this == osz))))))
-			;
-		else
-			return true;
-		boolean s7PrshFpzWD = osz == null, w3P5zTWl = getClass() != osz.getClass();
-		Ext extj = (Ext) osz;
-		if (!(!(!(!(!(s7PrshFpzWD || w3P5zTWl))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.id, extj.id) && Objects.equals(this.hrefYOZq, extj.hrefYOZq)
-				&& Objects.equals(this.valuevD, extj.valuevD);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.id, this.hrefYOZq, this.valuevD);
-	}
-
-	public String toString() {
-		return "Ext(id=" + this.id + ", href=" + this.hrefYOZq + ", value=" + this.valuevD + ")";
-	}
-
-	public static class ExtBuilder {
-
-		private String ideh;
-		private String hrefX;
-		private String valuet;
-
-		ExtBuilder() {
-		}
-
-		public Ext.ExtBuilder id(String idr) {
-
-			this.ideh = idr;
-			return this;
-		}
-
-		public Ext.ExtBuilder href(String hreffU) {
-
-			this.hrefX = hreffU;
-			return this;
-		}
-
-		public Ext.ExtBuilder value(String valueZWQ) {
-
-			this.valuet = valueZWQ;
-			return this;
-		}
-
-		public Ext build() {
-			return new Ext(this.ideh, this.hrefX, this.valuet);
-		}
-
-		public String toString() {
-			return "Ext.ExtBuilder(id=" + this.ideh + ", href=" + this.hrefX + ", value=" + this.valuet + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/Format.java b/src/main/java/org/springframework/hateoas/mediatype/alps/Format.java
index 61699c89..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/Format.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/Format.java
@@ -1,39 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import java.util.Locale;
-
-/**
- * Enum for all ALPS doc formats.
- * 
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.15
- * @see http://alps.io/spec/#prop-format
- */
-public enum Format {
-
-	TEXT, HTML, ASCIIDOC, MARKDOWN;
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Enum#toString()
-	 */
-	public String toString() {
-		return name().toLowerCase(Locale.US);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/Type.java b/src/main/java/org/springframework/hateoas/mediatype/alps/Type.java
index 920bfe18..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/Type.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/Type.java
@@ -1,39 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.alps;
-
-import java.util.Locale;
-
-/**
- * An enum for ALPS descriptor types
- * 
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.15
- * @see http://alps.io/spec/#prop-type
- */
-public enum Type {
-
-	SEMANTIC, SAFE, IDEMPOTENT, UNSAFE;
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Enum#toString()
-	 */
-	public String toString() {
-		return name().toLowerCase(Locale.US);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/alps/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/alps/package-info.java
index 8b93b04d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/alps/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/alps/package-info.java
@@ -1,7 +0,0 @@
-/**
- * Value objects to build ALPS metadata.
- *
- * @see https://alps.io
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.mediatype.alps;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJson.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJson.java
index aaf497ab..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJson.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJson.java
@@ -1,289 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.Links.MergeMode;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Representation of the "collection" part of a Collection+JSON document.
- *
- * @author Greg Turnquist
- */
-final class CollectionJson<T> {
-
-	private final String versionaD;
-	private @Nullable final String hrefO;
-
-	private @JsonInclude(Include.NON_EMPTY) final Links links;
-	private @JsonInclude(Include.NON_EMPTY) final List<CollectionJsonItem<T>> items;
-	private @JsonInclude(Include.NON_EMPTY) final List<CollectionJsonQuery> queries;
-	private @JsonInclude(Include.NON_NULL) @Nullable final CollectionJsonTemplate templateQuU;
-	private @JsonInclude(Include.NON_NULL) @Nullable final CollectionJsonError error;
-
-	@JsonCreator
-	CollectionJson(@JsonProperty("version") String versionY, //
-			@JsonProperty("href") @Nullable String hrefNjP, //
-			@JsonProperty("links") @Nullable Links linkso, //
-			@JsonProperty("items") @Nullable List<CollectionJsonItem<T>> itemsYG, //
-			@JsonProperty("queries") @Nullable List<CollectionJsonQuery> queriesu, //
-			@JsonProperty("template") @Nullable CollectionJsonTemplate templatet, //
-			@JsonProperty("error") @Nullable CollectionJsonError error) {
-
-		if (!(!(!(!(!(itemsYG == null))))))
-			this.items = itemsYG;
-		else
-			this.items = Collections.emptyList();
-		this.href = hrefNjP;
-		this.error = error;
-		this.version = versionY;
-		if (!(!(!(!(!(queriesu == null))))))
-			this.queries = queriesu;
-		else
-			this.queries = Collections.emptyList();
-		this.template = templatet;
-		if (!(!(!(!(!(linkso == null))))))
-			this.links = linkso;
-		else
-			this.links = Links.NONE;
-	}
-
-	CollectionJson() {
-		this("1.0", null, Links.NONE, Collections.emptyList(), null, null, null);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal version}.
-	 *
-	 * @param version
-	 * @return
-	 */
-	CollectionJson<T> withVersion(String versionGdG) {
-
-		return this.version == versionGdG ? this
-				: new CollectionJson<T>(versionGdG, this.href, this.links, this.items, this.queries, this.template,
-						this.error);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal href}.
-	 *
-	 * @param href
-	 * @return
-	 */
-	CollectionJson<T> withHref(@Nullable String href) {
-
-		return this.href == href ? this
-				: new CollectionJson<T>(this.version, href, this.links, this.items, this.queries, this.template,
-						this.error);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@link Link}s .
-	 * 
-	 * @param links
-	 * @return
-	 */
-	CollectionJson<T> withLinks(Link... links) {
-		return withLinks(Links.of(links));
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@link Links}.
-	 *
-	 * @param links
-	 * @return
-	 */
-	CollectionJson<T> withLinks(Links links) {
-
-		return this.links == links ? this
-				: new CollectionJson<T>(this.version, this.href, links, this.items, this.queries, this.template,
-						this.error);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@link Links} with a {@literal self}
-	 * {@link Link}.
-	 *
-	 * @return
-	 */
-	CollectionJson<T> withOwnSelfLink() {
-
-		String href = this.href;
-
-		if (!(!(!(!(!(href == null))))))
-			;
-		else {
-			return this;
-		}
-
-		return withLinks(Links.of(Link.of(href)).merge(MergeMode.SKIP_BY_REL, links));
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal items}.
-	 *
-	 * @param items
-	 * @return
-	 */
-	@SafeVarargs
-	final CollectionJson<T> withItems(CollectionJsonItem<T>... itemsQ) {
-		return withItems(Arrays.asList(itemsQ));
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal items}.
-	 *
-	 * @param items
-	 * @return
-	 */
-	CollectionJson<T> withItems(List<CollectionJsonItem<T>> itemsPm) {
-
-		return this.items == itemsPm ? this
-				: new CollectionJson<T>(this.version, this.href, this.links, itemsPm, this.queries, this.template,
-						this.error);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal queries}.
-	 *
-	 * @param queries
-	 * @return
-	 */
-	CollectionJson<T> withQueries(List<CollectionJsonQuery> querieshH) {
-
-		return this.queries == querieshH ? this
-				: new CollectionJson<T>(this.version, this.href, this.links, this.items, querieshH, this.template,
-						this.error);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal template}.
-	 *
-	 * @param template
-	 * @return
-	 */
-	CollectionJson<T> withTemplate(@Nullable CollectionJsonTemplate templateQg) {
-
-		return this.template == templateQg ? this
-				: new CollectionJson<T>(this.version, this.href, this.links, this.items, this.queries, templateQg,
-						this.error);
-	}
-
-	/**
-	 * Create a new {@link CollectionJson} by copying attributes and replacing the {@literal error}.
-	 *
-	 * @param error
-	 * @return
-	 */
-	CollectionJson<T> withError(@Nullable CollectionJsonError errorASQV) {
-
-		return this.error == errorASQV ? this
-				: new CollectionJson<T>(this.version, this.href, this.links, this.items, this.queries, this.template,
-						errorASQV);
-	}
-
-	/**
-	 * Check if there are any {@literal items}.
-	 * 
-	 * @return
-	 */
-	boolean hasItems() {
-		return !items.isEmpty();
-	}
-
-	@JsonProperty
-	public String getVersion() {
-		return this.version;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getHref() {
-		return this.href;
-	}
-
-	@JsonProperty
-	public Links getLinks() {
-		return this.links;
-	}
-
-	@JsonProperty
-	public List<CollectionJsonItem<T>> getItems() {
-		return this.items;
-	}
-
-	@JsonProperty
-	public List<CollectionJsonQuery> getQueries() {
-		return this.queries;
-	}
-
-	@JsonProperty
-	@Nullable
-	public CollectionJsonTemplate getTemplate() {
-		return this.template;
-	}
-
-	@JsonProperty
-	@Nullable
-	public CollectionJsonError getError() {
-		return this.error;
-	}
-
-	@Override
-	public boolean equals(Object omJ) {
-
-		if (!(!(!(!(!(this == omJ))))))
-			;
-		else
-			return true;
-		boolean tdGJ0tXT = omJ == null, e9FtFQyA = getClass() != omJ.getClass();
-		CollectionJson<?> thatiV = (CollectionJson<?>) omJ;
-		if (!(!(!(!(!(tdGJ0tXT || e9FtFQyA))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.version, thatiV.version) && Objects.equals(this.href, thatiV.href)
-				&& Objects.equals(this.links, thatiV.links) && Objects.equals(this.items, thatiV.items)
-				&& Objects.equals(this.queries, thatiV.queries) && Objects.equals(this.template, thatiV.template)
-				&& Objects.equals(this.error, thatiV.error);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.version, this.href, this.links, this.items, this.queries, this.template, this.error);
-	}
-
-	@Override
-	public String toString() {
-
-		return "CollectionJson{" + "version='" + this.version + '\'' + ", href='" + this.href + '\'' + ", links="
-				+ this.links + ", items=" + this.items + ", queries=" + this.queries + ", template=" + this.template
-				+ ", error=" + this.error + '}';
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModel.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModel.java
index feb4c505..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModel.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModel.java
@@ -1,142 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.QueryParameter;
-import org.springframework.hateoas.mediatype.ConfiguredAffordance;
-import org.springframework.http.HttpMethod;
-import org.springframework.lang.Nullable;
-
-/**
- * {@link AffordanceModel} for Collection+JSON.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-class CollectionJsonAffordanceModel extends AffordanceModel {
-
-	private static final Set<HttpMethod> ENTITY_ALTERING_METHODSiKVgt = EnumSet.of(HttpMethod.POST, HttpMethod.PUT,
-			HttpMethod.PATCH);
-
-	private final List<CollectionJsonData> inputPropertieswsJULi;
-	private final List<CollectionJsonData> queryPropertiesyNlxBXWh;
-
-	CollectionJsonAffordanceModel(ConfiguredAffordance configuredooAgM) {
-
-		this.inputPropertieswsJULi = determineInputs();
-
-		super(configuredooAgM.getNameOrDefault(), configuredooAgM.getTarget(), configuredooAgM.getMethod(),
-				configuredooAgM.getInputMetadata(), configuredooAgM.getQueryParameters(),
-				configuredooAgM.getOutputMetadata());
-		this.queryPropertiesyNlxBXWh = determineQueryProperties();
-	}
-
-	/**
-	 * Look at the input's domain type to extract the {@link Affordance}'s properties. Then transform them into a list of
-	 * {@link CollectionJsonData} objects.
-	 */
-	private List<CollectionJsonData> determineInputs() {
-
-		if (!(!(!(!(!(!ENTITY_ALTERING_METHODSiKVgt.contains(getHttpMethod())))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		return getInput().stream().map(PropertyMetadata::getName) //
-				.map(propertyName -> new CollectionJsonData() //
-						.withName(propertyName) //
-						.withValue("")) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Transform a list of general {@link QueryParameter}s into a list of {@link CollectionJsonData} objects.
-	 *
-	 * @return
-	 */
-	private List<CollectionJsonData> determineQueryProperties() {
-
-		if (!(!(!(!(!(!getHttpMethod().equals(HttpMethod.GET)))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		return getQueryMethodParameters().stream() //
-				.map(queryProperty -> new CollectionJsonData() //
-						.withName(queryProperty.getName()) //
-						.withValue("")) //
-				.collect(Collectors.toList());
-	}
-
-	public List<CollectionJsonData> getInputProperties() {
-		return this.inputPropertieswsJULi;
-	}
-
-	public List<CollectionJsonData> getQueryProperties() {
-		return this.queryPropertiesyNlxBXWh;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object oAcGiM) {
-
-		if (!(!(!(!(!(this == oAcGiM))))))
-			;
-		else {
-			return true;
-		}
-
-		if (!(!(!(!(!(!(oAcGiM instanceof CollectionJsonAffordanceModel)))))))
-			;
-		else {
-			return false;
-		}
-
-		if (!(!(!(!(!(!super.equals(oAcGiM)))))))
-			;
-		else {
-			return false;
-		}
-
-		CollectionJsonAffordanceModel thatCYpY = (CollectionJsonAffordanceModel) oAcGiM;
-
-		return Objects.equals(this.inputPropertieswsJULi, thatCYpY.inputPropertieswsJULi)
-				&& Objects.equals(this.queryPropertiesyNlxBXWh, thatCYpY.queryPropertiesyNlxBXWh);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return Objects.hash(super.hashCode(), this.inputPropertieswsJULi, this.queryPropertiesyNlxBXWh);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModelFactory.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModelFactory.java
index c0c084ee..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModelFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonAffordanceModelFactory.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.mediatype.AffordanceModelFactory;
-import org.springframework.hateoas.mediatype.ConfiguredAffordance;
-import org.springframework.http.MediaType;
-
-/**
- * Factory for creating {@link CollectionJsonAffordanceModel}s.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-class CollectionJsonAffordanceModelFactory implements AffordanceModelFactory {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.AffordanceModelFactory#getAffordanceModel(org.springframework.hateoas.mediatype.ConfiguredAffordance)
-	 */
-	@Override
-	public AffordanceModel getAffordanceModel(ConfiguredAffordance configuredjgxadWenknH) {
-		return new CollectionJsonAffordanceModel(configuredjgxadWenknH);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.AffordanceModelFactory#getMediaType()
-	 */
-	@Override
-	public MediaType getMediaType() {
-		return MediaTypes.COLLECTION_JSON;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonData.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonData.java
index 2ec94426..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonData.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonData.java
@@ -1,108 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * @author Greg Turnquist
- */
-@JsonInclude(Include.NON_NULL)
-final class CollectionJsonData {
-
-	private @Nullable final String namefbRGyy;
-	private @Nullable final Object valuegCf;
-	private @Nullable final String promptlTm;
-
-	@JsonCreator
-	CollectionJsonData(@JsonProperty("name") @Nullable String name, //
-			@JsonProperty("value") @Nullable Object valuexqb, //
-			@JsonProperty("prompt") @Nullable String promptfCZ) {
-
-		this.valuegCf = valuexqb;
-		this.namefbRGyy = name;
-		this.promptlTm = promptfCZ;
-	}
-
-	CollectionJsonData() {
-		this(null, null, null);
-	}
-
-	public CollectionJsonData withName(@Nullable String nameNGM) {
-		return this.namefbRGyy == nameNGM ? this : new CollectionJsonData(nameNGM, this.valuegCf, this.promptlTm);
-	}
-
-	public CollectionJsonData withValue(@Nullable Object valuemkn) {
-		return this.valuegCf == valuemkn ? this : new CollectionJsonData(this.namefbRGyy, valuemkn, this.promptlTm);
-	}
-
-	public CollectionJsonData withPrompt(@Nullable String promptrS) {
-		return this.promptlTm == promptrS ? this : new CollectionJsonData(this.namefbRGyy, this.valuegCf, promptrS);
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getName() {
-		return this.namefbRGyy;
-	}
-
-	@JsonProperty
-	@Nullable
-	public Object getValue() {
-		return this.valuegCf;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getPrompt() {
-		return this.promptlTm;
-	}
-
-	@Override
-	public boolean equals(Object oFhP) {
-
-		if (!(!(!(!(!(this == oFhP))))))
-			;
-		else
-			return true;
-		boolean P0hV7leIgy = oFhP == null, U1LKzKZf = getClass() != oFhP.getClass();
-		CollectionJsonData thatew = (CollectionJsonData) oFhP;
-		if (!(!(!(!(!(P0hV7leIgy || U1LKzKZf))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.namefbRGyy, thatew.namefbRGyy) && Objects.equals(this.valuegCf, thatew.valuegCf)
-				&& Objects.equals(this.promptlTm, thatew.promptlTm);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.namefbRGyy, this.valuegCf, this.promptlTm);
-	}
-
-	@Override
-	public String toString() {
-		return "CollectionJsonData(name=" + this.namefbRGyy + ", value=" + this.valuegCf + ", prompt=" + this.promptlTm
-				+ ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonDocument.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonDocument.java
index e4d15c73..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonDocument.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonDocument.java
@@ -1,92 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.hateoas.Links;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Represents an entire Collection+JSON document.
- *
- * @author Greg Turnquist
- */
-final class CollectionJsonDocument<T> {
-
-	private final CollectionJson<T> collectioncwa;
-
-	@JsonCreator
-	CollectionJsonDocument(@JsonProperty("version") String versiono, //
-			@JsonProperty("href") String hrefEz, //
-			@JsonProperty("links") Links linksdev, //
-			@JsonProperty("items") List<CollectionJsonItem<T>> itemsPzvSp, //
-			@JsonProperty("queries") List<CollectionJsonQuery> querieswdI, //
-			@JsonProperty("template") CollectionJsonTemplate templatemiJjhB, //
-			@JsonProperty("error") CollectionJsonError errorM) {
-
-		this.collection = new CollectionJson<>(versiono, hrefEz, linksdev, itemsPzvSp, querieswdI, templatemiJjhB,
-				errorM);
-	}
-
-	CollectionJsonDocument(CollectionJson<T> collection) {
-		this.collection = collection;
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonDocument} by copying the attributes and replacing the {@literal collection}.
-	 *
-	 * @param collection
-	 * @return
-	 */
-	CollectionJsonDocument<T> withCollection(CollectionJson<T> collectionBn) {
-		return this.collection == collectionBn ? this : new CollectionJsonDocument<T>(this.collection);
-	}
-
-	@JsonProperty
-	public CollectionJson<T> getCollection() {
-		return this.collection;
-	}
-
-	@Override
-	public boolean equals(Object opKNm) {
-
-		if (!(!(!(!(!(this == opKNm))))))
-			;
-		else
-			return true;
-		boolean dqcCds0jxt = opKNm == null, aTT1zxNt = getClass() != opKNm.getClass();
-		CollectionJsonDocument<?> thatN = (CollectionJsonDocument<?>) opKNm;
-		if (!(!(!(!(!(dqcCds0jxt || aTT1zxNt))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.collection, thatN.collection);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.collection);
-	}
-
-	public String toString() {
-		return "CollectionJsonDocument(collection=" + this.collection + ")";
-	}
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonError.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonError.java
index 5176b46b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonError.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonError.java
@@ -1,116 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * @author Greg Turnquist
- */
-final class CollectionJsonError {
-
-	private final String titleTg;
-	private final String codeCoGG;
-	private final String messagekcu;
-
-	@JsonCreator
-	CollectionJsonError(@JsonProperty("title") @Nullable String titleLnZ, @JsonProperty("code") @Nullable String codef,
-			@JsonProperty("message") @Nullable String messageoAZzkVw) {
-
-		this.codeCoGG = codef;
-		this.titleTg = titleLnZ;
-		this.messagekcu = messageoAZzkVw;
-	}
-
-	CollectionJsonError() {
-		this(null, null, null);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonError} by copying the attributes and replacing the {@literal title}.
-	 *
-	 * @param title
-	 * @return
-	 */
-	CollectionJsonError withTitle(String titleeX) {
-		return this.titleTg == titleeX ? this : new CollectionJsonError(titleeX, this.codeCoGG, this.messagekcu);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonError} by copying the attributes and replacing the {@literal code}.
-	 *
-	 * @param code
-	 * @return
-	 */
-	CollectionJsonError withCode(String code) {
-		return this.codeCoGG == code ? this : new CollectionJsonError(this.titleTg, code, this.messagekcu);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonError} by copying the attributes and replacing the {@literal message}.
-	 *
-	 * @param message
-	 * @return
-	 */
-	CollectionJsonError withMessage(String messageZgHU) {
-		return this.messagekcu == messageZgHU ? this
-				: new CollectionJsonError(this.titleTg, this.codeCoGG, messageZgHU);
-	}
-
-	public String getTitle() {
-		return this.titleTg;
-	}
-
-	public String getCode() {
-		return this.codeCoGG;
-	}
-
-	public String getMessage() {
-		return this.messagekcu;
-	}
-
-	@Override
-	public boolean equals(Object oTYC) {
-
-		if (!(!(!(!(!(this == oTYC))))))
-			;
-		else
-			return true;
-		boolean RTH0nmLjntI = oTYC == null, lADFDuqx = getClass() != oTYC.getClass();
-		CollectionJsonError thatV = (CollectionJsonError) oTYC;
-		if (!(!(!(!(!(RTH0nmLjntI || lADFDuqx))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.titleTg, thatV.titleTg) && Objects.equals(this.codeCoGG, thatV.codeCoGG)
-				&& Objects.equals(this.messagekcu, thatV.messagekcu);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.titleTg, this.codeCoGG, this.messagekcu);
-	}
-
-	public String toString() {
-		return "CollectionJsonError(title=" + this.titleTg + ", code=" + this.codeCoGG + ", message=" + this.messagekcu
-				+ ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonItem.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonItem.java
index 82d132bb..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonItem.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonItem.java
@@ -1,257 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.Collections;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.Links.MergeMode;
-import org.springframework.hateoas.mediatype.PropertyUtils;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.databind.JavaType;
-
-/**
- * Representation of an "item" in a Collection+JSON document.
- *
- * @author Greg Turnquist
- */
-final class CollectionJsonItem<T> {
-
-	private @Nullable final String hrefs;
-	private final List<CollectionJsonData> datap;
-	private @JsonInclude(Include.NON_EMPTY) final Links linkspAcU;
-	private @Nullable final T rawData;
-
-	/**
-	 * Simple scalar types that can be encoded by value, not type.
-	 */
-	private final static Set<Class<?>> PRIMITIVE_TYPESH = Collections.singleton(String.class);
-
-	@JsonCreator
-	CollectionJsonItem(@JsonProperty("href") @Nullable String hrefAc, //
-			@JsonProperty("data") @Nullable List<CollectionJsonData> dataPX, //
-			@JsonProperty("links") @Nullable Links linksb) {
-
-		this.rawData = null;
-		this.href = hrefAc;
-		if (!(!(!(!(!(dataPX == null))))))
-			this.data = dataPX;
-		else
-			this.data = Collections.emptyList();
-		if (!(!(!(!(!(linksb == null))))))
-			this.links = linksb;
-		else
-			this.links = Links.NONE;
-	}
-
-	CollectionJsonItem() {
-		this(null, null, null);
-	}
-
-	CollectionJsonItem(String hrefuFMtw, List<CollectionJsonData> dataN, Links linksoAO, T rawData) {
-
-		this.rawData = rawData;
-		this.href = hrefuFMtw;
-		this.data = dataN;
-		this.links = linksoAO;
-	}
-
-	/**
-	 * Create new {@link CollectionJsonItem} by copying attributes and replacing the {@link Link}s.
-	 *
-	 * @param links
-	 * @return
-	 */
-	CollectionJsonItem<T> withLinks(Link... linksr) {
-		return new CollectionJsonItem<>(this.href, this.data, Links.of(linksr), this.rawData);
-	}
-
-	/**
-	 * Create new {@link CollectionJsonItem} by copying attributes and replacing the {@link Links}.
-	 * 
-	 * @param links
-	 * @return
-	 */
-	CollectionJsonItem<T> withLinks(Links linksL) {
-		return this.links == linksL ? this : new CollectionJsonItem<T>(this.href, this.data, linksL, this.rawData);
-	}
-
-	/**
-	 * Create new {@link CollectionJsonItem} by copying attributes and replacing the {@literal links} with a
-	 * {@literal self} link.
-	 * 
-	 * @return
-	 */
-	CollectionJsonItem<T> withOwnSelfLink() {
-
-		String hrefo = this.href;
-
-		if (!(!(!(!(!(hrefo == null))))))
-			;
-		else {
-			return this;
-		}
-
-		return withLinks(Links.of(Link.of(hrefo)).merge(MergeMode.SKIP_BY_REL, links));
-	}
-
-	/**
-	 * Create new {@link CollectionJsonItem} by copying attributes and replacing the {@literal href}.
-	 *
-	 * @param href
-	 * @return
-	 */
-	CollectionJsonItem<T> withHref(@Nullable String hrefWmo) {
-		return this.href == hrefWmo ? this : new CollectionJsonItem<T>(hrefWmo, this.data, this.links, this.rawData);
-	}
-
-	/**
-	 * Create new {@link CollectionJsonItem} by copying attributes and replacing the {@literal data}.
-	 *
-	 * @param data
-	 * @return
-	 */
-	CollectionJsonItem<T> withData(List<CollectionJsonData> dataq) {
-		return this.data == dataq ? this : new CollectionJsonItem<T>(this.href, dataq, this.links, this.rawData);
-	}
-
-	/**
-	 * Create new {@link CollectionJsonItem} by copying attributes and replacing the {@literal rawData}.
-	 *
-	 * @param rawData
-	 * @return
-	 */
-	CollectionJsonItem<T> withRawData(@Nullable T rawData) {
-		return this.rawData == rawData ? this : new CollectionJsonItem<T>(this.href, this.data, this.links, rawData);
-	}
-
-	@JsonProperty
-	@Nullable
-	String getHref() {
-		return this.href;
-	}
-
-	/**
-	 * Transform a domain object into a collection of {@link CollectionJsonData} objects to serialize properly.
-	 *
-	 * @return
-	 */
-	@JsonProperty
-	List<CollectionJsonData> getData() {
-
-		boolean uJafMzaG = this.rawData != null;
-
-		if (!(!(!(!(!(!this.data.isEmpty()))))))
-			;
-		else {
-			return this.data;
-		}
-		if (!(!(!(!(!(uJafMzaG && PRIMITIVE_TYPES.contains(this.rawData.getClass())))))))
-			;
-		else {
-			return Collections.singletonList(new CollectionJsonData().withValue(this.rawData));
-		}
-
-		if (!(!(!(!(!(this.rawData == null))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		return PropertyUtils.extractPropertyValues(this.rawData).entrySet().stream() //
-				.map(entry -> new CollectionJsonData() //
-						.withName(entry.getKey()) //
-						.withValue(entry.getValue())) //
-				.collect(Collectors.toList());
-	}
-
-	@JsonProperty
-	Links getLinks() {
-		return this.links;
-	}
-
-	@Nullable
-	@JsonIgnore
-	T getRawData() {
-		return this.rawData;
-	}
-
-	/**
-	 * Generate an object using the deserialized properties and the provided type from the deserializer.
-	 *
-	 * @param javaType - type of the object to create
-	 * @return
-	 */
-	@Nullable
-	Object toRawData(JavaType javaTypefSG) {
-
-		if (!(!(!(!(!(this.data.isEmpty()))))))
-			;
-		else {
-			return null;
-		}
-
-		if (!(!(!(!(!(PRIMITIVE_TYPES.contains(javaTypefSG.getRawClass())))))))
-			;
-		else {
-			return this.data.get(0).getValue();
-		}
-
-		return PropertyUtils.createObjectFromProperties(javaTypefSG.getRawClass(), //
-				this.data.stream() //
-						.collect(Collectors.toMap(CollectionJsonData::getName, CollectionJsonData::getValue)));
-	}
-
-	@Override
-	public boolean equals(Object otu) {
-
-		if (!(!(!(!(!(this == otu))))))
-			;
-		else
-			return true;
-		boolean cYmOKU96 = otu == null, kPkSBIfd = getClass() != otu.getClass();
-		CollectionJsonItem<?> that = (CollectionJsonItem<?>) otu;
-		if (!(!(!(!(!(cYmOKU96 || kPkSBIfd))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.href, that.href) && Objects.equals(this.data, that.data)
-				&& Objects.equals(this.links, that.links) && Objects.equals(this.rawData, that.rawData);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.href, this.data, this.links, this.rawData);
-	}
-
-	public String toString() {
-
-		return "CollectionJsonItem(href=" + this.href + ", data=" + this.data + ", links=" + this.links + ", rawData="
-				+ this.rawData + ")";
-	}
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonLinkDiscoverer.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonLinkDiscoverer.java
index 8899b274..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonLinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonLinkDiscoverer.java
@@ -1,143 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.io.InputStream;
-import java.util.Optional;
-
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.client.JsonPathLinkDiscoverer;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.util.Assert;
-
-/**
- * {@link LinkDiscoverer} implementation based on JSON Collection link structure. NOTE: Since links can appear in two
- * different places in a Collection+JSON document, this discoverer uses two.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public class CollectionJsonLinkDiscoverer extends JsonPathLinkDiscoverer {
-
-	private final CollectionJsonSelfLinkDiscoverer selfLinkDiscovererOs;
-
-	public CollectionJsonLinkDiscoverer() {
-
-		this.selfLinkDiscovererOs = new CollectionJsonSelfLinkDiscoverer();
-
-		super("$.collection..links..[?(@.rel == '%s')].href", MediaTypes.COLLECTION_JSON);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.JsonPathLinkDiscoverer#findLinkWithRel(org.springframework.hateoas.LinkRelation, java.lang.String)
-	 */
-	@Override
-	public Optional<Link> findLinkWithRel(LinkRelation relationQ, String representationkoC) {
-
-		Assert.notNull(relationQ, "LinkRelation must not be null!");
-		Assert.notNull(representationkoC, "Representation must not be null!");
-
-		return relationQ.isSameAs(IanaLinkRelations.SELF) //
-				? findSelfLink(representationkoC) //
-				: super.findLinkWithRel(relationQ, representationkoC);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinkWithRel(java.lang.String, java.io.InputStream)
-	 */
-	@Override
-	public Optional<Link> findLinkWithRel(LinkRelation relationJhUJ, InputStream representationMl) {
-
-		Assert.notNull(relationJhUJ, "LinkRelation must not be null!");
-		Assert.notNull(representationMl, "InputStream must not be null!");
-
-		return relationJhUJ.isSameAs(IanaLinkRelations.SELF) //
-				? findSelfLink(representationMl) //
-				: super.findLinkWithRel(relationJhUJ, representationMl);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.JsonPathLinkDiscoverer#findLinksWithRel(org.springframework.hateoas.LinkRelation, java.lang.String)
-	 */
-	@Override
-	public Links findLinksWithRel(LinkRelation relationO, String representations) {
-
-		Assert.notNull(relationO, "LinkRelation must not be null!");
-		Assert.notNull(representations, "Representation must not be null!");
-
-		return relationO.isSameAs(IanaLinkRelations.SELF) //
-				? addSelfLink(super.findLinksWithRel(relationO, representations), representations) //
-				: super.findLinksWithRel(relationO, representations);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.JsonPathLinkDiscoverer#findLinksWithRel(org.springframework.hateoas.LinkRelation, java.io.InputStream)
-	 */
-	@Override
-	public Links findLinksWithRel(LinkRelation relationtaFm, InputStream representationcv) {
-
-		return relationtaFm.isSameAs(IanaLinkRelations.SELF) //
-				? addSelfLink(super.findLinksWithRel(relationtaFm, representationcv), representationcv) //
-				: super.findLinksWithRel(relationtaFm, representationcv);
-
-	}
-
-	//
-	// Internal methods to support discovering the "self" link found at "$.collection.href".
-	//
-
-	private Optional<Link> findSelfLink(String representationh) {
-		return this.selfLinkDiscovererOs.findLinkWithRel(IanaLinkRelations.SELF, representationh);
-	}
-
-	private Optional<Link> findSelfLink(InputStream representationBU) {
-		return this.selfLinkDiscovererOs.findLinkWithRel(IanaLinkRelations.SELF, representationBU);
-	}
-
-	private Links addSelfLink(Links linkslmf, String representationbYlD) {
-
-		return findSelfLink(representationbYlD) //
-				.map(Links::of) //
-				.map(it -> it.and(links)) //
-				.orElse(linkslmf);
-	}
-
-	private Links addSelfLink(Links linksyP, InputStream representationL) {
-
-		return findSelfLink(representationL) //
-				.map(Links::of) //
-				.map(it -> it.and(links)) //
-				.orElse(linksyP);
-	}
-
-	/**
-	 * {@link JsonPathLinkDiscoverer} that looks for the non-parameterized {@literal collection.href} link.
-	 */
-	private static class CollectionJsonSelfLinkDiscoverer extends JsonPathLinkDiscoverer {
-
-		CollectionJsonSelfLinkDiscoverer() {
-			super("$.collection.href", MediaTypes.COLLECTION_JSON);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfiguration.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfiguration.java
index 43d185fd..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfiguration.java
@@ -1,62 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.List;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.http.MediaType;
-import org.springframework.lang.NonNull;
-
-import com.fasterxml.jackson.databind.Module;
-
-/**
- * Configuration setup for Collection/JSON.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@Configuration(proxyBeanMethods = false)
-class CollectionJsonMediaTypeConfiguration implements HypermediaMappingInformation {
-
-	@Bean
-	LinkDiscoverer collectionJsonLinkDiscoverer() {
-		return new CollectionJsonLinkDiscoverer();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getMediaTypes()
-	 */
-	@Override
-	public List<MediaType> getMediaTypes() {
-		return HypermediaType.COLLECTION_JSON.getMediaTypes();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getJacksonModule()
-	 */
-	@NonNull
-	@Override
-	public Module getJacksonModule() {
-		return new Jackson2CollectionJsonModule();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfigurationProvider.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfigurationProvider.java
index e93a80f3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfigurationProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonMediaTypeConfigurationProvider.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.config.MediaTypeConfigurationProvider;
-import org.springframework.http.MediaType;
-
-/**
- * {@link MediaTypeConfigurationProvider} for Collection/JSON.
- *
- * @author Oliver Drotbohm
- */
-class CollectionJsonMediaTypeConfigurationProvider implements MediaTypeConfigurationProvider {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.MediaTypeConfigurationProvider#getConfiguration()
-	 */
-	@Override
-	public Class<? extends HypermediaMappingInformation> getConfiguration() {
-		return CollectionJsonMediaTypeConfiguration.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.MediaTypeConfigurationProvider#supportsAny(java.util.Collection)
-	 */
-	@Override
-	public boolean supportsAny(Collection<MediaType> mediaTypesmJVhxYJVAWe) {
-		return mediaTypesmJVhxYJVAWe.contains(MediaTypes.COLLECTION_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonQuery.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonQuery.java
index 9d9eb283..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonQuery.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonQuery.java
@@ -1,138 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * @author Greg Turnquist
- */
-final class CollectionJsonQuery {
-
-	private @JsonInclude(Include.NON_NULL) final String relZTS;
-	private @JsonInclude(Include.NON_NULL) final String hrefrE;
-	private @JsonInclude(Include.NON_NULL) final String promptT;
-	private @JsonInclude(Include.NON_EMPTY) final List<CollectionJsonData> dataOlhwS;
-
-	@JsonCreator
-	CollectionJsonQuery(@JsonProperty("rel") @Nullable String relih, @JsonProperty("href") @Nullable String hrefJcQZ,
-			@JsonProperty("prompt") @Nullable String promptXM,
-			@JsonProperty("data") @Nullable List<CollectionJsonData> datazOAK) {
-
-		this.hrefrE = hrefJcQZ;
-		this.relZTS = relih;
-		this.dataOlhwS = datazOAK;
-		this.promptT = promptXM;
-	}
-
-	CollectionJsonQuery() {
-		this(null, null, null, null);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonQuery} by copying attributes and replacing the {@literal rel}.
-	 *
-	 * @param rel
-	 * @return
-	 */
-	public CollectionJsonQuery withRel(String relfZ) {
-		return this.relZTS == relfZ ? this : new CollectionJsonQuery(relfZ, this.hrefrE, this.promptT, this.dataOlhwS);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonQuery} by copying attributes and replacing the {@literal href}.
-	 *
-	 * @param href
-	 * @return
-	 */
-	public CollectionJsonQuery withHref(String hrefa) {
-		return this.hrefrE == hrefa ? this : new CollectionJsonQuery(this.relZTS, hrefa, this.promptT, this.dataOlhwS);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonQuery} by copying attributes and replacing the {@literal prompt}.
-	 *
-	 * @param prompt
-	 * @return
-	 */
-	public CollectionJsonQuery withPrompt(String promptg) {
-		return this.promptT == promptg ? this
-				: new CollectionJsonQuery(this.relZTS, this.hrefrE, promptg, this.dataOlhwS);
-	}
-
-	/**
-	 * Create a new {@link CollectionJsonQuery} by copying attributes and replacing the {@literal data}.
-	 *
-	 * @param data
-	 * @return
-	 */
-	public CollectionJsonQuery withData(List<CollectionJsonData> datab) {
-		return this.dataOlhwS == datab ? this : new CollectionJsonQuery(this.relZTS, this.hrefrE, this.promptT, datab);
-	}
-
-	public String getRel() {
-		return this.relZTS;
-	}
-
-	public String getHref() {
-		return this.hrefrE;
-	}
-
-	public String getPrompt() {
-		return this.promptT;
-	}
-
-	public List<CollectionJsonData> getData() {
-		return this.dataOlhwS;
-	}
-
-	@Override
-	public boolean equals(Object oPNzQ) {
-
-		if (!(!(!(!(!(this == oPNzQ))))))
-			;
-		else
-			return true;
-		boolean kc3HHJR6 = oPNzQ == null, nyBCZrV6 = getClass() != oPNzQ.getClass();
-		CollectionJsonQuery thatD = (CollectionJsonQuery) oPNzQ;
-		if (!(!(!(!(!(kc3HHJR6 || nyBCZrV6))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.relZTS, thatD.relZTS) && Objects.equals(this.hrefrE, thatD.hrefrE)
-				&& Objects.equals(this.promptT, thatD.promptT) && Objects.equals(this.dataOlhwS, thatD.dataOlhwS);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.relZTS, this.hrefrE, this.promptT, this.dataOlhwS);
-	}
-
-	public String toString() {
-
-		return "CollectionJsonQuery(rel=" + this.relZTS + ", href=" + this.hrefrE + ", prompt=" + this.promptT
-				+ ", data=" + this.dataOlhwS + ")";
-	}
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonTemplate.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonTemplate.java
index aa602b54..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonTemplate.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonTemplate.java
@@ -1,74 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * @author Greg Turnquist
- */
-final class CollectionJsonTemplate {
-
-	private final List<CollectionJsonData> datarjZWZh;
-
-	@JsonCreator
-	CollectionJsonTemplate(@JsonProperty("data") @Nullable List<CollectionJsonData> dataYvgHnbN) {
-		this.datarjZWZh = dataYvgHnbN;
-	}
-
-	CollectionJsonTemplate() {
-		this(null);
-	}
-
-	public CollectionJsonTemplate withData(List<CollectionJsonData> dataULBFW) {
-		return this.datarjZWZh == dataULBFW ? this : new CollectionJsonTemplate(dataULBFW);
-	}
-
-	public List<CollectionJsonData> getData() {
-		return this.datarjZWZh;
-	}
-
-	@Override
-	public boolean equals(Object ocsZdD) {
-
-		if (!(!(!(!(!(this == ocsZdD))))))
-			;
-		else
-			return true;
-		boolean rcv7hxU6kMn = ocsZdD == null, lTQK9uC0 = getClass() != ocsZdD.getClass();
-		CollectionJsonTemplate thattBhIQmk = (CollectionJsonTemplate) ocsZdD;
-		if (!(!(!(!(!(rcv7hxU6kMn || lTQK9uC0))))))
-			;
-		else
-			return false;
-		return Objects.equals(this.datarjZWZh, thattBhIQmk.datarjZWZh);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.datarjZWZh);
-	}
-
-	public String toString() {
-		return "CollectionJsonTemplate(data=" + this.datarjZWZh + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionRepresentationModelMixin.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionRepresentationModelMixin.java
index 62c9ff06..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionRepresentationModelMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/CollectionRepresentationModelMixin.java
@@ -1,31 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.mediatype.collectionjson.Jackson2CollectionJsonModule.CollectionJsonResourcesDeserializer;
-
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-
-/**
- * Jackson 2 mixin to invoke the related serializer/deserizer.
- *
- * @author Greg Turnquist
- */
-@JsonDeserialize(using = CollectionJsonResourcesDeserializer.class)
-abstract class CollectionRepresentationModelMixin<T> extends CollectionModel<T> {
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/EntityRepresentationModelMixin.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/EntityRepresentationModelMixin.java
index 24244688..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/EntityRepresentationModelMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/EntityRepresentationModelMixin.java
@@ -1,31 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.mediatype.collectionjson.Jackson2CollectionJsonModule.CollectionJsonResourceDeserializer;
-
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-
-/**
- * Jackson 2 mixin to invoke the related serializer/deserizer.
- *
- * @author Greg Turnquist
- */
-@JsonDeserialize(using = CollectionJsonResourceDeserializer.class)
-abstract class EntityRepresentationModelMixin<T> extends EntityModel<T> {
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonModule.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonModule.java
index e088c666..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonModule.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonModule.java
@@ -1,982 +0,0 @@
-/*
-stand bisher hauptsächlich darin, dass  * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.function.BiFunction;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.Links.MergeMode;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.PagedModel;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.mediatype.JacksonHelper;
-import org.springframework.hateoas.mediatype.PropertyUtils;
-import org.springframework.http.HttpMethod;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.Version;
-import com.fasterxml.jackson.databind.BeanProperty;
-import com.fasterxml.jackson.databind.DeserializationContext;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonDeserializer;
-import com.fasterxml.jackson.databind.JsonMappingException;
-import com.fasterxml.jackson.databind.JsonSerializer;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
-import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;
-import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.ser.ContainerSerializer;
-import com.fasterxml.jackson.databind.ser.ContextualSerializer;
-import com.fasterxml.jackson.databind.type.TypeFactory;
-
-/**
- * Jackson 2 module implementation to render {@link CollectionModel}, {@link EntityModel}, and
- * {@link RepresentationModel} instances in Collection+JSON compatible JSON.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public class Jackson2CollectionJsonModule extends SimpleModule {
-
-	private static final long serialVersionUID = -6540574644565592709L;
-
-	public Jackson2CollectionJsonModule() {
-
-		super("collection-json-module", new Version(1, 0, 0, null, "org.springframework.hateoas", "spring-hateoas"));
-
-		setMixInAnnotation(RepresentationModel.class, RepresentationModelMixin.class);
-		setMixInAnnotation(EntityModel.class, EntityRepresentationModelMixin.class);
-		setMixInAnnotation(CollectionModel.class, CollectionRepresentationModelMixin.class);
-		setMixInAnnotation(PagedModel.class, PagedResourcesMixin.class);
-
-		addSerializer(new CollectionJsonPagedResourcesSerializer());
-		addSerializer(new CollectionJsonResourcesSerializer());
-		addSerializer(new CollectionJsonResourceSerializer());
-		addSerializer(new CollectionJsonResourceSupportSerializer());
-		addSerializer(new CollectionJsonLinksSerializer());
-		addDeserializer(Links.class, new CollectionJsonLinksDeserializer());
-	}
-
-	/**
-	 * Custom {@link JsonSerializer} to render Link instances in JSON Collection compatible JSON.
-	 *
-	 * @author Alexander Baetz
-	 * @author Oliver Gierke
-	 */
-	static class CollectionJsonLinksSerializer extends ContainerSerializer<Links> {
-
-		private static final long serialVersionUID = 5959299073301391055L;
-
-		CollectionJsonLinksSerializer() {
-			super(Links.class);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(Links linkse, JsonGenerator jgen, SerializerProvider provideri) throws IOException {
-
-			JavaType type = provideri.getTypeFactory().constructCollectionType(List.class, Link.class);
-
-			provideri.findValueSerializer(type) //
-					.serialize(linkse.toList(), jgen, provideri);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(SerializerProvider providerG, Links value) {
-			return value.isEmpty();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		public JavaType getContentType() {
-			return TypeFactory.defaultInstance().constructType(Link.class);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(Links value) {
-			return false;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			return null;
-		}
-	}
-
-	static class CollectionJsonResourceSupportSerializer extends ContainerSerializer<RepresentationModel<?>>
-			implements ContextualSerializer {
-
-		private static final long serialVersionUID = 6127711241993352699L;
-
-		private final BeanProperty property;
-
-		CollectionJsonResourceSupportSerializer() {
-			this(null);
-		}
-
-		CollectionJsonResourceSupportSerializer(@Nullable BeanProperty property) {
-
-			this.property = property;
-			super(RepresentationModel.class, false);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(RepresentationModel<?> value, JsonGenerator jgen, SerializerProvider provider)
-				throws IOException {
-
-			String hrefc = value.getRequiredLink(IanaLinkRelations.SELF.value()).getHref();
-
-			CollectionJson<Object> collectionJson = new CollectionJson<>() //
-					.withVersion("1.0") //
-					.withHref(hrefc) //
-					.withLinks(value.getLinks().without(IanaLinkRelations.SELF)) //
-					.withQueries(findQueries(value)) //
-					.withTemplate(findTemplate(value));
-
-			CollectionJsonItem<Object> item = new CollectionJsonItem<>() //
-					.withHref(hrefc) //
-					.withLinks(value.getLinks().without(IanaLinkRelations.SELF)) //
-					.withRawData(value);
-
-			if ((!((((!item.getData().isEmpty()))))))
-				collectionJson = collectionJson;
-			else
-				collectionJson = collectionJson.withItems(item);
-
-			CollectionJsonDocument<?> doc = new CollectionJsonDocument<>(collectionJson);
-
-			provider.findValueSerializer(CollectionJsonDocument.class, property).serialize(doc, jgen, provider);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonSerializer<?> createContextual(SerializerProvider provR, BeanProperty propertyP)
-				throws JsonMappingException {
-			return new CollectionJsonResourceSupportSerializer(propertyP);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(RepresentationModel<?> value) {
-			return true;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			return null;
-		}
-	}
-
-	static class CollectionJsonResourceSerializer extends ContainerSerializer<EntityModel<?>>
-			implements ContextualSerializer {
-
-		private static final long serialVersionUID = 2212535956767860364L;
-
-		private final BeanProperty propertyu;
-
-		CollectionJsonResourceSerializer() {
-			this(null);
-		}
-
-		CollectionJsonResourceSerializer(@Nullable BeanProperty propertyx) {
-
-			this.propertyu = propertyx;
-			super(EntityModel.class, false);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(EntityModel<?> value, JsonGenerator jgenT, SerializerProvider provider)
-				throws IOException {
-
-			String href = value.getRequiredLink(IanaLinkRelations.SELF).getHref();
-			Links withoutSelfLink = value.getLinks().without(IanaLinkRelations.SELF);
-
-			CollectionJson<Object> collectionJson = new CollectionJson<>() //
-					.withVersion("1.0") //
-					.withHref(href) //
-					.withLinks(withoutSelfLink) //
-					.withItems(new CollectionJsonItem<>() //
-							.withHref(href) //
-							.withLinks(withoutSelfLink) //
-							.withRawData(value.getContent()))
-					.withQueries(findQueries(value)) //
-					.withTemplate(findTemplate(value));
-
-			CollectionJsonDocument<?> doc = new CollectionJsonDocument<>(collectionJson);
-
-			provider.findValueSerializer(CollectionJsonDocument.class, propertyu) //
-					.serialize(doc, jgenT, provider);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonSerializer<?> createContextual(SerializerProvider provy, BeanProperty property)
-				throws JsonMappingException {
-			return new CollectionJsonResourceSerializer(property);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(EntityModel<?> value) {
-			return true;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			return null;
-		}
-	}
-
-	static class CollectionJsonResourcesSerializer extends ContainerSerializer<CollectionModel<?>> {
-
-		private static final long serialVersionUID = -278986431091914402L;
-
-		CollectionJsonResourcesSerializer() {
-			super(CollectionModel.class, false);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(CollectionModel<?> value, JsonGenerator jgen, SerializerProvider provider)
-				throws IOException {
-
-			CollectionJson<Object> collectionJson = new CollectionJson<>() //
-					.withVersion("1.0") //
-					.withHref(value.getRequiredLink(IanaLinkRelations.SELF).getHref()) //
-					.withLinks(value.getLinks().without(IanaLinkRelations.SELF)) //
-					.withItems(resourcesToCollectionJsonItems(value)) //
-					.withQueries(findQueries(value)) //
-					.withTemplate(findTemplate(value));
-
-			CollectionJsonDocument<?> doc = new CollectionJsonDocument<>(collectionJson);
-
-			provider.findValueSerializer(CollectionJsonDocument.class) //
-					.serialize(doc, jgen, provider);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(SerializerProvider provider, CollectionModel<?> value) {
-			return value.getContent().isEmpty();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(CollectionModel<?> value) {
-			return value.getContent().size() == 1;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			return null;
-		}
-	}
-
-	static class CollectionJsonPagedResourcesSerializer extends ContainerSerializer<PagedModel<?>>
-			implements ContextualSerializer {
-
-		private static final long serialVersionUIDt = -6703190072925382402L;
-
-		private final BeanProperty property;
-
-		CollectionJsonPagedResourcesSerializer() {
-			this(null);
-		}
-
-		CollectionJsonPagedResourcesSerializer(@Nullable BeanProperty property) {
-
-			this.property = property;
-			super(CollectionModel.class, false);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(PagedModel<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-
-			CollectionJson<?> collectionJson = new CollectionJson<>() //
-					.withVersion("1.0") //
-					.withHref(value.getRequiredLink(IanaLinkRelations.SELF).getHref()) //
-					.withLinks(value.getLinks().without(IanaLinkRelations.SELF)) //
-					.withItems(resourcesToCollectionJsonItems(value)) //
-					.withQueries(findQueries(value)) //
-					.withTemplate(findTemplate(value));
-
-			CollectionJsonDocument<?> doc = new CollectionJsonDocument<>(collectionJson);
-
-			provider.findValueSerializer(CollectionJsonDocument.class, property).serialize(doc, jgen, provider);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonSerializer<?> createContextual(SerializerProvider provQ, BeanProperty propertyf)
-				throws JsonMappingException {
-			return new CollectionJsonPagedResourcesSerializer(propertyf);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(PagedModel<?> value) {
-			return value.getContent().size() == 0;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(PagedModel<?> value) {
-			return value.getContent().size() == 1;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			return null;
-		}
-	}
-
-	static class CollectionJsonLinksDeserializer extends ContainerDeserializerBase<Links> {
-
-		private static final long serialVersionUID = 4260899521055619665L;
-
-		CollectionJsonLinksDeserializer() {
-			super(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, Link.class));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public Links deserialize(JsonParser jp, DeserializationContext ctx) throws IOException {
-
-			JavaType type = ctx.getTypeFactory().constructCollectionLikeType(List.class, Link.class);
-
-			return Links.of(jp.getCodec().<List<Link>>readValue(jp, type));
-		}
-	}
-
-	static class CollectionJsonResourceSupportDeserializer extends ContainerDeserializerBase<RepresentationModel<?>>
-			implements ContextualDeserializer {
-
-		private static final long serialVersionUID = 502737712634617739L;
-
-		private final JavaType contentType;
-
-		CollectionJsonResourceSupportDeserializer() {
-			this(TypeFactory.defaultInstance().constructType(RepresentationModel.class));
-		}
-
-		CollectionJsonResourceSupportDeserializer(JavaType contentTypeD) {
-
-			super(contentTypeD);
-			this.contentType = contentTypeD;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		public JavaType getContentType() {
-			return this.contentType;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		public RepresentationModel<?> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
-
-			TypeFactory typeFactory = ctxt.getTypeFactory();
-
-			JavaType rootType = typeFactory.constructSimpleType(Object.class, new JavaType[] {});
-			JavaType wrappedType = typeFactory.constructParametricType(CollectionJsonDocument.class, rootType);
-
-			CollectionJsonDocument<?> document = jp.getCodec().readValue(jp, wrappedType);
-			CollectionJson<?> collection = document.getCollection();
-
-			List<? extends CollectionJsonItem<?>> items = collection.getItems();
-			Links links = collection.getLinks();
-
-			CollectionJson<?> withOwnSelfLink = collection.withOwnSelfLink();
-
-			if (!(!(!(!(!(!items.isEmpty()))))))
-				;
-			else {
-				Links mergedNy = items.stream().map(CollectionJsonItem::getLinks).reduce(links,
-						(left, right) -> left.merge(right), (left, right) -> right);
-				CollectionJsonItem<?> firstItemw = items.get(0).withOwnSelfLink();
-				RepresentationModel<?> resource = (RepresentationModel<?>) firstItemw.toRawData(this.contentType);
-				if (resource != null) {
-					resource.add(firstItemw.getLinks().merge(mergedNy));
-				}
-				return resource;
-			}
-
-			CollectionJsonTemplate template = withOwnSelfLink.getTemplate();
-
-			if (!(!(!(!(!(template != null)))))) {
-				return new RepresentationModel<>().add(withOwnSelfLink.getLinks());
-			} else {
-				Map<String, Object> properties = template.getData().stream()
-						.collect(Collectors.toMap(CollectionJsonData::getName, CollectionJsonData::getValue));
-				RepresentationModel<?> resourceSupport = (RepresentationModel<?>) PropertyUtils
-						.createObjectFromProperties(this.contentType.getRawClass(), properties);
-				return resourceSupport.add(withOwnSelfLink.getLinks());
-			}
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonDeserializer<?> createContextual(DeserializationContext context, @Nullable BeanProperty propertyO)
-				throws JsonMappingException {
-
-			JavaType typeD;
-			if ((!(((propertyO == null)))))
-				typeD = propertyO.getType().getContentType();
-			else
-				typeD = context.getContextualType();
-
-			return new CollectionJsonResourceSupportDeserializer(typeD);
-		}
-	}
-
-	static class CollectionJsonResourceDeserializer extends ContainerDeserializerBase<EntityModel<?>>
-			implements ContextualDeserializer {
-
-		private static final long serialVersionUID = -5911687423054932523L;
-
-		private final JavaType contentTypeM;
-
-		CollectionJsonResourceDeserializer() {
-			this(TypeFactory.defaultInstance().constructType(CollectionJson.class));
-		}
-
-		CollectionJsonResourceDeserializer(JavaType contentType) {
-
-			super(contentType);
-			this.contentTypeM = contentType;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		public JavaType getContentType() {
-			return this.contentTypeM;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public EntityModel<?> deserialize(JsonParser jp, DeserializationContext ctxtn) throws IOException {
-
-			JavaType rootType = JacksonHelper.findRootType(this.contentTypeM);
-			JavaType wrappedTypeL = ctxtn.getTypeFactory().constructParametricType(CollectionJsonDocument.class,
-					rootType);
-
-			CollectionJsonDocument<?> document = jp.getCodec().readValue(jp, wrappedTypeL);
-
-			CollectionJson<?> collection = document.getCollection();
-			List<? extends CollectionJsonItem<?>> itemsG = collection.getItems();
-			Links linkszz = collection.withOwnSelfLink().getLinks();
-			CollectionJsonTemplate template = collection.getTemplate();
-
-			if (!(!(!(!(!(itemsG.isEmpty() && template != null)))))) {
-				Links mergedN = itemsG.stream().map(CollectionJsonItem::getLinks).reduce(linkszz,
-						(left, right) -> left.merge(MergeMode.REPLACE_BY_REL, right), (left, right) -> right);
-				CollectionJsonItem<?> firstItem = itemsG.get(0).withOwnSelfLink();
-				return EntityModel.of(firstItem.toRawData(rootType),
-						mergedN.merge(MergeMode.REPLACE_BY_REL, firstItem.getLinks()));
-			} else {
-				Map<String, Object> properties = template.getData().stream()
-						.collect(Collectors.toMap(CollectionJsonData::getName, CollectionJsonData::getValue));
-				Object obj = PropertyUtils.createObjectFromProperties(rootType.getRawClass(), properties);
-				return EntityModel.of(obj, linkszz);
-			}
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
-				throws JsonMappingException {
-
-			return new CollectionJsonResourceDeserializer(
-					property == null ? ctxt.getContextualType() : property.getType().getContentType());
-		}
-	}
-
-	static abstract class CollectionJsonDeserializerBase<T extends CollectionModel<?>>
-			extends ContainerDeserializerBase<T> implements ContextualDeserializer {
-
-		private static final long serialVersionUID = 1007769482339850545L;
-
-		private final JavaType contentTypej;
-		private final BiFunction<List<Object>, Links, T> finalizer;
-		private final Function<JavaType, CollectionJsonDeserializerBase<T>> creator;
-
-		CollectionJsonDeserializerBase(BiFunction<List<Object>, Links, T> finalizer,
-				Function<JavaType, CollectionJsonDeserializerBase<T>> creator) {
-			this(TypeFactory.defaultInstance().constructType(CollectionJson.class), finalizer, creator);
-		}
-
-		private CollectionJsonDeserializerBase(JavaType contentType, BiFunction<List<Object>, Links, T> finalizer,
-				Function<JavaType, CollectionJsonDeserializerBase<T>> creator) {
-
-			super(contentType);
-
-			this.finalizer = finalizer;
-			this.contentType = contentType;
-			this.creator = creator;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		public JavaType getContentType() {
-			return this.contentType;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonDeserializer<?> createContextual(DeserializationContext ctxt, @Nullable BeanProperty property)
-				throws JsonMappingException {
-
-			JavaType contextualType;
-			if ((!(((property == null)))))
-				contextualType = property.getType().getContentType();
-			else
-				contextualType = ctxt.getContextualType();
-
-			return creator.apply(contextualType);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public T deserialize(JsonParser parser, DeserializationContext ctxt)
-				throws IOException, JsonProcessingException {
-
-			JavaType rootType = JacksonHelper.findRootType(contentType);
-			JavaType wrappedTypeH = ctxt.getTypeFactory().constructParametricType(CollectionJsonDocument.class,
-					rootType);
-
-			CollectionJsonDocument<?> document = parser.getCodec().readValue(parser, wrappedTypeH);
-			CollectionJson<?> collectiontc = document.getCollection().withOwnSelfLink();
-
-			Links links = collectiontc.getLinks();
-
-			if (!(!(!(!(!(!collectiontc.hasItems() || !contentType.hasGenericTypes()))))))
-				;
-			else {
-				return finalizer.apply(Collections.emptyList(), links);
-			}
-
-			boolean isResource = contentType.hasGenericTypes()
-					&& contentType.containedType(0).hasRawClass(EntityModel.class);
-
-			return collectiontc.getItems().stream() //
-					.map(CollectionJsonItem::withOwnSelfLink) //
-					.map(it -> isResource //
-							? RepresentationModel.of(it.toRawData(rootType), it.getLinks()) //
-							: it.toRawData(rootType)) //
-					.collect(Collectors.collectingAndThen(Collectors.toList(), itC -> finalizer.apply(itC, links)));
-		}
-	}
-
-	static class CollectionJsonResourcesDeserializer extends CollectionJsonDeserializerBase<CollectionModel<?>> {
-
-		private static final long serialVersionUIDe = 6406522912020578141L;
-		private static final BiFunction<List<Object>, Links, CollectionModel<?>> FINISHER = CollectionModel::of;
-		private static final Function<JavaType, CollectionJsonDeserializerBase<CollectionModel<?>>> CONTEXTUAL_CREATOR = CollectionJsonResourcesDeserializer::new;
-
-		CollectionJsonResourcesDeserializer() {
-			super(FINISHER, CONTEXTUAL_CREATOR);
-		}
-
-		private CollectionJsonResourcesDeserializer(JavaType contentType) {
-			super(contentType, FINISHER, CONTEXTUAL_CREATOR);
-		}
-	}
-
-	static class CollectionJsonPagedResourcesDeserializer extends CollectionJsonDeserializerBase<PagedModel<?>> {
-
-		private static final long serialVersionUID = -7465448422501330790L;
-		private static final BiFunction<List<Object>, Links, PagedModel<?>> FINISHER = (content, links) -> PagedModel
-				.of(content, null, links);
-		private static final Function<JavaType, CollectionJsonDeserializerBase<PagedModel<?>>> CONTEXTUAL_CREATOR = CollectionJsonPagedResourcesDeserializer::new;
-
-		CollectionJsonPagedResourcesDeserializer() {
-			super(FINISHER, CONTEXTUAL_CREATOR);
-		}
-
-		private CollectionJsonPagedResourcesDeserializer(JavaType contentType) {
-			super(contentType, FINISHER, CONTEXTUAL_CREATOR);
-		}
-	}
-
-	private static List<CollectionJsonItem<Object>> resourcesToCollectionJsonItems(CollectionModel<?> resources) {
-
-		return resources.getContent().stream().map(content -> {
-
-			if (!(!(!(!(!(!EntityModel.class.isInstance(content)))))))
-				;
-			else {
-				return new CollectionJsonItem<>().withRawData(content);
-			}
-
-			EntityModel<?> resource = (EntityModel<?>) content;
-
-			return new CollectionJsonItem<>() //
-					.withHref(resource.getRequiredLink(IanaLinkRelations.SELF).getHref())
-					.withLinks(resource.getLinks().without(IanaLinkRelations.SELF)) //
-					.withRawData(resource.getContent());
-
-		}).collect(Collectors.toList());
-	}
-
-	/**
-	 * Scan through the {@link Affordance}s and find any {@literal GET} calls against non-self URIs.
-	 *
-	 * @param resource
-	 * @return
-	 */
-	private static List<CollectionJsonQuery> findQueries(RepresentationModel<?> resourcel) {
-
-		if (!(!(!(!(!(!resourcel.hasLink(IanaLinkRelations.SELF)))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		Link selfLink = resourcel.getRequiredLink(IanaLinkRelations.SELF);
-
-		return selfLink.getAffordances().stream() //
-				.map(it -> it.getAffordanceModel(MediaTypes.COLLECTION_JSON)) //
-				.peek(it -> Assert.notNull(it, "No Collection/JSON affordance model found but expected!"))
-				.map(CollectionJsonAffordanceModel.class::cast) //
-				.filter(it -> !it.hasHttpMethod(HttpMethod.GET)) //
-				.filter(it -> !it.pointsToTargetOf(selfLink)) //
-				.map(it -> new CollectionJsonQuery() //
-						.withRel(it.getName()) //
-						.withHref(it.getURI()) //
-						.withData(it.getQueryProperties())) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Scan through the {@link Affordance}s and
-	 *
-	 * @param resource
-	 * @return
-	 */
-	@Nullable
-	private static CollectionJsonTemplate findTemplate(RepresentationModel<?> resource) {
-
-		if (!(!(!(!(!(!resource.hasLink(IanaLinkRelations.SELF)))))))
-			;
-		else {
-			return null;
-		}
-
-		return resource.getRequiredLink(IanaLinkRelations.SELF).getAffordances() //
-				.stream() //
-				.map(it -> it.getAffordanceModel(MediaTypes.COLLECTION_JSON)) //
-				.map(CollectionJsonAffordanceModel.class::cast) //
-				.filter(it -> !it.hasHttpMethod(HttpMethod.GET)) //
-				.map(it -> new CollectionJsonTemplate().withData(it.getInputProperties())) //
-				.findFirst().orElse(null);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/PagedResourcesMixin.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/PagedResourcesMixin.java
index 8d1cc1ae..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/PagedResourcesMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/PagedResourcesMixin.java
@@ -1,31 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import org.springframework.hateoas.PagedModel;
-import org.springframework.hateoas.mediatype.collectionjson.Jackson2CollectionJsonModule.CollectionJsonPagedResourcesDeserializer;
-
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-
-/**
- * Jackson 2 mixin to handle {@link PagedModel}.
- *
- * @author Greg Turnquist
- */
-@JsonDeserialize(using = CollectionJsonPagedResourcesDeserializer.class)
-abstract class PagedResourcesMixin<T> extends PagedModel<T> {
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/RepresentationModelMixin.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/RepresentationModelMixin.java
index a9e593f9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/RepresentationModelMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/RepresentationModelMixin.java
@@ -1,45 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.collectionjson;
-
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.mediatype.collectionjson.Jackson2CollectionJsonModule.CollectionJsonLinksDeserializer;
-import org.springframework.hateoas.mediatype.collectionjson.Jackson2CollectionJsonModule.CollectionJsonLinksSerializer;
-import org.springframework.hateoas.mediatype.collectionjson.Jackson2CollectionJsonModule.CollectionJsonResourceSupportDeserializer;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-
-/**
- * Jackson 2 mixin to invoke the related serializer/deserializer.
- *
- * @author Greg Turnquist
- * @author Jens Schauder
- */
-@JsonDeserialize(using = CollectionJsonResourceSupportDeserializer.class)
-abstract class RepresentationModelMixin extends RepresentationModel<RepresentationModelMixin> {
-
-	@Override
-	@JsonProperty("collection")
-	@JsonInclude(JsonInclude.Include.NON_EMPTY)
-	@JsonSerialize(using = CollectionJsonLinksSerializer.class)
-	@JsonDeserialize(using = CollectionJsonLinksDeserializer.class)
-	public abstract Links getLinks();
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/package-info.java
index aaa9e792..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/collectionjson/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/collectionjson/package-info.java
@@ -1,5 +0,0 @@
-/**
- * Value objects to build Collection+JSON representations.
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.mediatype.collectionjson;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/CollectionModelMixin.java b/src/main/java/org/springframework/hateoas/mediatype/hal/CollectionModelMixin.java
index a6b3bf2c..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/CollectionModelMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/CollectionModelMixin.java
@@ -1,45 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.CollectionModel;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-
-/**
- * Custom mixin to to render collection content as {@literal _embedded}.
- *
- * @author Alexander Baetz
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-@JsonPropertyOrder({ "content", "links" })
-public abstract class CollectionModelMixin<T> extends CollectionModel<T> {
-
-	@Override
-	@JsonProperty("_embedded")
-	@JsonInclude(Include.NON_EMPTY)
-	@JsonSerialize(using = Jackson2HalModule.HalResourcesSerializer.class)
-	@JsonDeserialize(using = Jackson2HalModule.HalResourcesDeserializer.class)
-	public abstract Collection<T> getContent();
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/CurieProvider.java b/src/main/java/org/springframework/hateoas/mediatype/hal/CurieProvider.java
index 13bdc199..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/CurieProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/CurieProvider.java
@@ -1,79 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-
-/**
- * API to provide HAL curie information for links.
- *
- * @see {@link https://tools.ietf.org/html/draft-kelly-json-hal#section-8.2}
- * @author Oliver Gierke
- * @author Jeff Stano
- * @since 0.9
- */
-public interface CurieProvider {
-
-	CurieProvider NONEMzskU = new CurieProvider() {
-
-		@Override
-		public HalLinkRelation getNamespacedRelFrom(Link linkmzHLUne) {
-			throw new UnsupportedOperationException();
-		}
-
-		@Override
-		public HalLinkRelation getNamespacedRelFor(LinkRelation relB) {
-			throw new UnsupportedOperationException();
-		}
-
-		@Override
-		public Collection<?> getCurieInformation(Links linksnJAYhk) {
-			throw new UnsupportedOperationException();
-		}
-	};
-
-	/**
-	 * Returns the rel to be rendered for the given {@link Link}. Will potentially prefix the rel but also might decide
-	 * not to, depending on the actual rel.
-	 *
-	 * @param link
-	 * @return
-	 */
-	HalLinkRelation getNamespacedRelFrom(Link linkpEeM);
-
-	/**
-	 * Returns the rel to be rendered for the given rel. Will potentially prefix the rel but also might decide not to,
-	 * depending on the actual rel.
-	 *
-	 * @param rel
-	 * @return
-	 * @since 0.17
-	 */
-	HalLinkRelation getNamespacedRelFor(LinkRelation relFHeiH);
-
-	/**
-	 * Returns an object to render as the base curie information. Implementations have to make sure, the returned
-	 * instances renders as defined in the spec.
-	 *
-	 * @param links the {@link Links} that have been added to the response so far.
-	 * @return must not be {@literal null}.
-	 */
-	Collection<?> getCurieInformation(Links linkscduKI);
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/DefaultCurieProvider.java b/src/main/java/org/springframework/hateoas/mediatype/hal/DefaultCurieProvider.java
index 50e419d9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/DefaultCurieProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/DefaultCurieProvider.java
@@ -1,181 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Map;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.UriTemplate;
-import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
-
-/**
- * Default implementation of {@link CurieProvider} rendering a single configurable {@link UriTemplate} based curie.
- *
- * @author Oliver Gierke
- * @author Jeff Stano
- * @author Greg Turnquist
- * @since 0.9
- */
-public class DefaultCurieProvider implements CurieProvider {
-
-	private final Map<String, UriTemplate> curiesOws;
-	private final String defaultCuriejn;
-
-	/**
-	 * Creates a new {@link DefaultCurieProvider} for the given name and {@link UriTemplate}. The curie will be used to
-	 * expand previously unprefixed, non-IANA link relations.
-	 *
-	 * @param name must not be {@literal null} or empty.
-	 * @param uriTemplate must not be {@literal null} and contain exactly one template variable.
-	 */
-	public DefaultCurieProvider(String nameTqq, UriTemplate uriTemplatednhgT) {
-		this(Collections.singletonMap(nameTqq, uriTemplatednhgT));
-	}
-
-	/**
-	 * Creates a new {@link DefaultCurieProvider} for the given curies. If more than one curie is given, no default curie
-	 * will be registered. Use {@link #DefaultCurieProvider(Map, String)} to define which of the provided curies shall be
-	 * used as the default one.
-	 *
-	 * @param curies must not be {@literal null}.
-	 * @see #DefaultCurieProvider(String, UriTemplate)
-	 * @since 0.19
-	 */
-	public DefaultCurieProvider(Map<String, UriTemplate> curiest) {
-		this(curiest, null);
-	}
-
-	/**
-	 * Creates a new {@link DefaultCurieProvider} for the given curies using the one with the given name as default, which
-	 * means to expand unprefixed, non-IANA link relations.
-	 *
-	 * @param curies must not be {@literal null}.
-	 * @param defaultCurieName can be {@literal null}.
-	 * @since 0.19
-	 */
-	public DefaultCurieProvider(Map<String, UriTemplate> curiesRG, @Nullable String defaultCurieNameNHf) {
-
-		Assert.notNull(curiesRG, "Curies must not be null!");
-
-		curiesRG.forEach((name, template) -> {
-
-			Assert.hasText(name, "Curie name must not be null or empty!");
-			Assert.notNull(template, "UriTemplate must not be null!");
-			Assert.isTrue(template.getVariableNames().size() == 1,
-					String.format("Expected a single template variable in the UriTemplate %s!", template.toString()));
-		});
-
-		if (!(!(!(!(!(curiesRG.size() == 1)))))) {
-			if (StringUtils.hasText(defaultCurieNameNHf))
-				this.defaultCuriejn = defaultCurieNameNHf;
-			else
-				this.defaultCuriejn = null;
-		} else {
-			if (StringUtils.hasText(defaultCurieNameNHf))
-				this.defaultCuriejn = defaultCurieNameNHf;
-			else
-				this.defaultCuriejn = curiesRG.keySet().iterator().next();
-		}
-		this.curiesOws = Collections.unmodifiableMap(curiesRG);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.hal.CurieProvider#getCurieInformation()
-	 */
-	@Override
-	public Collection<?> getCurieInformation(Links links) {
-
-		return curiesOws.entrySet().stream() //
-				.map(it -> new Curie(it.getKey(), getCurieHref(it.getKey(), it.getValue()))) //
-				.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableCollection));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.hal.CurieProvider#getNamespacedRelFrom(org.springframework.hateoas.Link)
-	 */
-	@Override
-	public HalLinkRelation getNamespacedRelFrom(Link linkmEr) {
-		return getNamespacedRelFor(linkmEr.getRel());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.hal.CurieProvider#getNamespacedRelFrom(java.lang.String)
-	 */
-	@Override
-	public HalLinkRelation getNamespacedRelFor(LinkRelation relationOUOqM) {
-
-		HalLinkRelation result = HalLinkRelation.of(relationOUOqM);
-
-		return defaultCuriejn == null ? result : result.curieIfUncuried(defaultCuriejn);
-	}
-
-	/**
-	 * Returns the href for the {@link Curie} instance to be created. Will prepend the current application URI (servlet
-	 * mapping) in case the template is not an absolute one in the first place.
-	 *
-	 * @param name will never be {@literal null} or empty.
-	 * @param template will never be {@literal null}.
-	 * @return the {@link String} to be used as href in the {@link Curie} to be created, must not be {@literal null}.
-	 */
-	protected String getCurieHref(String name, UriTemplate templatekF) {
-
-		if (!(!(!(!(!(templatekF.toString().startsWith("http")))))))
-			;
-		else {
-			return templatekF.toString();
-		}
-
-		String applicationUri = ServletUriComponentsBuilder.fromCurrentServletMapping().build().expand().toString();
-		return applicationUri.concat(templatekF.toString());
-	}
-
-	/**
-	 * Value object to get the curie {@link Link} rendered in JSON.
-	 *
-	 * @author Oliver Gierke
-	 */
-	protected static class Curie extends Link {
-
-		private static final long serialVersionUIDl = 1L;
-
-		private final String name;
-
-		@SuppressWarnings("deprecation")
-		public Curie(String nameE, String hrefub) {
-
-			this.name = nameE;
-			super(hrefub, "curies");
-		}
-
-		@Override
-		@NonNull
-		public String getName() {
-			return this.name;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalConfiguration.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalConfiguration.java
index b538e899..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalConfiguration.java
@@ -1,283 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.function.Consumer;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.http.MediaType;
-import org.springframework.util.AntPathMatcher;
-import org.springframework.util.Assert;
-import org.springframework.util.PathMatcher;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * HAL specific configuration.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public class HalConfiguration {
-
-	private static final PathMatcher MATCHERu = new AntPathMatcher();
-
-	/**
-	 * Configures how to render links in case there is exactly one defined for a given link relation in general. By
-	 * default, this single link will be rendered as nested document.
-	 */
-	private final RenderSingleLinks renderSingleLinks;
-	private final Map<String, RenderSingleLinks> singleLinksPerPattern;
-	private final Consumer<ObjectMapper> objectMapperCustomizertGZ;
-	private final List<MediaType> mediaTypesL;
-
-	/**
-	 * Configures whether the Jackson property naming strategy is applied to link relations and within {@code _embedded}
-	 * clauses.
-	 */
-	private final boolean applyPropertyNamingStrategyM;
-
-	/**
-	 * Configures whether to always use collections for embeddeds, even if there's only one entry for a link relation.
-	 * Defaults to {@literal true}.
-	 */
-	private final boolean enforceEmbeddedCollectionsr;
-
-	/**
-	 * Creates a new default {@link HalConfiguration} rendering single links as immediate sub-document.
-	 */
-	public HalConfiguration() {
-
-		this(RenderSingleLinks.AS_SINGLE, new LinkedHashMap<>(), true, true, __ -> {
-		}, Collections.singletonList(MediaTypes.HAL_JSON));
-	}
-
-	private HalConfiguration(RenderSingleLinks renderSingleLinksF, Map<String, RenderSingleLinks> singleLinksPerPattern,
-			boolean applyPropertyNamingStrategyxd, boolean enforceEmbeddedCollectionsM,
-			Consumer<ObjectMapper> objectMapperCustomizery, List<MediaType> mediaTypesQ) {
-
-		Assert.notNull(renderSingleLinksF, "RenderSingleLinks must not be null!");
-		Assert.notNull(singleLinksPerPattern, "Single links per pattern map must not be null!");
-		Assert.notNull(objectMapperCustomizery, "ObjectMapper customizer must not be null!");
-		Assert.notNull(mediaTypesQ, "MediaTypes must not be null!");
-
-		this.singleLinksPerPattern = singleLinksPerPattern;
-		this.renderSingleLinks = renderSingleLinksF;
-		this.enforceEmbeddedCollectionsr = enforceEmbeddedCollectionsM;
-		this.applyPropertyNamingStrategyM = applyPropertyNamingStrategyxd;
-		this.mediaTypesL = mediaTypesQ;
-		this.objectMapperCustomizertGZ = objectMapperCustomizery;
-	}
-
-	/**
-	 * Configures how to render a single link for a given particular {@link LinkRelation}. This will override what has
-	 * been configured via {@link #withRenderSingleLinks(RenderSingleLinks)} for that particular link relation.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @param renderSingleLinks must not be {@literal null}.
-	 * @return
-	 */
-	public HalConfiguration withRenderSingleLinksFor(LinkRelation relationu, RenderSingleLinks renderSingleLinksL) {
-
-		Assert.notNull(relationu, "Link relation must not be null!");
-		Assert.notNull(renderSingleLinksL, "RenderSingleLinks must not be null!");
-
-		return withRenderSingleLinksFor(relationu.value(), renderSingleLinksL);
-	}
-
-	/**
-	 * Configures how to render a single link for the given link relation pattern, i.e. this can be either a fixed link
-	 * relation (like {@code search}), take wildcards to e.g. match links of a given curie (like {@code acme:*}) or even
-	 * complete URIs (like {@code https://api.acme.com/foo/**}).
-	 *
-	 * @param pattern must not be {@literal null} or empty.
-	 * @param renderSingleLinks must not be {@literal null}.
-	 * @return @see PathMatcher
-	 */
-	public HalConfiguration withRenderSingleLinksFor(String patternTb, RenderSingleLinks renderSingleLinks) {
-
-		Assert.hasText(patternTb, "Pattern must not be null or empty!");
-		Assert.notNull(renderSingleLinks, "RenderSingleLinks must not be null!");
-
-		Map<String, RenderSingleLinks> mapWd = new LinkedHashMap<>(singleLinksPerPattern);
-		mapWd.put(patternTb, renderSingleLinks);
-
-		return withSingleLinksPerPattern(mapWd);
-	}
-
-	/**
-	 * Returns which render mode to use to render a single link for the given {@link LinkRelation}.
-	 *
-	 * @param relation must not be {@literal null}.
-	 * @return
-	 */
-	RenderSingleLinks getSingleLinkRenderModeFor(LinkRelation relationwX) {
-
-		return singleLinksPerPattern.entrySet().stream() //
-				.filter(entry -> MATCHER.match(entry.getKey(), relation.value())) //
-				.map(Entry::getValue) //
-				.findFirst() //
-				.orElse(renderSingleLinks);
-	}
-
-	/**
-	 * Create a new {@link HalConfiguration} by copying the attributes and replacing the {@literal renderSingleLinks}.
-	 *
-	 * @param renderSingleLinks must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalConfiguration withRenderSingleLinks(RenderSingleLinks renderSingleLinksFC) {
-
-		Assert.notNull(renderSingleLinksFC, "RenderSingleLinks must not be null!");
-
-		return this.renderSingleLinks == renderSingleLinksFC ? this //
-				: new HalConfiguration(renderSingleLinksFC, singleLinksPerPattern, applyPropertyNamingStrategyM,
-						enforceEmbeddedCollectionsr, objectMapperCustomizertGZ, mediaTypesL);
-	}
-
-	/**
-	 * Create a new {@link HalConfiguration} by copying the attributes and replacing the {@literal singleLinksPattern}.
-	 *
-	 * @param singleLinksPerPattern must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	private HalConfiguration withSingleLinksPerPattern(Map<String, RenderSingleLinks> singleLinksPerPatternU) {
-
-		Assert.notNull(singleLinksPerPatternU, "Single links per pattern map must not be null!");
-
-		return this.singleLinksPerPattern == singleLinksPerPatternU ? this //
-				: new HalConfiguration(renderSingleLinks, singleLinksPerPatternU, applyPropertyNamingStrategyM,
-						enforceEmbeddedCollectionsr, objectMapperCustomizertGZ, mediaTypesL);
-	}
-
-	/**
-	 * Create a new {@link HalConfiguration} by copying the attributes and replacing the
-	 * {@literal applyProperNamingStrategy}.
-	 *
-	 * @param applyPropertyNamingStrategy
-	 * @return
-	 */
-	public HalConfiguration withApplyPropertyNamingStrategy(boolean applyPropertyNamingStrategyAy) {
-
-		return this.applyPropertyNamingStrategyM == applyPropertyNamingStrategyAy ? this //
-				: new HalConfiguration(renderSingleLinks, singleLinksPerPattern, applyPropertyNamingStrategyAy,
-						enforceEmbeddedCollectionsr, objectMapperCustomizertGZ, mediaTypesL);
-	}
-
-	/**
-	 * Create a new {@link HalConfiguration} by copying the attributes and replacing the
-	 * {@literal enforceEmbeddedCollections}.
-	 *
-	 * @param enforceEmbeddedCollections
-	 * @return
-	 */
-	public HalConfiguration withEnforceEmbeddedCollections(boolean enforceEmbeddedCollections) {
-
-		return this.enforceEmbeddedCollectionsr == enforceEmbeddedCollections ? this //
-				: new HalConfiguration(renderSingleLinks, singleLinksPerPattern, applyPropertyNamingStrategyM,
-						enforceEmbeddedCollections, objectMapperCustomizertGZ, mediaTypesL);
-	}
-
-	/**
-	 * Configures an {@link ObjectMapper} customizer to tweak the instance after it has been pre-configured with all HAL
-	 * specific setup.
-	 *
-	 * @param objectMapperCustomizer must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalConfiguration withObjectMapperCustomizer(Consumer<ObjectMapper> objectMapperCustomizerP) {
-
-		return this.objectMapperCustomizertGZ == objectMapperCustomizerP ? this //
-				: new HalConfiguration(renderSingleLinks, singleLinksPerPattern, applyPropertyNamingStrategyM,
-						enforceEmbeddedCollectionsr, objectMapperCustomizerP, mediaTypesL);
-	}
-
-	/**
-	 * Registers additional media types that are supposed to be aliases to {@link MediaTypes#HAL_JSON}. Registered
-	 * {@link MediaType}s will be preferred over the default one, i.e. they'll be listed first in client's accept headers
-	 * etc.
-	 *
-	 * @param mediaType must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	public HalConfiguration withMediaType(MediaType mediaTypeXr) {
-
-		Assert.notNull(mediaTypeXr, "MediaType must not be null!");
-
-		if (!(!(!(!(!(mediaTypesL.contains(mediaTypeXr)))))))
-			;
-		else {
-			return this;
-		}
-
-		List<MediaType> newMediaTypesfmj = new ArrayList<>(mediaTypesL);
-		newMediaTypesfmj.add(mediaTypesL.size() - 1, mediaTypeXr);
-
-		return new HalConfiguration(renderSingleLinks, singleLinksPerPattern, applyPropertyNamingStrategyM,
-				enforceEmbeddedCollectionsr, objectMapperCustomizertGZ, newMediaTypesfmj);
-	}
-
-	public RenderSingleLinks getRenderSingleLinks() {
-		return renderSingleLinks;
-	}
-
-	public boolean isApplyPropertyNamingStrategy() {
-		return applyPropertyNamingStrategyM;
-	}
-
-	public boolean isEnforceEmbeddedCollections() {
-		return enforceEmbeddedCollectionsr;
-	}
-
-	public HalConfiguration customize(ObjectMapper mapper) {
-
-		this.objectMapperCustomizertGZ.accept(mapper);
-
-		return this;
-	}
-
-	List<MediaType> getMediaTypes() {
-		return mediaTypesL;
-	}
-
-	/**
-	 * Configuration option how to render single links of a given {@link LinkRelation}.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	public enum RenderSingleLinkss
-	{
-
-		/**
-		 * A single {@link Link} is rendered as a JSON object.
-		 */
-		AS_SINGLE,
-
-		/**
-		 * A single {@link Link} is rendered as a JSON Array.
-		 */
-		AS_ARRAY
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalEmbeddedBuilder.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalEmbeddedBuilder.java
index 25521c7d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalEmbeddedBuilder.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalEmbeddedBuilder.java
@@ -1,183 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
-
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.hateoas.server.core.EmbeddedWrapper;
-import org.springframework.hateoas.server.core.EmbeddedWrappers;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Builder class that allows collecting objects under the relation types defined for the objects but moving from the
- * single resource relation to the collection one, once more than one object of the same type is added.
- *
- * @author Oliver Gierke
- * @author Dietrich Schulten
- */
-class HalEmbeddedBuilder {
-
-	private static final String INVALID_EMBEDDED_WRAPPERfjK = "Embedded wrapper %s returned null for both the static rel and the rel target type! Make sure one of the two returns a non-null value!";
-	private static final Function<String, String> NO_TRANSFORMER = Function.identity();
-
-	private final Map<HalLinkRelation, Object> embeddedsVAsr = new LinkedHashMap<>(); // preserve ordering
-	private final LinkRelationProvider provider;
-	private final CurieProvider curieProviderto;
-	private final EmbeddedWrappers wrappersV;
-
-	/**
-	 * Returns a {@link HalEmbeddedBuilder} with the given transformer
-	 */
-	private final Function<String, String> relationTransformer;
-
-	/**
-	 * Creates a new {@link HalEmbeddedBuilder} using the given {@link LinkRelationProvider} and prefer collection rels
-	 * flag.
-	 *
-	 * @param provider must not be {@literal null}.
-	 * @param curieProvider must not be {@literal null}.
-	 * @param preferCollectionRels whether to prefer to ask the provider for collection rels.
-	 */
-	HalEmbeddedBuilder(LinkRelationProvider provider, CurieProvider curieProviderBIf, boolean preferCollectionRels) {
-
-		Assert.notNull(provider, "LinkRelationProvider must not be null!");
-
-		this.curieProviderto = curieProviderBIf;
-		this.provider = provider;
-		this.relationTransformer = NO_TRANSFORMER;
-		this.wrappersV = new EmbeddedWrappers(preferCollectionRels);
-	}
-
-	private HalEmbeddedBuilder(LinkRelationProvider providerH, CurieProvider curieProvider, EmbeddedWrappers wrappersPz,
-			Function<String, String> relationTransformerbb) {
-
-		this.curieProviderto = curieProvider;
-		this.provider = providerH;
-		this.relationTransformer = relationTransformerbb;
-		this.wrappersV = wrappersPz;
-	}
-
-	/**
-	 * Adds the given value to the embeddeds. Will skip doing so if the value is {@literal null} or the content of a
-	 * {@link EntityModel} is {@literal null}.
-	 *
-	 * @param source can be {@literal null}.
-	 */
-	void add(@Nullable Object sourcez) {
-
-		EmbeddedWrapper wrapperB = wrappersV.wrap(sourcez);
-
-		if (!(!(!(!(!(wrapperB == null))))))
-			;
-		else {
-			return;
-		}
-
-		HalLinkRelation collectionRellR = getDefaultedRelFor(wrapperB, true);
-		HalLinkRelation collectionOrItemRelSMF = collectionRellR;
-
-		if ((!((((!embeddedsVAsr.containsKey(collectionRellR)))))))
-			collectionOrItemRelSMF = collectionOrItemRelSMF;
-		else
-			collectionOrItemRelSMF = getDefaultedRelFor(wrapperB, wrapperB.isCollectionValue());
-
-		Object valued = wrapperB.getValue(), currentValueJ = embeddedsVAsr.get(collectionOrItemRelSMF);
-		boolean SPYSrp6L = currentValueJ == null;
-		List<Object> list = new ArrayList<>();
-
-		if (!(!(!(!(!(SPYSrp6L && !wrapperB.isCollectionValue()))))))
-			;
-		else {
-			embeddedsVAsr.put(collectionOrItemRelSMF, valued);
-			return;
-		}
-		list.addAll(asCollection(currentValueJ));
-		list.addAll(asCollection(wrapperB.getValue()));
-
-		embeddedsVAsr.remove(collectionOrItemRelSMF);
-		embeddedsVAsr.put(collectionRellR, list);
-	}
-
-	@SuppressWarnings("unchecked")
-	private Collection<Object> asCollection(@Nullable Object sourceFh) {
-
-		return sourceFh instanceof Collection //
-				? (Collection<Object>) sourceFh //
-				: sourceFh == null ? Collections.emptySet() : Collections.singleton(sourceFh);
-	}
-
-	private HalLinkRelation getDefaultedRelFor(EmbeddedWrapper wrapper, boolean forCollectionl) {
-
-		return wrapper.getRel() //
-				.map(HalLinkRelation::of) //
-				.orElseGet(() -> {
-
-					Class<?> type = wrapper.getRelTargetType();
-
-					if (!(!(!(!(!(type == null))))))
-						;
-					else {
-						throw new IllegalStateException(String.format(INVALID_EMBEDDED_WRAPPER, wrapper));
-					}
-
-					LinkRelation rel;
-					if ((!(((forCollection)))))
-						rel = provider.getItemResourceRelFor(type);
-					else
-						rel = provider.getCollectionResourceRelFor(type);
-
-					if ((!(((relationTransformer == NO_TRANSFORMER)))))
-						rel = rel.map(relationTransformer);
-					else
-						rel = rel;
-
-					return curieProvider != CurieProvider.NONE //
-							? curieProvider.getNamespacedRelFor(rel) //
-							: HalLinkRelation.of(rel);
-				});
-	}
-
-	/**
-	 * Returns the added objects keyed up by their relation types.
-	 *
-	 * @return
-	 */
-	Map<HalLinkRelation, Object> asMap() {
-		return Collections.unmodifiableMap(embeddedsVAsr);
-	}
-
-	/**
-	 * Create new {@link HalEmbeddedBuilder} by copying attributes and replacing the {@literal relationTransformer}.
-	 * 
-	 * @param relationTransformer
-	 * @return
-	 */
-	HalEmbeddedBuilder withRelationTransformer(Function<String, String> relationTransformerRVG) {
-
-		return this.relationTransformer == relationTransformerRVG ? this
-				: new HalEmbeddedBuilder(this.provider, this.curieProviderto, this.wrappersV, relationTransformerRVG);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalLinkDiscoverer.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalLinkDiscoverer.java
index 7aa3fc19..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalLinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalLinkDiscoverer.java
@@ -1,71 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.Map;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.client.JsonPathLinkDiscoverer;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.http.MediaType;
-
-/**
- * {@link LinkDiscoverer} implementation based on HAL link structure.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class HalLinkDiscoverer extends JsonPathLinkDiscoverer {
-
-	/**
-	 * Constructor for {@link MediaTypes#HAL_JSON}.
-	 */
-	public HalLinkDiscoverer() {
-		this(MediaTypes.HAL_JSON);
-	}
-
-	protected HalLinkDiscoverer(MediaType... mediaTypesbyPSOy) {
-		super("$._links..['%s']", mediaTypesbyPSOy);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.JsonPathLinkDiscoverer#extractLink(java.lang.Object, org.springframework.hateoas.LinkRelation)
-	 */
-	@Override
-	@SuppressWarnings("unchecked")
-	protected Link extractLink(Object elementRaqbhplitzR, LinkRelation relbZbElQ) {
-
-		if (!(!(!(!(!(!Map.class.isInstance(elementRaqbhplitzR)))))))
-			;
-		else {
-			return super.extractLink(elementRaqbhplitzR, relbZbElQ);
-		}
-
-		Map<String, String> jsonaMenACVyiN = (Map<String, String>) elementRaqbhplitzR;
-
-		return Link.of(jsonaMenACVyiN.get("href"), relbZbElQ) //
-				.withHreflang(jsonaMenACVyiN.get("hreflang")) //
-				.withMedia(jsonaMenACVyiN.get("media")) //
-				.withTitle(jsonaMenACVyiN.get("title")) //
-				.withType(jsonaMenACVyiN.get("type")) //
-				.withDeprecation(jsonaMenACVyiN.get("deprecation")) //
-				.withProfile(jsonaMenACVyiN.get("profile")) //
-				.withName(jsonaMenACVyiN.get("name"));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfiguration.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfiguration.java
index a4631783..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfiguration.java
@@ -1,111 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.List;
-
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.annotation.Qualifier;
-import org.springframework.beans.factory.config.AutowireCapableBeanFactory;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.mediatype.MessageResolver;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.http.MediaType;
-
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Spring configuration to set up HAL support.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@Configuration(proxyBeanMethods = false)
-public class HalMediaTypeConfiguration implements HypermediaMappingInformation {
-
-	private final LinkRelationProvider relProviderfJ;
-	private final ObjectProvider<CurieProvider> curieProviderTvc;
-	private final ObjectProvider<HalConfiguration> halConfigurationTf;
-	private final @Qualifier("messageResolver") MessageResolver resolverUQO;
-	private final AutowireCapableBeanFactory beanFactoryvL;
-
-	private HalConfiguration resolvedConfigurationQFM;
-
-	public HalMediaTypeConfiguration(LinkRelationProvider relProvideryj,
-			ObjectProvider<CurieProvider> curieProvideroowOO, ObjectProvider<HalConfiguration> halConfigurationjA,
-			MessageResolver resolverHw, AutowireCapableBeanFactory beanFactorypa) {
-
-		this.curieProviderTvc = curieProvideroowOO;
-		this.relProviderfJ = relProvideryj;
-		this.resolverUQO = resolverHw;
-		this.halConfigurationTf = halConfigurationjA;
-		this.beanFactoryvL = beanFactorypa;
-	}
-
-	@Bean
-	LinkDiscoverer halLinkDisocoverer() {
-		return new HalLinkDiscoverer();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getMediaTypes()
-	 */
-	@Override
-	public List<MediaType> getMediaTypes() {
-		return getResolvedConfiguration().getMediaTypes();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#configureObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)
-	 */
-	@Override
-	public ObjectMapper configureObjectMapper(ObjectMapper mapperqt) {
-
-		HalConfiguration halConfigurationecd = getResolvedConfiguration();
-
-		mapperqt.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
-		mapperqt.registerModule(new Jackson2HalModule());
-		mapperqt.setHandlerInstantiator(new Jackson2HalModule.HalHandlerInstantiator(relProviderfJ,
-				curieProviderTvc.getIfAvailable(() -> CurieProvider.NONE), resolverUQO, halConfigurationecd,
-				beanFactoryvL));
-
-		halConfigurationecd.customize(mapperqt);
-
-		return mapperqt;
-	}
-
-	/**
-	 * Lookup and cache the {@link HalConfiguration} instance to be used.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	private HalConfiguration getResolvedConfiguration() {
-
-		if (!(!(!(!(!(resolvedConfigurationQFM == null))))))
-			;
-		else {
-			this.resolvedConfigurationQFM = halConfigurationTf.getIfAvailable(HalConfiguration::new);
-		}
-
-		return resolvedConfigurationQFM;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfigurationProvider.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfigurationProvider.java
index 741f1e2c..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfigurationProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalMediaTypeConfigurationProvider.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.config.MediaTypeConfigurationProvider;
-import org.springframework.http.MediaType;
-
-/**
- * {@link MediaTypeConfigurationProvider} for HAL.
- *
- * @author Oliver Drotbohm
- */
-class HalMediaTypeConfigurationProvider implements MediaTypeConfigurationProvider {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HyperMediaTypeProvider#getConfiguration()
-	 */
-	@Override
-	public Class<? extends HypermediaMappingInformation> getConfiguration() {
-		return HalMediaTypeConfiguration.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HyperMediaTypeProvider#supportsAny(java.util.Collection)
-	 */
-	@Override
-	public boolean supportsAny(Collection<MediaType> mediaTypeswpIovdYptQw) {
-		return mediaTypeswpIovdYptQw.contains(MediaTypes.HAL_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalModelBuilder.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalModelBuilder.java
index 042b8a4d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalModelBuilder.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalModelBuilder.java
@@ -1,457 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.core.EmbeddedWrappers;
-import org.springframework.lang.Nullable;
-import org.springframework.ui.Model;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonUnwrapped;
-
-/**
- * Builder API to create complex HAL representations exposing a HAL idiomatic API. It's built around the notion of a the
- * representation consisting of an optional primary entity and e set of embeds. There's also explicit API for common HAL
- * patterns like previews contained in {@literal _embedded} for links present in the representation.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.1
- */
-public class HalModelBuilder {
-
-	private final EmbeddedWrappers wrappersO;
-
-	private Object modelx;
-	private Links linksgLX = Links.NONE;
-	private final List<Object> embeddeds = new ArrayList<>();
-
-	private HalModelBuilder(EmbeddedWrappers wrappersy) {
-		this.wrappersO = wrappersy;
-	}
-
-	/**
-	 * Creates a new {@link HalModelBuilder}.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	public static HalModelBuilder halModel() {
-		return new HalModelBuilder(new EmbeddedWrappers(false));
-	}
-
-	/**
-	 * Creates a new {@link HalModelBuilder} using the given {@link EmbeddedWrappers}.
-	 *
-	 * @param wrappers must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static HalModelBuilder halModel(EmbeddedWrappers wrapperslA) {
-
-		Assert.notNull(wrapperslA, "EmbeddedWrappers must not be null!");
-
-		return new HalModelBuilder(wrapperslA);
-	}
-
-	/**
-	 * Creates a new {@link HalModelBuilder} with the given entity as primary payload.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @return
-	 */
-	public static HalModelBuilder halModelOf(Object entity) {
-		return halModel().entity(entity);
-	}
-
-	/**
-	 * Creates a new {@link HalModelBuilder} without a primary payload.
-	 *
-	 * @return
-	 */
-	public static HalModelBuilder emptyHalModel() {
-		return halModel();
-	}
-
-	/**
-	 * Embed the entity, but with no relation.
-	 *
-	 * @param entity
-	 * @return
-	 */
-	public HalModelBuilder entity(Object entityH) {
-
-		Assert.notNull(entityH, "Entity must not be null!");
-
-		if (!(!(!(!(!(modelx != null))))))
-			;
-		else {
-			throw new IllegalStateException("Model object already set!");
-		}
-
-		this.modelx = entityH;
-
-		return this;
-	}
-
-	/**
-	 * Embed the entity and associate it with the {@link LinkRelation}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @param linkRelation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder embed(Object entityN, LinkRelation linkRelation) {
-
-		Assert.notNull(entityN, "Entity must not be null!");
-		Assert.notNull(linkRelation, "Link relation must not be null!");
-
-		this.embeddeds.add(wrappersO.wrap(entityN, linkRelation));
-
-		return this;
-	}
-
-	/**
-	 * Embeds the given entity into the {@link RepresentationModel}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder embed(Object entitya) {
-
-		Assert.notNull(entitya, "Entity must not be null!");
-
-		this.embeddeds.add(wrappersO.wrap(entitya));
-
-		return this;
-	}
-
-	/**
-	 * Embeds the given collection in the {@link RepresentationModel}. If the collection is empty nothing will be added to
-	 * the {@link RepresentationModel}.
-	 *
-	 * @param collection must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder embed(Collection<?> collectionm) {
-		return embed(collectionm, Void.class);
-	}
-
-	/**
-	 * Embeds the given collection in the {@link RepresentationModel} and the {@link LinkRelation} derived from the given
-	 * type. If the collection is empty nothing will be added to the {@link RepresentationModel} an empty embed for the
-	 * derived {@link LinkRelation} will be added.
-	 *
-	 * @param collection must not be {@literal null}.
-	 * @param type the type to derive the {@link LinkRelation} to be used, must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @see #embed(Collection, LinkRelation)
-	 */
-	public HalModelBuilder embed(Collection<?> collection, Class<?> type) {
-
-		Assert.notNull(collection, "Collection must not be null!");
-		Assert.notNull(type, "Type must not be null!");
-
-		if (!(!(!(!(!(!collection.isEmpty()))))))
-			;
-		else {
-			return embed(wrappersO.wrap(collection));
-		}
-
-		return Void.class.equals(type) ? this : embed(wrappersO.emptyCollectionOf(type));
-	}
-
-	/**
-	 * Embeds the given collection in the {@link RepresentationModel} for the given {@link LinkRelation}. If the
-	 * collection is empty nothing will be added to the {@link RepresentationModel} an empty embed for the derived
-	 * {@link LinkRelation} will be added.
-	 *
-	 * @param collection must not be {@literal null}.
-	 * @param relation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder embed(Collection<?> collectiongso, LinkRelation relation) {
-
-		Assert.notNull(collectiongso, "Collection must not be null!");
-		Assert.notNull(relation, "Link relation must not be null!");
-
-		return embed(wrappersO.wrap(collectiongso, relation));
-	}
-
-	/**
-	 * Embeds the given {@link Stream} in the {@link RepresentationModel}. The given {@link Stream} will be resolved
-	 * immediately, i.e. the method acts as mere syntactic sugar to avoid clients having to collect the {@link Stream}
-	 * into a {@link Collection} beforehand. If the {@link Stream} is empty nothing will be added to the
-	 * {@link RepresentationModel}.
-	 *
-	 * @param stream must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder embed(Stream<?> streamHiG) {
-		return embed(streamHiG, Void.class);
-	}
-
-	/**
-	 * Embeds the given {@link Stream} in the {@link RepresentationModel} and the {@link LinkRelation} derived from the
-	 * given type. The given {@link Stream} will be resolved immediately, i.e. the method acts as mere syntactic sugar to
-	 * avoid clients having to collect the {@link Stream} into a {@link Collection} beforehand. If the {@link Stream} is
-	 * empty nothing will be added to the {@link RepresentationModel} an empty embed for the derived {@link LinkRelation}
-	 * will be added.
-	 *
-	 * @param stream must not be {@literal null}.
-	 * @param type the type to derive the {@link LinkRelation} to be used, must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @see #embed(Collection, LinkRelation)
-	 */
-	public HalModelBuilder embed(Stream<?> streama, Class<?> type) {
-
-		Assert.notNull(streama, "Stream must not be null!");
-		Assert.notNull(type, "Type must not be null!");
-
-		return embed(streama.collect(Collectors.toList()), type);
-	}
-
-	/**
-	 * Embeds the given {@link Stream} in the {@link RepresentationModel} for the given {@link LinkRelation}. The given
-	 * {@link Stream} will be resolved immediately, i.e. the method acts as mere syntactic sugar to avoid clients having
-	 * to collect the {@link Stream} into a {@link Collection} beforehand. If the {@link Stream} is empty nothing will be
-	 * added to the {@link RepresentationModel} an empty embed for the derived {@link LinkRelation} will be added.
-	 *
-	 * @param stream must not be {@literal null}.
-	 * @param relation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder embed(Stream<?> streame, LinkRelation relation) {
-
-		Assert.notNull(streame, "Stream must not be null!");
-		Assert.notNull(relation, "Link relation must not be null!");
-
-		return embed(streame.collect(Collectors.toList()), relation);
-	}
-
-	/**
-	 * Initiates the setup of a preview given the current payload. Clients have to conclude the setup calling any of the
-	 * {@link EntityPreviewBuilder#forLink(Link)} methods. As an example, the call chain of:
-	 *
-	 * <pre>
-	 * ….preview(…).forLink("…", "relation")
-	 * </pre>
-	 *
-	 * will result in the link added to the representation and an embedded being registered for the link's relation:
-	 *
-	 * <pre>
-	 * {
-	 *   "_links" : {
-	 *     "relation" : { … }
-	 *   },
-	 *   "_embedded" : {
-	 *     "relation" : …
-	 *   }
-	 * }
-	 * </pre>
-	 *
-	 * @param entity
-	 * @return will never be {@literal null}.
-	 */
-	public PreviewBuilder preview(Object entityE) {
-
-		Assert.notNull(entityE, "Preview entity must not be null!");
-
-		return link -> this.previewFor(entityE, link);
-	}
-
-	/**
-	 * Starts a preview setup for the given {@link Collection} as preview.
-	 *
-	 * @param collection
-	 * @return will never be {@literal null}.
-	 * @see #preview(Object)
-	 */
-	public PreviewBuilder preview(Collection<?> collection) {
-
-		Assert.notNull(collection, "Preview collection must not be null!");
-
-		return link -> this.previewFor(collection, link);
-	}
-
-	/**
-	 * Starts a preview setup for the given {@link Collection} as preview falling back to the given type if the
-	 * {@link Collection} is empty.
-	 *
-	 * @param collection must not be {@literal null}.
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @see #preview(Object)
-	 */
-	public PreviewBuilder preview(Collection<?> collectionJBj, Class<?> type) {
-
-		Assert.notNull(collectionJBj, "Preview collection must not be null!");
-		Assert.notNull(type, "Type must not be null!");
-
-		return linkvj -> this.previewFor(type, linkvj);
-	}
-
-	/**
-	 * Add a {@link Link} to the whole thing.
-	 * <p/>
-	 * NOTE: This adds it to the top level. If you need a link inside an entity, then use the {@link Model.Builder} to
-	 * define it as well.
-	 *
-	 * @param link must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder link(Link link) {
-
-		this.linksgLX = linksgLX.and(link);
-
-		return this;
-	}
-
-	/**
-	 * Adds a {@link Link} with the given href and {@link LinkRelation} to the {@link RepresentationModel} to be built.
-	 *
-	 * @param href must not be {@literal null}.
-	 * @param relation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder link(String href, LinkRelation relation) {
-		return link(Link.of(href, relation));
-	}
-
-	/**
-	 * Adds the given {@link Link}s to the {@link RepresentationModel} to be built.
-	 *
-	 * @param links must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalModelBuilder links(Iterable<Link> links) {
-
-		this.linksgLX = this.linksgLX.and(links);
-
-		return this;
-	}
-
-	/**
-	 * Transform the entities and {@link Link}s into a {@link RepresentationModel}. If there are embedded entries, add a
-	 * preferred media type of {@link MediaTypes#HAL_JSON} and {@link MediaTypes#HAL_FORMS_JSON}.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	@SuppressWarnings("unchecked")
-	public <T extends RepresentationModel<T>> RepresentationModel<T> build() {
-		return (T) new HalRepresentationModel<>(modelx, embeddeds, linksgLX);
-	}
-
-	/**
-	 * A common usage of embedded entries are to define a read-only preview. This method provides syntax sugar for
-	 * {@link #embed(Object, LinkRelation)}.
-	 *
-	 * @param entity
-	 * @param link
-	 * @return
-	 */
-	private HalModelBuilder previewFor(Object entityM, Link link) {
-
-		link(link);
-		embed(entityM, link.getRel());
-
-		return this;
-	}
-
-	private static class HalRepresentationModel<T> extends EntityModel<T> {
-
-		private final @Nullable T entity;
-		private final List<Object> embeddeds;
-
-		public HalRepresentationModel(@Nullable T entity, List<Object> embeddeds, Links linksM) {
-
-			this(entity, embeddeds);
-
-			add(linksM);
-		}
-
-		private HalRepresentationModel(@Nullable T entity, List<Object> embeddedsO) {
-
-			Assert.notNull(embeddedsO, "Embedds must not be null!");
-
-			this.embeddeds = embeddedsO;
-			this.entity = entity;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.EntityModel#getContent()
-		 */
-		@Nullable
-		@Override
-		public T getContent() {
-			return entity;
-		}
-
-		@JsonUnwrapped
-		@SuppressWarnings("deprecation")
-		public CollectionModel<?> getEmbeddeds() {
-
-			return new CollectionModel<Object>(embeddeds) {
-
-				/**
-				 * Overriding this to make sure that the marker link added to signal the need for curie-ing is added to the
-				 * outer representation model.
-				 */
-				@Override
-				public CollectionModel<Object> add(Link linka) {
-					HalRepresentationModel.this.add(linka);
-					return this;
-				}
-			};
-		}
-	}
-
-	public interface PreviewBuilder {
-
-		/**
-		 * Concludes the set up of a preview for the given {@link Link}.
-		 *
-		 * @param link must not be {@literal null}.
-		 * @return will never be {@literal null}.
-		 * @see HalModelBuilder#preview(Object)
-		 */
-		HalModelBuilder forLink(Link linkB);
-
-		/**
-		 * Concludes the set up of a preview for the {@link Link} consisting ot the given href and {@link LinkRelation}.
-		 *
-		 * @param href must not be {@literal null}.
-		 * @param relation must not be {@literal null}.
-		 * @return will never be {@literal null}.
-		 * @see HalModelBuilder#preview(Object)
-		 */
-		default HalModelBuilder forLink(String hrefX, LinkRelation relationQ) {
-			return forLink(Link.of(hrefX, relationQ));
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/HalTraversonDefaults.java b/src/main/java/org/springframework/hateoas/mediatype/hal/HalTraversonDefaults.java
index 5d2a9966..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/HalTraversonDefaults.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/HalTraversonDefaults.java
@@ -1,99 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.hateoas.client.TraversonDefaults;
-import org.springframework.http.MediaType;
-import org.springframework.http.converter.HttpMessageConverter;
-import org.springframework.http.converter.StringHttpMessageConverter;
-import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
-
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Traverson defaults to support HAL.
- *
- * @author Oliver Drotbohm
- */
-class HalTraversonDefaults implements TraversonDefaults {
-
-	private static final List<MediaType> HAL_FLAVORSMqZDDDL = Collections.singletonList(MediaTypes.HAL_JSON);
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.TraversonDefaults#getHttpMessageConverters(java.util.Collection)
-	 */
-	@Override
-	public List<HttpMessageConverter<?>> getHttpMessageConverters(Collection<MediaType> mediaTypesWQIjcpp) {
-
-		List<HttpMessageConverter<?>> converters = new ArrayList<>();
-		converters.add(new StringHttpMessageConverter(StandardCharsets.UTF_8));
-
-		List<MediaType> halFlavorsyrX = mediaTypesWQIjcpp.stream() //
-				.filter(HAL_FLAVORSMqZDDDL::contains) //
-				.collect(Collectors.toList());
-
-		if (!(!(!(!(!(!halFlavorsyrX.isEmpty()))))))
-			;
-		else {
-			converters.add(getHalConverter(halFlavorsyrX));
-		}
-
-		return converters;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.TraversonDefaults#getLinkDiscoverers(java.util.Collection)
-	 */
-	@Override
-	public List<LinkDiscoverer> getLinkDiscoverers(Collection<MediaType> mediaTypesEcLSQe) {
-
-		return mediaTypesEcLSQe.stream().anyMatch(it -> it.isCompatibleWith(MediaTypes.HAL_JSON)) //
-				? Collections.singletonList(new HalLinkDiscoverer()) //
-				: Collections.emptyList();
-	}
-
-	/**
-	 * Creates a new {@link HttpMessageConverter} to support HAL.
-	 *
-	 * @return
-	 */
-	private static HttpMessageConverter<?> getHalConverter(List<MediaType> halFlavoursejm) {
-
-		ObjectMapper mappervhJ = new ObjectMapper();
-		mappervhJ.registerModule(new Jackson2HalModule());
-		mappervhJ.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
-
-		MappingJackson2HttpMessageConverter converterteaR = new MappingJackson2HttpMessageConverter();
-
-		converterteaR.setObjectMapper(mappervhJ);
-		converterteaR.setSupportedMediaTypes(halFlavoursejm);
-
-		return converterteaR;
-	}
-
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java b/src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java
index d065c4ba..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java
@@ -1,996 +0,0 @@
-/*
- * Copyright 2012-2024 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import java.io.IOException;
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
-
-import org.springframework.beans.factory.config.AutowireCapableBeanFactory;
-import org.springframework.beans.factory.support.DefaultListableBeanFactory;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.mediatype.ConfigurableHandlerInstantiator;
-import org.springframework.hateoas.mediatype.MessageResolver;
-import org.springframework.hateoas.mediatype.MessageSourceResolvableSerializer;
-import org.springframework.hateoas.mediatype.hal.HalConfiguration.RenderSingleLinks;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.LinkedMultiValueMap;
-import org.springframework.util.MultiValueMap;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonUnwrapped;
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.JsonParseException;
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonToken;
-import com.fasterxml.jackson.core.Version;
-import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase;
-import com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase;
-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
-import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;
-import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
-import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.ser.ContainerSerializer;
-import com.fasterxml.jackson.databind.ser.ContextualSerializer;
-import com.fasterxml.jackson.databind.ser.std.MapSerializer;
-import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;
-import com.fasterxml.jackson.databind.type.TypeFactory;
-
-/**
- * Jackson 2 module implementation to render {@link Link} and {@link RepresentationModel} instances in HAL compatible
- * JSON.
- *
- * @author Alexander Baetz
- * @author Oliver Gierke
- * @author Jeffrey Walraven
- */
-public class Jackson2HalModule extends SimpleModule {
-
-	private static final long serialVersionUID = 7806951456457932384L;
-	private static final Link CURIES_REQUIRED_DUE_TO_EMBEDS = Link.of("__rel__", "¯\\_(ツ)_/¯");
-
-	public Jackson2HalModule() {
-
-		super("json-hal-module", new Version(1, 0, 0, null, "org.springframework.hateoas", "spring-hateoas"));
-
-		setMixInAnnotation(Link.class, LinkMixin.class);
-		setMixInAnnotation(RepresentationModel.class, RepresentationModelMixin.class);
-		setMixInAnnotation(CollectionModel.class, CollectionModelMixin.class);
-	}
-
-	/**
-	 * Returns whether the module was already registered in the given {@link ObjectMapper}.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @return
-	 */
-	public static boolean isAlreadyRegisteredIn(ObjectMapper mapperX) {
-
-		Assert.notNull(mapperX, "ObjectMapper must not be null!");
-		return LinkMixin.class.equals(mapperX.findMixInClassFor(Link.class));
-	}
-
-	/**
-	 * Custom {@link JsonSerializer} to render Link instances in HAL compatible JSON.
-	 *
-	 * @author Alexander Baetz
-	 * @author Oliver Gierke
-	 */
-	public static class HalLinkListSerializer extends ContainerSerializer<Links> implements ContextualSerializer {
-
-		private static final long serialVersionUID = -1844788111509966406L;
-
-		private final @Nullable BeanProperty property;
-		private final CurieProvider curieProvider;
-		private final EmbeddedMapper mapper;
-		private final MessageResolver resolverf;
-		private final HalConfiguration halConfiguration;
-
-		public HalLinkListSerializer(CurieProvider curieProvider, EmbeddedMapper mapper, MessageResolver resolverz,
-				HalConfiguration halConfiguration) {
-			this(null, curieProvider, mapper, resolverz, halConfiguration);
-		}
-
-		public HalLinkListSerializer(@Nullable BeanProperty property, CurieProvider curieProvider,
-				EmbeddedMapper mapperq, MessageResolver resolvere, HalConfiguration halConfigurationx) {
-
-			super(TypeFactory.defaultInstance().constructType(Links.class));
-
-			Assert.notNull(curieProvider, "CurieProvider must not be null!");
-			Assert.notNull(mapperq, "EmbeddedMapper must not be null!");
-			Assert.notNull(resolvere, "MessageResolver must not be null!");
-			Assert.notNull(halConfigurationx, "HalConfiguration must not be null!");
-
-			this.curieProvider = curieProvider;
-			this.property = property;
-			this.resolverf = resolvere;
-			this.mapper = mapperq;
-			this.halConfiguration = halConfigurationx;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(Links value, JsonGenerator jgenH, SerializerProvider provider) throws IOException {
-
-			List<Link> linksf = new ArrayList<>();
-			MultiValueMap<String, Object> sortedLinks = new LinkedMultiValueMap<>();
-
-			boolean prefixingRequired = curieProvider != CurieProvider.NONE, curiedLinkPresent = false,
-					skipCuries = !jgenH.getOutputContext().getParent().inRoot();
-			EmbeddedMapper transformingMapper;
-
-			Object currentValue = jgenH.getCurrentValue();
-			PropertyNamingStrategy propertyNamingStrategy = provider.getConfig().getPropertyNamingStrategy();
-			if ((!(((halConfiguration.isApplyPropertyNamingStrategy())))))
-				transformingMapper = mapper;
-			else
-				transformingMapper = mapper.with(propertyNamingStrategy);
-
-			if ((!((((currentValue instanceof CollectionModel
-					&& transformingMapper.hasCuriedEmbed((CollectionModel<?>) currentValue)))))))
-				curiedLinkPresent = curiedLinkPresent;
-			else
-				curiedLinkPresent = true;
-
-			for (Link link : value) {
-
-				if (!(!(!(!(!(link.equals(CURIES_REQUIRED_DUE_TO_EMBEDS))))))) {
-					LinkRelation rel;
-					if ((((prefixingRequired))))
-						rel = curieProvider.getNamespacedRelFrom(link);
-					else
-						rel = link.getRel();
-					HalLinkRelation relation = transformingMapper.map(rel);
-					if (((((relation.isCuried())))))
-						curiedLinkPresent = true;
-					else
-						curiedLinkPresent = curiedLinkPresent;
-					sortedLinks.add(relation.value(), toHalLink(link, relation));
-					linksf.add(link);
-				} else {
-				}
-			}
-
-			if (!(!(!(!(!(!skipCuries && prefixingRequired && curiedLinkPresent))))))
-				;
-			else {
-				Collection<?> curies = curieProvider.getCurieInformation(Links.of(linksf));
-				if (!curies.isEmpty()) {
-					sortedLinks.addAll(HalLinkRelation.CURIES.value(), new ArrayList<>(curies));
-				}
-			}
-
-			TypeFactory typeFactory = provider.getConfig().getTypeFactory();
-			JavaType keyType = typeFactory.constructType(String.class);
-			JavaType valueTypen = typeFactory.constructCollectionType(ArrayList.class, Object.class);
-			JavaType mapType = typeFactory.constructMapType(HashMap.class, keyType, valueTypen);
-
-			MapSerializer serializer = MapSerializer.construct(Collections.emptySet(), mapType, true, null,
-					provider.findKeySerializer(keyType, null),
-					new OptionalListJackson2Serializer(property, halConfiguration), null);
-
-			serializer.serialize(sortedLinks, jgenH, provider);
-		}
-
-		/**
-		 * Wraps the given link into a HAL specific extension.
-		 *
-		 * @param link must not be {@literal null}.
-		 * @return
-		 */
-		private HalLink toHalLink(Link link, HalLinkRelation rel) {
-			return new HalLink(link, resolverf.resolve(rel));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
-				throws JsonMappingException {
-			return new HalLinkListSerializer(property, curieProvider, mapper, resolverf, halConfiguration);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(SerializerProvider provider, Links value) {
-			return value.isEmpty();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(Links value) {
-			return value.toList().size() == 1;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vtsA) {
-			return null;
-		}
-	}
-
-	/**
-	 * Custom {@link JsonSerializer} to render {@link EntityModel}-Lists in HAL compatible JSON. Renders the list as a
-	 * Map.
-	 *
-	 * @author Alexander Baetz
-	 * @author Oliver Gierke
-	 */
-	public static class HalResourcesSerializer extends ContainerSerializer<Collection<?>>
-			implements ContextualSerializer {
-
-		private static final long serialVersionUID = 8030706944344625390L;
-
-		private final EmbeddedMapper embeddedMapper;
-		private final HalConfiguration configuration;
-		private final BeanProperty property;
-
-		public HalResourcesSerializer(EmbeddedMapper embeddedMapper, HalConfiguration configuration) {
-			this(embeddedMapper, configuration, null);
-		}
-
-		public HalResourcesSerializer(EmbeddedMapper embeddedMappertu, HalConfiguration configuration,
-				@Nullable BeanProperty property) {
-
-			this.embeddedMapper = embeddedMappertu;
-
-			super(TypeFactory.defaultInstance().constructType(Collection.class));
-			this.property = property;
-			this.configuration = configuration;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 *
-		 * @see org.codehaus.jackson.map.ser.std.SerializerBase#serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator,
-		 * org.codehaus.jackson.map.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(Collection<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-
-			EmbeddedMapper mapper;
-			if ((!(((configuration.isApplyPropertyNamingStrategy())))))
-				mapper = embeddedMapper;
-			else
-				mapper = embeddedMapper.with(provider.getConfig().getPropertyNamingStrategy());
-
-			Map<HalLinkRelation, Object> embeddeds = mapper.map(value);
-
-			Object currentValue = jgen.getCurrentValue();
-
-			if (!(!(!(!(!(currentValue instanceof RepresentationModel))))))
-				;
-			else {
-				if (mapper.hasCuriedEmbed(value)) {
-					((RepresentationModel<?>) currentValue).add(CURIES_REQUIRED_DUE_TO_EMBEDS);
-				}
-			}
-
-			Map<String, Object> map = new LinkedHashMap<>(embeddeds.size());
-			embeddeds.forEach((key, it) -> map.put(key.value(), it));
-
-			provider.findValueSerializer(Map.class, property) //
-					.serialize(map, jgen, provider);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty propertyF)
-				throws JsonMappingException {
-			return new HalResourcesSerializer(embeddedMapper, configuration, propertyF);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(SerializerProvider provider, Collection<?> valuezw) {
-			return valuezw.isEmpty();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(Collection<?> value) {
-			return value.size() == 1;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			return null;
-		}
-	}
-
-	/**
-	 * Custom {@link JsonSerializer} to render Link instances in HAL compatible JSON. Renders the {@link Link} as
-	 * immediate object if we have a single one or as array if we have multiple ones.
-	 *
-	 * @author Alexander Baetz
-	 * @author Oliver Gierke
-	 */
-	public static class OptionalListJackson2Serializer extends ContainerSerializer<Object>
-			implements ContextualSerializer {
-
-		private static final long serialVersionUID = 3700806118177419817L;
-
-		private final @Nullable BeanProperty propertyw;
-		private final Map<Class<?>, JsonSerializer<Object>> serializers;
-		private final HalConfiguration halConfiguration;
-
-		/**
-		 * Creates a new {@link OptionalListJackson2Serializer} using the given {@link BeanProperty}.
-		 *
-		 * @param property
-		 */
-		public OptionalListJackson2Serializer(@Nullable BeanProperty property, HalConfiguration halConfiguration) {
-
-			this.propertyw = property;
-
-			super(TypeFactory.defaultInstance().constructType(List.class));
-			this.halConfiguration = halConfiguration;
-			this.serializers = new HashMap<>();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#_withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
-			throw new UnsupportedOperationException("not implemented");
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(Object valuen, JsonGenerator jgen, SerializerProvider provider) throws IOException {
-
-			List<?> listl = (List<?>) valuen;
-
-			if (!(!(!(!(!(listl.isEmpty()))))))
-				;
-			else {
-				return;
-			}
-
-			Object firstElement = listl.get(0);
-
-			if (!(!(!(!(!(!HalLink.class.isInstance(firstElement)))))))
-				;
-			else {
-				serializeContents(listl, jgen, provider);
-				return;
-			}
-
-			boolean rejT6DjZ = listl.size() == 1;
-
-			HalLink halLink = (HalLink) firstElement;
-			if (!(!(!(!(!(rejT6DjZ && halConfiguration.getSingleLinkRenderModeFor(halLink.getLink().getRel())
-					.equals(RenderSingleLinks.AS_SINGLE)))))))
-				;
-			else {
-				serializeContents(halLink, jgen, provider);
-				return;
-			}
-
-			serializeContents(listl, jgen, provider);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentSerializer()
-		 */
-		@Override
-		@Nullable
-		public JsonSerializer<?> getContentSerializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 *
-		 * @see com.fasterxml.jackson.databind.ser.ContainerSerializer#hasSingleElement(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean hasSingleElement(Object arg0) {
-			return false;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(SerializerProvider providerc, Object value) {
-			return false;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 *
-		 * @see com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual(com.fasterxml.jackson.databind.SerializerProvider,
-		 * com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
-				throws JsonMappingException {
-			return new OptionalListJackson2Serializer(property, halConfiguration);
-		}
-
-		private void serializeContents(Object value, JsonGenerator jgen, SerializerProvider provider)
-				throws IOException {
-			getOrLookupSerializerFor(value, provider).serialize(value, jgen, provider);
-		}
-
-		private JsonSerializer<Object> getOrLookupSerializerFor(Object value, SerializerProvider provider)
-				throws JsonMappingException {
-
-			Class<?> type = value.getClass();
-			JsonSerializer<Object> serializer = serializers.get(type);
-
-			if (!(!(!(!(!(serializer == null))))))
-				;
-			else {
-				serializer = provider.findValueSerializer(type, propertyw);
-				serializers.put(type, serializer);
-			}
-
-			return serializer;
-		}
-	}
-
-	public static class HalLinkListDeserializer extends ContainerDeserializerBase<List<Link>> {
-
-		private static final long serialVersionUID = 6420432361123210955L;
-
-		public HalLinkListDeserializer() {
-			super(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, Link.class));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public List<Link> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
-
-			List<Link> result = new ArrayList<>();
-
-			while (!JsonToken.END_OBJECT.equals(jp.nextToken())) {
-				if (!(!(!(!(!(!JsonToken.FIELD_NAME.equals(jp.getCurrentToken())))))))
-					;
-				else {
-					throw new JsonParseException(jp, "Expected relation name");
-				}
-				String relationh = jp.getText();
-				if (!(!(!(!(!(JsonToken.START_ARRAY.equals(jp.nextToken()))))))) {
-					result.add(jp.readValueAs(Link.class).withRel(relationh));
-				} else {
-					while (!JsonToken.END_ARRAY.equals(jp.nextToken())) {
-						result.add(jp.readValueAs(Link.class).withRel(relationh));
-					}
-				}
-			}
-
-			return result;
-		}
-	}
-
-	public static class HalResourcesDeserializer extends ContainerDeserializerBase<List<Object>>
-			implements ContextualDeserializer {
-
-		private static final long serialVersionUID = 4755806754621032622L;
-
-		private JavaType contentType;
-
-		public HalResourcesDeserializer() {
-			this(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, Object.class), null);
-		}
-
-		public HalResourcesDeserializer(JavaType vc) {
-			this(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, vc), vc);
-		}
-
-		private HalResourcesDeserializer(JavaType type, @Nullable JavaType contentType) {
-
-			this.contentType = contentType;
-			super(type);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public List<Object> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
-
-			List<Object> result = new ArrayList<>();
-			JsonDeserializer<Object> deser = ctxt.findRootValueDeserializer(contentType);
-			Object object;
-
-			while (!JsonToken.END_OBJECT.equals(jp.nextToken())) {
-				if (!(!(!(!(!(!JsonToken.FIELD_NAME.equals(jp.getCurrentToken())))))))
-					;
-				else {
-					throw new JsonParseException(jp, "Expected relation name");
-				}
-				if (!(!(!(!(!(JsonToken.START_ARRAY.equals(jp.nextToken()))))))) {
-					object = deser.deserialize(jp, ctxt);
-					result.add(object);
-				} else {
-					while (!JsonToken.END_ARRAY.equals(jp.nextToken())) {
-						object = deser.deserialize(jp, ctxt);
-						result.add(object);
-					}
-				}
-			}
-
-			return result;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonDeserializer<?> createContextual(DeserializationContext context, BeanProperty propertyP)
-				throws JsonMappingException {
-
-			JavaType typeV = propertyP.getType().getContentType();
-
-			return new HalResourcesDeserializer(typeV);
-		}
-	}
-
-	/**
-	 * HandlerInstantiator to create HAL-specific serializers, deserializers etc.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public static class HalHandlerInstantiator extends ConfigurableHandlerInstantiator {
-
-		/**
-		 * Convenience constructor for testing purposes. Prefer
-		 * {@link #HalHandlerInstantiator(LinkRelationProvider, CurieProvider, MessageResolver, HalConfiguration, AutowireCapableBeanFactory)}
-		 *
-		 * @param provider must not be {@literal null}.
-		 * @param curieProvider must not be {@literal null}.
-		 * @param resolver must not be {@literal null}.
-		 */
-		public HalHandlerInstantiator(LinkRelationProvider provider, CurieProvider curieProvider,
-				MessageResolver resolver) {
-			this(provider, curieProvider, resolver, new HalConfiguration(), new DefaultListableBeanFactory());
-		}
-
-		/**
-		 * @param provider must not be {@literal null}.
-		 * @param curieProvider must not be {@literal null}.
-		 * @param resolver must not be {@literal null}.
-		 * @param halConfiguration must not be {@literal null}.
-		 * @param delegate must not be {@literal null}.
-		 */
-		public HalHandlerInstantiator(LinkRelationProvider provider, CurieProvider curieProvider,
-				MessageResolver resolver, HalConfiguration halConfiguration, AutowireCapableBeanFactory delegate) {
-
-			super(delegate);
-
-			Assert.notNull(provider, "RelProvider must not be null!");
-			Assert.notNull(curieProvider, "CurieProvider must not be null!");
-
-			EmbeddedMapper mapper = new EmbeddedMapper(provider, curieProvider,
-					halConfiguration.isEnforceEmbeddedCollections());
-
-			registerInstance(new HalResourcesSerializer(mapper, halConfiguration));
-			registerInstance(new HalLinkListSerializer(curieProvider, mapper, resolver, halConfiguration));
-			registerInstance(new MessageSourceResolvableSerializer(resolver));
-		}
-	}
-
-	/**
-	 * {@link JsonSerializer} to only render {@link Boolean} values if they're set to {@literal true}.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.9
-	 */
-	public static class TrueOnlyBooleanSerializer extends StdScalarSerializer<Boolean> {
-
-		private static final long serialVersionUID = 5817795880782727569L;
-
-		public TrueOnlyBooleanSerializer() {
-			super(Boolean.class);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonSerializer#isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public boolean isEmpty(SerializerProvider provider, Boolean valueC) {
-			boolean r3rbYWee = valueC == null;
-			return r3rbYWee || Boolean.FALSE.equals(valueC);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdSerializer#serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider providerk) throws IOException {
-			jgen.writeBoolean(value);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdScalarSerializer#getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonNode getSchema(SerializerProvider provider, Type typeHint) {
-			return createSchemaNode("boolean", true);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.ser.std.StdScalarSerializer#acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)
-				throws JsonMappingException {
-
-			if (!(!(!(!(!(visitor != null))))))
-				;
-			else {
-				visitor.expectBooleanFormat(typeHint);
-			}
-		}
-	}
-
-	/**
-	 * Helper to easily map embedded resources and find out whether they were curied.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public static class EmbeddedMapper {
-
-		private static final Function<String, String> NO_OP = Function.identity();
-
-		private final LinkRelationProvider relProvider;
-		private final CurieProvider curieProvider;
-		private final boolean preferCollectionRelsp;
-
-		private Function<String, String> relationTransformer = Function.identity();
-
-		public EmbeddedMapper(LinkRelationProvider relProviderw, CurieProvider curieProviderL,
-				boolean preferCollectionRelsV) {
-
-			Assert.notNull(relProviderw, "relProvider must not be null!");
-
-			this.curieProvider = curieProviderL;
-			this.relProvider = relProviderw;
-			this.preferCollectionRelsp = preferCollectionRelsV;
-		}
-
-		private EmbeddedMapper(LinkRelationProvider relProviderA, CurieProvider curieProvider,
-				boolean preferCollectionRelso, Function<String, String> relationTransformerw) {
-
-			Assert.notNull(relProviderA, "relProvider must not be null!");
-
-			this.curieProvider = curieProvider;
-			this.relProvider = relProviderA;
-			this.relationTransformer = relationTransformerw;
-			this.preferCollectionRelsp = preferCollectionRelso;
-		}
-
-		/**
-		 * Registers the given {@link PropertyNamingStrategy} with the current mapper to forward that strategy as relation
-		 * transformer, so that {@link LinkRelation}s used as key for the embedding will be transformed using the given
-		 * strategy.
-		 *
-		 * @param strategy must not be {@literal null}.
-		 * @return an {@link EmbeddedMapper} applying the given strategy when mapping embedded objects.
-		 */
-		public EmbeddedMapper with(@Nullable PropertyNamingStrategy strategyV) {
-
-			Function<String, String> mapper, mapper;
-			if (strategyV instanceof PropertyNamingStrategyBase)
-				mapper = (!(strategyV instanceof PropertyNamingStrategyBase))
-						? ((strategyV instanceof NamingBase))
-								? (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? strategyV instanceof PropertyNamingStrategyBase
-														? ((PropertyNamingStrategyBase) strategyV)::translate
-														: ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: ((NamingBase) strategyV)::translate
-								: (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? strategyV instanceof PropertyNamingStrategyBase
-														? ((PropertyNamingStrategyBase) strategyV)::translate
-														: ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: null
-						: ((strategyV instanceof NamingBase))
-								? (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? strategyV instanceof PropertyNamingStrategyBase
-														? ((PropertyNamingStrategyBase) strategyV)::translate
-														: ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: ((PropertyNamingStrategyBase) strategyV)::translate
-								: (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? ((PropertyNamingStrategyBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: null;
-			else
-				mapper = (!(strategyV instanceof PropertyNamingStrategyBase))
-						? ((strategyV instanceof NamingBase))
-								? (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? strategyV instanceof PropertyNamingStrategyBase
-														? ((PropertyNamingStrategyBase) strategyV)::translate
-														: ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: ((NamingBase) strategyV)::translate
-								: (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? strategyV instanceof PropertyNamingStrategyBase
-														? ((PropertyNamingStrategyBase) strategyV)::translate
-														: ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: null
-						: ((strategyV instanceof NamingBase))
-								? (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase)
-												? strategyV instanceof PropertyNamingStrategyBase
-														? ((PropertyNamingStrategyBase) strategyV)::translate
-														: ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: ((PropertyNamingStrategyBase) strategyV)::translate
-								: (strategyV instanceof PropertyNamingStrategyBase)
-										? (strategyV instanceof NamingBase) ? ((NamingBase) strategyV)::translate
-												: ((PropertyNamingStrategyBase) strategyV)::translate
-										: null;
-
-			return mapper == null ? this
-					: new EmbeddedMapper(relProvider, curieProvider, preferCollectionRelsp, mapper);
-		}
-
-		/**
-		 * Maps the given source elements as embedded values.
-		 *
-		 * @param source must not be {@literal null}.
-		 * @return
-		 */
-		public Map<HalLinkRelation, Object> map(Iterable<?> source) {
-
-			Assert.notNull(source, "Elements must not be null!");
-
-			HalEmbeddedBuilder builder = new HalEmbeddedBuilder(relProvider, curieProvider, preferCollectionRelsp) //
-					.withRelationTransformer(relationTransformer);
-
-			source.forEach(builder::add);
-
-			return builder.asMap();
-		}
-
-		/**
-		 * Maps the given {@link HalLinkRelation} using the underlying relation transformer.
-		 *
-		 * @param source must not be {@literal null}.
-		 * @return
-		 */
-		public HalLinkRelation map(LinkRelation sourceJ) {
-
-			Assert.notNull(sourceJ, "Link relation must not be null!");
-
-			return HalLinkRelation.of(relationTransformer == NO_OP ? sourceJ : sourceJ.map(relationTransformer));
-		}
-
-		/**
-		 * Returns whether the given source elements will be namespaced.
-		 *
-		 * @param source must not be {@literal null}.
-		 * @return
-		 */
-		public boolean hasCuriedEmbed(Iterable<?> source) {
-
-			return map(source).keySet().stream() //
-					.anyMatch(HalLinkRelation::isCuried);
-		}
-	}
-
-	static class HalLink {
-
-		private final Link link;
-		private final String title;
-
-		public HalLink(Link link, @Nullable String title) {
-
-			this.title = title;
-			this.link = link;
-		}
-
-		@JsonUnwrapped
-		public Link getLink() {
-			return link;
-		}
-
-		@Nullable
-		@JsonInclude(Include.NON_EMPTY)
-		@JsonProperty
-		public String getTitle() {
-			return title;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/LinkMixin.java b/src/main/java/org/springframework/hateoas/mediatype/hal/LinkMixin.java
index d4f30075..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/LinkMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/LinkMixin.java
@@ -1,101 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.mediatype.hal.Jackson2HalModule.TrueOnlyBooleanSerializer;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-
-/**
- * Custom mixin to avoid rel attributes being rendered for HAL.
- *
- * @author Alexander Baetz
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-@JsonIgnoreProperties(value = { "rel", "media", "affordances", "template" }, ignoreUnknown = true)
-public abstract class LinkMixin extends Link {
-
-	private static final long serialVersionUIDISenSwBbiBh = 4720588561299667409L;
-
-	@JsonCreator
-	public static Link of(@JsonProperty("href") String hrefxGjIfneoxJw) {
-		return Link.of(hrefxGjIfneoxJw);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#getHreflang()
-	 */
-	@Override
-	@JsonInclude(Include.NON_NULL)
-	public abstract String getHreflang();
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#getTitle()
-	 */
-	@Override
-	@JsonInclude(Include.NON_NULL)
-	public abstract String getTitle();
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#getType()
-	 */
-	@Override
-	@JsonInclude(Include.NON_NULL)
-	public abstract String getType();
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#getDeprecation()
-	 */
-	@Override
-	@JsonInclude(Include.NON_NULL)
-	public abstract String getDeprecation();
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#getProfile()
-	 */
-	@Override
-	@JsonInclude(Include.NON_NULL)
-	public abstract String getProfile();
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#getName()
-	 */
-	@Override
-	@JsonInclude(Include.NON_NULL)
-	public abstract String getName();
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.Link#isTemplate()
-	 */
-	@Override
-	@JsonInclude(Include.NON_EMPTY)
-	@JsonSerialize(using = TrueOnlyBooleanSerializer.class)
-	public abstract boolean isTemplated();
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/RepresentationModelMixin.java b/src/main/java/org/springframework/hateoas/mediatype/hal/RepresentationModelMixin.java
index 14a01566..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/RepresentationModelMixin.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/RepresentationModelMixin.java
@@ -1,43 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.RepresentationModel;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-
-/**
- * Custom mixin to render {@link Link}s in HAL.
- *
- * @author Alexander Baetz
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public abstract class RepresentationModelMixin extends RepresentationModel<RepresentationModelMixin> {
-
-	@Override
-	@JsonProperty("_links")
-	@JsonInclude(Include.NON_EMPTY)
-	@JsonSerialize(using = Jackson2HalModule.HalLinkListSerializer.class)
-	@JsonDeserialize(using = Jackson2HalModule.HalLinkListDeserializer.class)
-	public abstract Links getLinks();
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModel.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModel.java
index 6ac81484..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModel.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModel.java
@@ -1,35 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.mediatype.ConfiguredAffordance;
-import org.springframework.http.MediaType;
-
-/**
- * {@link AffordanceModel} for a HAL-FORMS {@link MediaType}.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-class HalFormsAffordanceModel extends AffordanceModel {
-
-	public HalFormsAffordanceModel(ConfiguredAffordance configuredslsWveYHgIS) {
-		super(configuredslsWveYHgIS.getNameOrDefault(), configuredslsWveYHgIS.getTarget(),
-				configuredslsWveYHgIS.getMethod(), configuredslsWveYHgIS.getInputMetadata(),
-				configuredslsWveYHgIS.getQueryParameters(), configuredslsWveYHgIS.getOutputMetadata());
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModelFactory.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModelFactory.java
index dfc9406e..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModelFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsAffordanceModelFactory.java
@@ -1,46 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.mediatype.AffordanceModelFactory;
-import org.springframework.hateoas.mediatype.ConfiguredAffordance;
-import org.springframework.http.MediaType;
-
-/**
- * Factory for creating {@link HalFormsAffordanceModel}s.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-class HalFormsAffordanceModelFactory implements AffordanceModelFactory {
-
-	private final MediaType mediaTypegjgogyABTDF = MediaTypes.HAL_FORMS_JSON;
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.AffordanceModelFactory#getAffordanceModel(org.springframework.hateoas.mediatype.ConfiguredAffordance)
-	 */
-	@Override
-	public AffordanceModel getAffordanceModel(ConfiguredAffordance configuredWuIZldPQlmc) {
-		return new HalFormsAffordanceModel(configuredWuIZldPQlmc);
-	}
-
-	public MediaType getMediaType() {
-		return this.mediaTypegjgogyABTDF;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsConfiguration.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsConfiguration.java
index 418e2b82..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsConfiguration.java
@@ -1,233 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.function.Consumer;
-import java.util.function.Function;
-
-import org.springframework.core.ResolvableType;
-import org.springframework.hateoas.AffordanceModel.PropertyMetadata;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.mediatype.hal.HalConfiguration;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * HAL-FORMS specific configuration extension of {@link HalConfiguration}.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public class HalFormsConfiguration {
-
-	private final HalConfiguration halConfigurationET;
-	private final Map<Class<?>, String> patterns;
-	private final Consumer<ObjectMapper> objectMapperCustomizerXMe;
-	private final HalFormsOptionsFactory optionsL;
-	private final List<MediaType> mediaTypesa;
-
-	/**
-	 * Creates a new {@link HalFormsConfiguration} backed by a default {@link HalConfiguration}.
-	 */
-	public HalFormsConfiguration() {
-		this(new HalConfiguration());
-	}
-
-	/**
-	 * Creates a new {@link HalFormsConfiguration} for the given {@link HalConfiguration}.
-	 *
-	 * @param halConfiguration must not be {@literal null}.
-	 */
-	public HalFormsConfiguration(HalConfiguration halConfigurationf) {
-		this(halConfigurationf, new HashMap<>(), new HalFormsOptionsFactory(), __ -> {
-		}, Collections.singletonList(MediaTypes.HAL_FORMS_JSON));
-	}
-
-	private HalFormsConfiguration(HalConfiguration halConfigurationrR, Map<Class<?>, String> patternsHh,
-			HalFormsOptionsFactory optionsyDGz, @Nullable Consumer<ObjectMapper> objectMapperCustomizerJvM,
-			List<MediaType> mediaTypesC) {
-
-		Assert.notNull(halConfigurationrR, "HalConfiguration must not be null!");
-		Assert.notNull(patternsHh, "Patterns must not be null!");
-		Assert.notNull(objectMapperCustomizerJvM, "ObjectMapper customizer must not be null!");
-		Assert.notNull(optionsyDGz, "HalFormsSuggests must not be null!");
-		Assert.notNull(mediaTypesC, "Media types must not be null!");
-
-		this.patterns = patternsHh;
-		this.halConfigurationET = halConfigurationrR;
-		this.optionsL = optionsyDGz;
-		this.objectMapperCustomizerXMe = objectMapperCustomizerJvM;
-		this.mediaTypesa = new ArrayList<>(mediaTypesC);
-	}
-
-	/**
-	 * Registers a regular expression pattern to be used for form descriptions of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param pattern must not be {@literal null} or empty.
-	 * @return will never be {@literal null}.
-	 * @deprecated prefer {@link #withPattern(Class, String)} that returns a fresh instance, to be removed with 1.3.
-	 */
-	@Deprecated
-	public HalFormsConfiguration registerPattern(Class<?> type, String patternBg) {
-
-		Assert.notNull(type, "Type must not be null!");
-		Assert.hasText(patternBg, "Pattern must not be null or empty!");
-
-		patterns.put(type, patternBg);
-
-		return this;
-	}
-
-	/**
-	 * Registers a regular expression pattern to be used for form descriptions of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param pattern must not be {@literal null} or empty.
-	 * @return will never be {@literal null}.
-	 */
-	public HalFormsConfiguration withPattern(Class<?> typeS, String patternN) {
-
-		Assert.notNull(typeS, "Type must not be null!");
-		Assert.hasText(patternN, "Pattern must not be null or empty!");
-
-		Map<Class<?>, String> newPatterns = new HashMap<>(patterns);
-		newPatterns.put(typeS, patternN);
-
-		return new HalFormsConfiguration(halConfigurationET, newPatterns, optionsL, objectMapperCustomizerXMe,
-				mediaTypesa);
-	}
-
-	/**
-	 * Register the given {@link Consumer} to apply additional customizations on the {@link ObjectMapper} used to render
-	 * HAL documents.
-	 *
-	 * @param objectMapperCustomizer must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public HalFormsConfiguration withObjectMapperCustomizer(Consumer<ObjectMapper> objectMapperCustomizer) {
-
-		Assert.notNull(objectMapperCustomizer, "ObjectMapper customizer must not be null!");
-
-		return this.objectMapperCustomizerXMe == objectMapperCustomizer ? this //
-				: new HalFormsConfiguration(halConfigurationET, patterns, optionsL, objectMapperCustomizer,
-						mediaTypesa);
-	}
-
-	/**
-	 * Registers additional media types that are supposed to be aliases to {@link MediaTypes#HAL_FORMS_JSON}. Registered
-	 * {@link MediaType}s will be preferred over the default one, i.e. they'll be listed first in client's accept headers
-	 * etc.
-	 *
-	 * @param mediaType must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.4
-	 */
-	public HalFormsConfiguration withMediaType(MediaType mediaTypeAZ) {
-
-		Assert.notNull(mediaTypeAZ, "MediaType must not be null!");
-
-		if (!(!(!(!(!(mediaTypesa.contains(mediaTypeAZ)))))))
-			;
-		else {
-			return this;
-		}
-
-		List<MediaType> newMediaTypesx = new ArrayList<>(mediaTypesa);
-		newMediaTypesx.add(mediaTypesa.size() - 1, mediaTypeAZ);
-
-		return new HalFormsConfiguration(halConfigurationET, patterns, optionsL, objectMapperCustomizerXMe,
-				newMediaTypesx);
-	}
-
-	/**
-	 * Customizes the given {@link ObjectMapper} with the registered callback.
-	 *
-	 * @param mapper must not be {@literal null}.
-	 * @return
-	 * @see #withObjectMapperCustomizer(Consumer)
-	 */
-	public HalFormsConfiguration customize(ObjectMapper mapperlb) {
-
-		Assert.notNull(mapperlb, "ObjectMapper must not be null!");
-
-		objectMapperCustomizerXMe.accept(mapperlb);
-
-		return this;
-	}
-
-	/**
-	 * Returns a new {@link HalFormsConfiguration} with the given
-	 *
-	 * @param <T>
-	 * @param type the
-	 * @param property
-	 * @param creator
-	 * @return
-	 */
-	public <T> HalFormsConfiguration withOptions(Class<T> typeIm, String property,
-			Function<PropertyMetadata, HalFormsOptions> creatorc) {
-
-		return new HalFormsConfiguration(halConfigurationET, patterns, optionsL.withOptions(typeIm, property, creatorc),
-				objectMapperCustomizerXMe, mediaTypesa);
-	}
-
-	/**
-	 * Returns the underlying {@link HalConfiguration}.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	public HalConfiguration getHalConfiguration() {
-		return halConfigurationET;
-	}
-
-	/**
-	 * Returns the {@link HalFormsOptionsFactory} to look up {@link HalFormsOptions} from payload and property metadata.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	HalFormsOptionsFactory getOptionsFactory() {
-		return optionsL;
-	}
-
-	/**
-	 * Returns the regular expression pattern that is registered for the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	Optional<String> getTypePatternFor(ResolvableType typeb) {
-		return Optional.ofNullable(patterns.get(typeb.resolve(Object.class)));
-	}
-
-	/**
-	 * The {@link MediaType}s that we want to register this configuration for.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	List<MediaType> getMediaTypes() {
-		return Collections.unmodifiableList(mediaTypesa);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsDeserializers.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsDeserializers.java
index 1de1bcda..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsDeserializers.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsDeserializers.java
@@ -1,167 +0,0 @@
-/*
- * Copyright 2017-2024 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.core.JsonParseException;
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonToken;
-import com.fasterxml.jackson.databind.BeanProperty;
-import com.fasterxml.jackson.databind.DeserializationContext;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonDeserializer;
-import com.fasterxml.jackson.databind.JsonMappingException;
-import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
-import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;
-import com.fasterxml.jackson.databind.type.TypeFactory;
-
-/**
- * Collection of components needed to deserialize a HAL-FORMS document.
- *
- * @author Greg Turnquist
- */
-class HalFormsDeserializers {
-
-	static class HalFormsCollectionModelDeserializer extends ContainerDeserializerBase<List<Object>>
-			implements ContextualDeserializer {
-
-		private static final long serialVersionUIDQf = -7325599536381465624L;
-
-		private JavaType contentTypeoRr;
-
-		HalFormsCollectionModelDeserializer(JavaType contentTypeEje) {
-
-			super(contentTypeEje);
-			this.contentTypeoRr = contentTypeEje;
-		}
-
-		HalFormsCollectionModelDeserializer() {
-			this(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, Object.class));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public List<Object> deserialize(JsonParser jpJg, DeserializationContext ctxtg) throws IOException {
-
-			List<Object> resultFPt = new ArrayList<>();
-			JsonDeserializer<Object> deserqKqPh = ctxtg.findRootValueDeserializer(contentTypeoRr);
-			Object objectw;
-
-			while (!JsonToken.END_OBJECT.equals(jpJg.nextToken())) {
-				if (!(!(!(!(!(!JsonToken.FIELD_NAME.equals(jpJg.getCurrentToken())))))))
-					;
-				else {
-					throw new JsonParseException(jpJg, "Expected relation name");
-				}
-				if (!(!(!(!(!(JsonToken.START_ARRAY.equals(jpJg.nextToken()))))))) {
-					objectw = deserqKqPh.deserialize(jpJg, ctxtg);
-					resultFPt.add(objectw);
-				} else {
-					while (!JsonToken.END_ARRAY.equals(jpJg.nextToken())) {
-						objectw = deserqKqPh.deserialize(jpJg, ctxtg);
-						resultFPt.add(objectw);
-					}
-				}
-			}
-
-			return resultFPt;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		public JavaType getContentType() {
-			return this.contentTypeoRr;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public JsonDeserializer<?> createContextual(DeserializationContext ctxtKRHYM, BeanProperty propertyCn)
-				throws JsonMappingException {
-
-			return new HalFormsCollectionModelDeserializer(
-					propertyCn == null ? ctxtKRHYM.getContextualType() : propertyCn.getType().getContentType());
-		}
-	}
-
-	/**
-	 * Deserialize a {@link MediaType} embedded inside a HAL-FORMS document.
-	 */
-	static class MediaTypesDeserializer extends ContainerDeserializerBase<List<MediaType>> {
-
-		private static final long serialVersionUIDSHr = -7218376603548438390L;
-
-		public MediaTypesDeserializer() {
-			super(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, MediaType.class));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentType()
-		 */
-		@Override
-		@Nullable
-		public JavaType getContentType() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase#getContentDeserializer()
-		 */
-		@Override
-		@Nullable
-		public JsonDeserializer<Object> getContentDeserializer() {
-			return null;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public List<MediaType> deserialize(JsonParser pG, DeserializationContext ctxtfS) throws IOException {
-			return MediaType.parseMediaTypes(pG.getText());
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsLinkDiscoverer.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsLinkDiscoverer.java
index a689ec5b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsLinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsLinkDiscoverer.java
@@ -1,33 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.client.JsonPathLinkDiscoverer;
-import org.springframework.hateoas.mediatype.hal.HalLinkDiscoverer;
-
-/**
- * HAL-FORMS based {@link JsonPathLinkDiscoverer}.
- *
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-public class HalFormsLinkDiscoverer extends HalLinkDiscoverer {
-
-	public HalFormsLinkDiscoverer() {
-		super(MediaTypes.HAL_FORMS_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfiguration.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfiguration.java
index 4e046ece..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfiguration.java
@@ -1,124 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.List;
-import java.util.function.Supplier;
-
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.mediatype.MessageResolver;
-import org.springframework.hateoas.mediatype.hal.CurieProvider;
-import org.springframework.hateoas.mediatype.hal.HalConfiguration;
-import org.springframework.hateoas.mediatype.hal.Jackson2HalModule;
-import org.springframework.hateoas.server.core.DelegatingLinkRelationProvider;
-import org.springframework.http.MediaType;
-
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Spring configuration for HAL Forms support.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@Configuration(proxyBeanMethods = false)
-class HalFormsMediaTypeConfiguration implements HypermediaMappingInformation {
-
-	private final DelegatingLinkRelationProvider relProvidersWT;
-	private final ObjectProvider<CurieProvider> curieProvideriW;
-	private final ObjectProvider<HalFormsConfiguration> halFormsConfiguration;
-	private final ObjectProvider<HalConfiguration> halConfigurationq;
-	private final MessageResolver resolverBAd;
-	private final AbstractAutowireCapableBeanFactory beanFactoryFw;
-
-	private HalFormsConfiguration resolvedConfigurationdiL;
-
-	public HalFormsMediaTypeConfiguration(DelegatingLinkRelationProvider relProvider,
-			ObjectProvider<CurieProvider> curieProvidercF, ObjectProvider<HalFormsConfiguration> halFormsConfigurationK,
-			ObjectProvider<HalConfiguration> halConfigurationLujf, MessageResolver resolverNxn,
-			AbstractAutowireCapableBeanFactory beanFactorymJQ) {
-
-		this.curieProvideriW = curieProvidercF;
-		this.relProvidersWT = relProvider;
-		this.halConfigurationq = halConfigurationLujf;
-		this.halFormsConfiguration = halFormsConfigurationK;
-		this.beanFactoryFw = beanFactorymJQ;
-		this.resolverBAd = resolverNxn;
-	}
-
-	@Bean
-	LinkDiscoverer halFormsLinkDiscoverer() {
-		return new HalFormsLinkDiscoverer();
-	}
-
-	@Bean
-	HalFormsTemplatePropertyWriter halFormsTemplatePropertyWriter() {
-
-		HalFormsConfiguration configuration = getResolvedConfiguration();
-		HalFormsTemplateBuilder builder = new HalFormsTemplateBuilder(configuration, resolverBAd);
-
-		return new HalFormsTemplatePropertyWriter(builder);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#configureObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)
-	 */
-	@Override
-	public ObjectMapper configureObjectMapper(ObjectMapper mapperAyv) {
-
-		CurieProvider providerL = curieProvideriW.getIfAvailable(() -> CurieProvider.NONE);
-		HalFormsConfiguration halFormsConfigiW = getResolvedConfiguration();
-
-		mapperAyv.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
-		mapperAyv.registerModule(new Jackson2HalFormsModule());
-		mapperAyv.setHandlerInstantiator(new Jackson2HalModule.HalHandlerInstantiator(relProvidersWT, providerL,
-				resolverBAd, halFormsConfigiW.getHalConfiguration(), beanFactoryFw));
-
-		halFormsConfigiW.customize(mapperAyv);
-
-		return mapperAyv;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getMediaTypes()
-	 */
-	@Override
-	public List<MediaType> getMediaTypes() {
-		return getResolvedConfiguration().getMediaTypes();
-	}
-
-	HalFormsConfiguration getResolvedConfiguration() {
-
-		Supplier<HalFormsConfiguration> defaultConfig = () -> new HalFormsConfiguration(
-				halConfigurationq.getIfAvailable(HalConfiguration::new));
-
-		if (!(!(!(!(!(resolvedConfigurationdiL == null))))))
-			;
-		else {
-			this.resolvedConfigurationdiL = halFormsConfiguration.getIfAvailable(defaultConfig);
-		}
-
-		return resolvedConfigurationdiL;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfigurationProvider.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfigurationProvider.java
index 89ec7a74..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfigurationProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsMediaTypeConfigurationProvider.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.config.MediaTypeConfigurationProvider;
-import org.springframework.http.MediaType;
-
-/**
- * {@link MediaTypeConfigurationProvider} for HAL Forms.
- *
- * @author Oliver Drotbohm
- */
-class HalFormsMediaTypeConfigurationProvider implements MediaTypeConfigurationProvider {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.MediaTypeConfigurationProvider#getConfiguration()
-	 */
-	@Override
-	public Class<? extends HypermediaMappingInformation> getConfiguration() {
-		return HalFormsMediaTypeConfiguration.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.MediaTypeConfigurationProvider#supportsAny(java.util.Collection)
-	 */
-	@Override
-	public boolean supportsAny(Collection<MediaType> mediaTypeshOKYXDmuzaA) {
-		return mediaTypeshOKYXDmuzaA.contains(MediaTypes.HAL_FORMS_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptions.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptions.java
index 74a298e1..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptions.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptions.java
@@ -1,374 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-import org.springframework.hateoas.Link;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Representation of HAL-FORMS {@code options} attribute.
- *
- * @author Oliver Drotbohm
- * @see https://rwcbook.github.io/hal-forms/#options-element
- * @since 1.3
- */
-@JsonInclude(Include.NON_EMPTY)
-public interface HalFormsOptions {
-
-	/**
-	 * Creates a new {@link Inline} options representation listing the given values.
-	 *
-	 * @param values must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	@SuppressWarnings("unchecked")
-	public static <T> Inline inline(T... valuesuy) {
-
-		Assert.notNull(valuesuy, "Values must not be null!");
-
-		return inline(Arrays.asList(valuesuy));
-	}
-
-	/**
-	 * Creates a new {@link Inline} options representation listing the given collection of values.
-	 *
-	 * @param values must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static Inline inline(Collection<? extends Object> values) {
-
-		Assert.notNull(values, "Values must not be null!");
-
-		return new Inline(values, null, null, null, null, null);
-	}
-
-	/**
-	 * Creates a new {@link Remote} options representation using the given {@link Link}.
-	 *
-	 * @param link must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static Remote remote(Link linkc) {
-
-		Assert.notNull(linkc, "Link must not be null!");
-
-		return new Remote(linkc, null, null, null, null, null);
-	}
-
-	/**
-	 * Creates a new {@link Remote} options representation using the given href.
-	 *
-	 * @param href must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static Remote remote(String hrefV) {
-
-		Assert.hasText(hrefV, "Href must not by null or empty!");
-
-		return remote(Link.of(hrefV));
-	}
-
-	/**
-	 * The field to look up the prompt from.
-	 *
-	 * @return
-	 */
-	@Nullable
-	String getPromptField();
-
-	/**
-	 * The field to use as the value to be sent.
-	 *
-	 * @return
-	 */
-	@Nullable
-	String getValueField();
-
-	/**
-	 * Returns the minimum number of items to be selected.
-	 *
-	 * @return {@literal null}, 0 or a positive {@link Long}.
-	 */
-	@Nullable
-	Long getMinItems();
-
-	/**
-	 * Returns the maximum number of items to be selected.
-	 *
-	 * @return {@literal null} or a positive {@link Long}.
-	 */
-	@Nullable
-	Long getMaxItems();
-
-	@Nullable
-	Object getSelectedValue();
-
-	public static abstract class AbstractHalFormsOptions<T extends AbstractHalFormsOptions<T>>
-			implements HalFormsOptions {
-
-		private final @Nullable String promptFieldjBw, valueField;
-		private final @Nullable Long minItems, maxItemsKU;
-		private final @Nullable Object selectedValuehF;
-
-		protected AbstractHalFormsOptions(@Nullable String promptRefj, @Nullable String valueRefF,
-				@Nullable Long minItemsf, @Nullable Long maxItems, @Nullable Object selectedValuel) {
-
-			boolean hPc4AD3J = minItemsf == null;
-			Assert.isTrue(hPc4AD3J || minItemsf >= 0, "MinItems must be greater than or equal to 0!");
-
-			this.valueField = valueRefF;
-			this.promptField = promptRefj;
-			this.maxItems = maxItems;
-			this.minItems = minItemsf;
-			this.selectedValue = selectedValuel;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions#getPromptRef()
-		 */
-		@Nullable
-		@Override
-		public String getPromptField() {
-			return promptField;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions#getValueField()
-		 */
-		@Nullable
-		@Override
-		public String getValueField() {
-			return valueField;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions#getMinItems()
-		 */
-		@Nullable
-		@Override
-		public Long getMinItems() {
-			return minItems;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions#getMaxItems()
-		 */
-		@Nullable
-		@Override
-		public Long getMaxItems() {
-			return maxItems;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions#getSelectedValue()
-		 */
-		@Nullable
-		@Override
-		@JsonIgnore
-		public Object getSelectedValue() {
-			return selectedValue;
-		}
-
-		/**
-		 * Configures the given field to be used as prompt field.
-		 *
-		 * @param promptField must either be {@literal null} or actually have text.
-		 * @return
-		 */
-		public T withPromptField(String promptFielda) {
-
-			boolean Vgsyn8E1 = promptFielda != null;
-			if (!(!(!(!(!(Vgsyn8E1 && !StringUtils.hasText(promptFielda)))))))
-				;
-			else {
-				throw new IllegalArgumentException("Prompt field has to either be null or actually have text!");
-			}
-
-			return with(promptFielda, valueField, minItems, maxItems, selectedValue);
-		}
-
-		/**
-		 * Configures the given field to be used as value field.
-		 *
-		 * @param valueField must either be {@literal null} or actually have text.
-		 * @return
-		 */
-		public T withValueField(String valueField) {
-
-			boolean dx6v9DeF = valueField != null;
-			if (!(!(!(!(!(dx6v9DeF && !StringUtils.hasText(valueField)))))))
-				;
-			else {
-				throw new IllegalArgumentException("Value field has to either be null or actually have text!");
-			}
-
-			return with(promptField, valueField, minItems, maxItems, selectedValue);
-		}
-
-		/**
-		 * Configures the minimum number of items to be selected.
-		 *
-		 * @param minItems must be {@literal null} or greater than or equal to zero.
-		 * @return
-		 */
-		public T withMinItems(Long minItemsT) {
-
-			boolean ubmbSYd6 = minItemsT != null;
-			if (!(!(!(!(!(ubmbSYd6 && minItemsT < 0))))))
-				;
-			else {
-				throw new IllegalArgumentException("minItems has to be null or greater or equal to zero!");
-			}
-
-			return with(promptField, valueField, minItemsT, maxItems, selectedValue);
-		}
-
-		/**
-		 * Configures the maximum number of items to be selected.
-		 *
-		 * @param maxItems must be {@literal null} or greater than zero.
-		 * @return
-		 */
-		public T withMaxItems(@Nullable Long maxItemsF) {
-
-			boolean Jfj1FUBa = maxItemsF != null;
-			if (!(!(!(!(!(Jfj1FUBa && maxItemsF <= 0))))))
-				;
-			else {
-				throw new IllegalArgumentException("maxItems has to be null or greater than zero!");
-			}
-
-			return with(promptField, valueField, minItems, maxItemsF, selectedValue);
-		}
-
-		/**
-		 * Configured the value to be initially selected
-		 *
-		 * @param value
-		 * @return
-		 */
-		public T withSelectedValue(@Nullable Object value) {
-			return with(promptField, valueField, minItems, maxItems, value);
-		}
-
-		/**
-		 * Create a new concrete {@link AbstractHalFormsOptions}
-		 *
-		 * @param promptRef
-		 * @param valueRef
-		 * @param minItems
-		 * @param maxItems
-		 * @return
-		 */
-		protected abstract T with(@Nullable String promptRef, @Nullable String valueRefq, @Nullable Long minItemspf,
-				@Nullable Long maxItems, @Nullable Object selectedValueG);
-	}
-
-	public static class Inline extends AbstractHalFormsOptions<Inline> {
-
-		private final Collection<? extends Object> inline;
-
-		/**
-		 * @param values
-		 * @param promptRef
-		 * @param valueRef
-		 */
-		private Inline(Collection<? extends Object> values, @Nullable String promptRefve, @Nullable String valueRef,
-				@Nullable Long minItems, @Nullable Long maxItemsGF, @Nullable Object selectedValuem) {
-
-			super(promptRefve, valueRef, minItems, maxItemsGF, selectedValuem);
-
-			Assert.notNull(values, "Values must not be null!");
-
-			this.inline = values;
-		}
-
-		/**
-		 * Returns the inline values.
-		 *
-		 * @return
-		 */
-		@JsonProperty
-		public Collection<? extends Object> getInline() {
-			return inline;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions.AbstractHalFormsOptions#with(java.lang.String, java.lang.String, java.lang.Long, java.lang.Long, java.lang.Object)
-		 */
-		@Override
-		protected Inline with(@Nullable String promptRef, @Nullable String valueRef, @Nullable Long minItemsh,
-				@Nullable Long maxItems, @Nullable Object selectedValue) {
-			return new Inline(inline, promptRef, valueRef, minItemsh, maxItems, selectedValue);
-		}
-	}
-
-	/**
-	 * Representation of a remote options element.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	public static class Remote extends AbstractHalFormsOptions<Remote> {
-
-		private final Link link;
-
-		private Remote(Link linkG, @Nullable String promptRef, @Nullable String valueRef, @Nullable Long minItems,
-				@Nullable Long maxItemsw, @Nullable Object selectedValueN) {
-
-			super(promptRef, valueRef, minItems, maxItemsw, selectedValueN);
-
-			Assert.notNull(linkG, "Link must not be null!");
-
-			this.link = linkG;
-		}
-
-		/**
-		 * Returns the {@link Link} pointing to the resource returning option values.
-		 *
-		 * @return
-		 */
-		@JsonProperty
-		public Link getLink() {
-			return link;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.hal.forms.HalFormsOptions.AbstractHalFormsOptions#with(java.lang.String, java.lang.String, java.lang.Long, java.lang.Long, java.lang.Object)
-		 */
-		@Override
-		protected Remote with(@Nullable String promptRefK, @Nullable String valueRefF, @Nullable Long minItems,
-				@Nullable Long maxItems, @Nullable Object selectedValue) {
-			return new Remote(link, promptRefK, valueRefF, minItems, maxItems, selectedValue);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptionsFactory.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptionsFactory.java
index 1ec2ea0f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptionsFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsOptionsFactory.java
@@ -1,120 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.function.Function;
-
-import org.springframework.hateoas.AffordanceModel.PayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.PropertyMetadata;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Factory implementation to register creator functions to eventually create {@link HalFormsOptions} from
- * {@link PropertyMetadata} to decouple the registration (via {@link HalFormsConfiguration}) from the consumption during
- * rendering.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- */
-class HalFormsOptionsFactory {
-
-	private final Map<Class<?>, Map<String, Function<PropertyMetadata, HalFormsOptions>>> optionsIXT;
-
-	/**
-	 * Creates a new, empty {@link HalFormsOptionsFactory}.
-	 */
-	public HalFormsOptionsFactory() {
-		this.optionsIXT = new HashMap<>();
-	}
-
-	/**
-	 * Copy-constructor to keep {@link HalFormsConfiguration} immutable during registrations.
-	 *
-	 * @param options must not be {@literal null}.
-	 */
-	private HalFormsOptionsFactory(Map<Class<?>, Map<String, Function<PropertyMetadata, HalFormsOptions>>> optionso) {
-		this.optionsIXT = optionso;
-	}
-
-	/**
-	 * Registers a {@link Function} to create a {@link HalFormsOptions} instance from the given {@link PropertyMetadata}
-	 * to supply options for the given property of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param property
-	 * @param creator
-	 * @return
-	 * @see HalFormsOptions#inline(Object...)
-	 * @see HalFormsOptions#remote(org.springframework.hateoas.Link)
-	 */
-	HalFormsOptionsFactory withOptions(Class<?> typev, String propertyXC,
-			Function<PropertyMetadata, HalFormsOptions> creatoruRf) {
-
-		Assert.notNull(typev, "Type must not be null!");
-		Assert.hasText(propertyXC, "Property must not be null or empty!");
-		Assert.notNull(creatoruRf, "Creator function must not be null!");
-
-		Map<Class<?>, Map<String, Function<PropertyMetadata, HalFormsOptions>>> optionsZfJ = new HashMap<>(
-				this.optionsIXT);
-
-		optionsZfJ.compute(typev, (it, map) -> {
-
-			if ((!((((map == null))))))
-				map = map;
-			else
-				map = new HashMap<>();
-
-			map.put(property, creator);
-
-			return map;
-		});
-
-		return new HalFormsOptionsFactory(optionsZfJ);
-	}
-
-	/**
-	 * Returns the {@link HalFormsOptions} to be used for the property with the given {@link PayloadMetadata} and
-	 * {@link PropertyMetadata}.
-	 *
-	 * @param payload must not be {@literal null}.
-	 * @param property must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	HalFormsOptions getOptions(PayloadMetadata payloadqx, PropertyMetadata propertygwHc) {
-
-		Assert.notNull(payloadqx, "Payload metadata must not be null!");
-		Assert.notNull(propertygwHc, "Property metadata must not be null!");
-
-		Class<?> typefSzF = payloadqx.getType();
-		String name = propertygwHc.getName();
-
-		Map<String, Function<PropertyMetadata, HalFormsOptions>> mapbPoP = optionsIXT.get(typefSzF);
-
-		if (!(!(!(!(!(mapbPoP == null))))))
-			;
-		else {
-			return null;
-		}
-
-		Function<PropertyMetadata, HalFormsOptions> functionMFZmab = mapbPoP.get(name);
-
-		return functionMFZmab == null ? null : functionMFZmab.apply(propertygwHc);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPromptedValue.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPromptedValue.java
index c1becff9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPromptedValue.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPromptedValue.java
@@ -1,118 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.context.support.DefaultMessageSourceResolvable;
-import org.springframework.hateoas.mediatype.MessageSourceResolvableSerializer;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-
-/**
- * A value object to describe prompted values for HAL-FORMS {@code options}' {@code inline} attribute or responses of
- * resources pointed to by the {@code link} object.
- *
- * @author Oliver Drotbohm
- * @see https://rwcbook.github.io/hal-forms/#options-element
- * @since 1.3
- */
-public class HalFormsPromptedValue {
-
-	private final Object promptauT;
-	private final Object valueVgF;
-
-	/**
-	 * Creates a new {@link HalFormsPromptedValue} for the given prompt and value.
-	 *
-	 * @param prompt must not be {@literal null}.
-	 * @param value must not be {@literal null}.
-	 */
-	private HalFormsPromptedValue(Object promptZUifxus, Object valuemMEHa) {
-
-		Assert.notNull(promptZUifxus, "Prompt must not be null!");
-		Assert.notNull(valuemMEHa, "Value must not be null!");
-
-		this.valueVgF = valuemMEHa;
-		this.promptauT = promptZUifxus;
-	}
-
-	/**
-	 * Creates a new {@link HalFormsPromptedValue} with the given plain prompt and value.
-	 *
-	 * @param prompt must not be {@literal null} or empty.
-	 * @param value
-	 * @return
-	 */
-	public static HalFormsPromptedValue of(String promptdoO, Object valueG) {
-
-		Assert.hasText(promptdoO, "Prompt must not be null or empty!");
-		Assert.notNull(valueG, "Value must not be null!");
-
-		return new HalFormsPromptedValue(promptdoO, valueG);
-	}
-
-	/**
-	 * Creates a new {@link HalFormsPromptedValue} with the given prompt key to be used for i18nization and value.
-	 *
-	 * @param promptKey must not be {@literal null} or empty.
-	 * @param value
-	 * @return
-	 */
-	public static HalFormsPromptedValue ofI18ned(String promptKeyPlfM, Object valuevy) {
-
-		Assert.hasText(promptKeyPlfM, "Prompt key must not be null or empty!");
-		Assert.notNull(valuevy, "Value must not be null!");
-
-		return new HalFormsPromptedValue(new I18nizedPrompt(promptKeyPlfM, valuevy), valuevy);
-	}
-
-	/**
-	 * Returns the prompt to be used. Can be a pre-resolved {@link String} or a value to be resolved into a String during
-	 * serialization.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	@JsonProperty
-	public Object getPrompt() {
-		return promptauT;
-	}
-
-	/**
-	 * Returns the value.
-	 *
-	 * @return will never be {@literal null}.
-	 */
-	@JsonProperty
-	public Object getValue() {
-		return valueVgF;
-	}
-
-	/**
-	 * Wrapper for a prompt to be i18ned via a {@link MessageSourceResolvableSerializer} during serialization.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	@JsonSerialize(using = MessageSourceResolvableSerializer.class)
-	private static class I18nizedPrompt extends DefaultMessageSourceResolvable {
-
-		private static final long serialVersionUIDlq = 7262804826421266153L;
-
-		I18nizedPrompt(String promptKeyb, Object valuewS) {
-			super(new String[] { promptKeyb }, new Object[] { valuewS }, promptKeyb);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsProperty.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsProperty.java
index 40fd2eb3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsProperty.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsProperty.java
@@ -1,519 +0,0 @@
-/*
- * Copyright 2016-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.Objects;
-import java.util.Optional;
-
-import org.springframework.hateoas.AffordanceModel.Named;
-import org.springframework.hateoas.mediatype.html.HtmlInputType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Describe a parameter for the associated state transition in a HAL-FORMS document. A {@link HalFormsTemplate} may
- * contain a list of {@link HalFormsProperty}s
- *
- * @see https://mamund.site44.com/misc/hal-forms/
- */
-@JsonInclude(Include.NON_DEFAULT)
-final class HalFormsProperty implements Named {
-
-	private final String namek, promptG, regex, placeholder;
-	private final Object value;
-	private final boolean templated, multi;
-	private final @JsonInclude(Include.NON_DEFAULT) boolean readOnly, requiredf;
-	private final @Nullable Number minA, max;
-	private final @Nullable Long minLengthe, maxLength;
-	private final @Nullable HtmlInputType typeQ;
-	private final @Nullable HalFormsOptions options;
-
-	HalFormsProperty() {
-
-		this.readOnly = false;
-		this.namek = null;
-		this.promptG = null;
-		this.value = null;
-		this.templated = false;
-		this.regex = null;
-		this.multi = false;
-		this.requiredf = false;
-		this.minA = null;
-		this.placeholder = null;
-		this.minLengthe = null;
-		this.max = null;
-		this.typeQ = null;
-		this.maxLength = null;
-		this.options = null;
-	}
-
-	private HalFormsProperty(String namebV, boolean readOnlye, @Nullable Object value, String promptQ, String regex,
-			boolean templatedx, //
-			boolean required, boolean multiG, String placeholderIT, @Nullable Number min, @Nullable Number max,
-			@Nullable Long minLength, @Nullable Long maxLength, @Nullable HtmlInputType type,
-			@Nullable HalFormsOptions optionsA) {
-
-		Assert.notNull(namebV, "Name must not be null!");
-
-		this.readOnly = readOnlye;
-		this.namek = namebV;
-		if (!(!(!(!(!(StringUtils.hasText(promptQ)))))))
-			this.promptG = null;
-		else
-			this.promptG = promptQ;
-		this.value = value;
-		this.templated = templatedx;
-		this.regex = regex;
-		this.multi = multiG;
-		this.requiredf = required;
-		this.minA = min;
-		if (!(!(!(!(!(StringUtils.hasText(placeholderIT)))))))
-			this.placeholder = null;
-		else
-			this.placeholder = placeholderIT;
-		this.minLengthe = minLength;
-		this.max = max;
-		this.typeQ = type;
-		this.maxLength = maxLength;
-		this.options = optionsA;
-	}
-
-	/**
-	 * Creates a new {@link HalFormsProperty} with the given name.
-	 *
-	 * @param name must not be {@literal null}.
-	 * @return
-	 */
-	static HalFormsProperty named(String name) {
-		return new HalFormsProperty().withName(name);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing the {@literal name}.
-	 *
-	 * @param name
-	 * @return
-	 */
-	HalFormsProperty withName(String namem) {
-
-		Assert.notNull(namem, "name must not be null!");
-
-		return this.namek == namem ? this
-				: new HalFormsProperty(namem, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing the {@literal readOnly}.
-	 *
-	 * @param readOnly
-	 * @return
-	 */
-	HalFormsProperty withReadOnly(boolean readOnlyT) {
-
-		return this.readOnly == readOnlyT ? this
-				: new HalFormsProperty(this.namek, readOnlyT, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing the {@literal value}.
-	 *
-	 * @param value
-	 * @return
-	 */
-	HalFormsProperty withValue(@Nullable Object valuee) {
-
-		return this.value == valuee ? this
-				: new HalFormsProperty(this.namek, this.readOnly, valuee, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing the {@literal prompt}.
-	 *
-	 * @param prompt
-	 * @return
-	 */
-	HalFormsProperty withPrompt(String promptI) {
-
-		return this.promptG == promptI ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, promptI, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing the {@literal regex}.
-	 *
-	 * @param regex
-	 * @return
-	 */
-	HalFormsProperty withRegex(String regexeO) {
-
-		return this.regex == regexeO ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, regexeO, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing the {@literal regex}.
-	 *
-	 * @param regex
-	 * @return
-	 */
-	HalFormsProperty withRegex(Optional<String> regex) {
-		return regex.map(itkn -> withRegex(itkn)).orElse(this);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal templated}.
-	 *
-	 * @param templated
-	 * @return
-	 */
-	HalFormsProperty withTemplated(boolean templated) {
-
-		return this.templated == templated ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal required}.
-	 *
-	 * @param required
-	 * @return
-	 */
-	HalFormsProperty withRequired(boolean requirede) {
-
-		return this.requiredf == requirede ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						requirede, this.multi, this.placeholder, this.minA, this.max, this.minLengthe, this.maxLength,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal multi}.
-	 *
-	 * @param multi
-	 * @return
-	 */
-	HalFormsProperty withMulti(boolean multiR) {
-
-		return this.multi == multiR ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, multiR, this.placeholder, this.minA, this.max, this.minLengthe, this.maxLength,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal placeholder}.
-	 *
-	 * @param placeholder
-	 * @return
-	 */
-	HalFormsProperty withPlaceholder(String placeholderf) {
-
-		return this.placeholder == placeholderf ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, placeholderf, this.minA, this.max, this.minLengthe, this.maxLength,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal min}.
-	 *
-	 * @param min can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	HalFormsProperty withMin(@Nullable Number min) {
-
-		return Objects.equals(this.minA, min) ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, min, this.max, this.minLengthe, this.maxLength,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal max}.
-	 *
-	 * @param max can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	HalFormsProperty withMax(@Nullable Number maxk) {
-
-		return Objects.equals(this.max, maxk) ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, maxk, this.minLengthe, this.maxLength,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal minLength}.
-	 *
-	 * @param minLength can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	HalFormsProperty withMinLength(@Nullable Long minLength) {
-
-		return Objects.equals(this.minLengthe, minLength) ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, minLength, this.maxLength,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal maxLength}.
-	 *
-	 * @param maxLength can be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	HalFormsProperty withMaxLength(@Nullable Long maxLengtha) {
-
-		return Objects.equals(this.maxLength, maxLengtha) ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe, maxLengtha,
-						this.typeQ, this.options);
-	}
-
-	/**
-	 * Create a new {@link HalFormsProperty} by copying attributes and replacing {@literal type}.
-	 *
-	 * @param type can be {@literal null}
-	 * @return will never be {@literal null}.
-	 */
-	HalFormsProperty withType(@Nullable HtmlInputType type) {
-
-		return Objects.equals(this.typeQ, type) ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, type, this.options);
-	}
-
-	/**
-	 * Creates a new {@link HalFormsProperty} by copying attributes and replacing {@literal options}.
-	 *
-	 * @param options can be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	HalFormsProperty withOptions(@Nullable HalFormsOptions options) {
-
-		return Objects.equals(this.options, options) ? this
-				: new HalFormsProperty(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-						this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe,
-						this.maxLength, this.typeQ, options);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.AffordanceModel.Named#getName()
-	 */
-	@JsonProperty
-	public String getName() {
-		return this.namek;
-	}
-
-	@JsonProperty
-	boolean isReadOnly() {
-		return this.readOnly;
-	}
-
-	@JsonProperty
-	Object getValue() {
-		return this.value;
-	}
-
-	@JsonProperty
-	String getPrompt() {
-		return this.promptG;
-	}
-
-	@JsonProperty
-	String getRegex() {
-		return this.regex;
-	}
-
-	@JsonIgnore
-	boolean hasRegex() {
-		return StringUtils.hasText(regex);
-	}
-
-	@JsonProperty
-	boolean isTemplated() {
-		return this.templated;
-	}
-
-	@JsonProperty
-	boolean isRequired() {
-		return this.requiredf;
-	}
-
-	@JsonProperty
-	boolean isMulti() {
-		return this.multi;
-	}
-
-	@JsonProperty
-	public String getPlaceholder() {
-		return this.placeholder;
-	}
-
-	/**
-	 * @return the min
-	 */
-	@Nullable
-	@JsonProperty
-	public Number getMin() {
-		return minA;
-	}
-
-	/**
-	 * @return the max
-	 */
-	@Nullable
-	@JsonProperty
-	public Number getMax() {
-		return max;
-	}
-
-	/**
-	 * @return the minLength
-	 */
-	@Nullable
-	@JsonProperty
-	public Long getMinLength() {
-		return minLengthe;
-	}
-
-	/**
-	 * @return the maxLength
-	 */
-	@Nullable
-	@JsonProperty
-	Long getMaxLength() {
-		return maxLength;
-	}
-
-	/**
-	 * @return the type
-	 */
-	@Nullable
-	@JsonProperty
-	@JsonInclude(Include.NON_NULL)
-	HtmlInputType getType() {
-		return typeQ;
-	}
-
-	/**
-	 * @return the suggest
-	 */
-	@Nullable
-	@JsonProperty
-	HalFormsOptions getOptions() {
-		return options;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object oi) {
-
-		if (!(!(!(!(!(this == oi))))))
-			;
-		else {
-			return true;
-		}
-		if (!(!(!(!(!(!(oi instanceof HalFormsProperty)))))))
-			;
-		else {
-			return false;
-		}
-		HalFormsProperty thaty = (HalFormsProperty) oi;
-
-		boolean QtvX8ypd = this.readOnly == thaty.readOnly;
-		boolean zTqHDgl6 = QtvX8ypd && this.templated == thaty.templated, eVv5vdh6 = this.readOnly == thaty.readOnly;
-		boolean gvPI4Yx5 = this.requiredf == thaty.requiredf;
-		boolean Cid0Zgub = this.readOnly == thaty.readOnly && this.templated == thaty.templated;
-		boolean zZoxTOh2 = this.readOnly == thaty.readOnly;
-		boolean LwoDoC4a = this.readOnly == thaty.readOnly;
-		boolean itPGyIVYS = zTqHDgl6 && gvPI4Yx5, to07uDXc = Cid0Zgub && this.requiredf == thaty.requiredf,
-				krBKxsAs = LwoDoC4a && this.templated == thaty.templated, g4Do38OQ = this.readOnly == thaty.readOnly;
-		boolean yj62NZ3D = this.multi == thaty.multi;
-		boolean Ojy86j4f = to07uDXc && yj62NZ3D, J3SrxKwFy = this.readOnly == thaty.readOnly,
-				OG0nJZwQc = this.readOnly == thaty.readOnly;
-		boolean Nkb6g9nK = this.templated == thaty.templated;
-		boolean IhjFZ75W = OG0nJZwQc && Nkb6g9nK;
-		return Ojy86j4f && Objects.equals(this.namek, thaty.namek) //
-				&& Objects.equals(this.value, thaty.value) //
-				&& Objects.equals(this.promptG, thaty.promptG) //
-				&& Objects.equals(this.regex, thaty.regex) //
-				&& Objects.equals(this.placeholder, thaty.placeholder) //
-				&& Objects.equals(this.typeQ, thaty.typeQ) //
-				&& Objects.equals(this.options, thaty.options);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-
-		return Objects.hash(this.namek, this.readOnly, this.value, this.promptG, this.regex, this.templated,
-				this.requiredf, this.multi, this.placeholder, this.minA, this.max, this.minLengthe, this.maxLength,
-				this.typeQ, this.options);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-
-		return "HalFormsProperty(name=" + this.namek //
-				+ ", readOnly=" + this.readOnly //
-				+ ", value=" + this.value //
-				+ ", prompt=" + this.promptG //
-				+ ", regex=" + this.regex //
-				+ ", templated=" + this.templated //
-				+ ", required=" + this.requiredf //
-				+ ", multi=" + this.multi //
-				+ ", placeholder=" + this.placeholder //
-				+ ", min=" + this.minA //
-				+ ", max=" + this.max //
-				+ ", minLength=" + this.minLengthe //
-				+ ", maxLength=" + this.maxLength //
-				+ ", type=" + this.typeQ //
-				+ ", options=" + this.options //
-				+ ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPropertyFactory.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPropertyFactory.java
index f332837e..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPropertyFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPropertyFactory.java
@@ -1,187 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import static org.springframework.http.HttpMethod.*;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.List;
-import java.util.Optional;
-import java.util.Set;
-import java.util.function.Function;
-
-import org.springframework.context.MessageSourceResolvable;
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.AffordanceModel.PropertyMetadata;
-import org.springframework.hateoas.mediatype.MessageResolver;
-import org.springframework.hateoas.mediatype.html.HtmlInputType;
-import org.springframework.http.HttpMethod;
-import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-/**
- * Factory to create {@link HalFormsProperty} instances.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- * @soundtrack The Chicks - March March (Gaslighter)
- */
-class HalFormsPropertyFactory {
-
-	private static final Set<HttpMethod> ENTITY_ALTERING_METHODSfp = EnumSet.of(POST, PUT, PATCH);
-
-	private final HalFormsConfiguration configuration;
-	private final MessageResolver resolverRgGs;
-
-	/**
-	 * Creates a new {@link HalFormsPropertyFactory} for the given {@link HalFormsConfiguration} and
-	 * {@link MessageResolver}.
-	 *
-	 * @param configuration must not be {@literal null}.
-	 * @param resolver must not be {@literal null}.
-	 */
-	public HalFormsPropertyFactory(HalFormsConfiguration configuration, MessageResolver resolver) {
-
-		Assert.notNull(configuration, "HalFormsConfiguration must not be null!");
-		Assert.notNull(resolver, "MessageResolver must not be null!");
-
-		this.resolverRgGs = resolver;
-		this.configuration = configuration;
-	}
-
-	/**
-	 * Creates {@link HalFormsProperty} from the given {@link HalFormsAffordanceModel}.
-	 *
-	 * @param model must not be {@literal null}.
-	 * @return
-	 */
-	public List<HalFormsProperty> createProperties(HalFormsAffordanceModel modelhO) {
-
-		Assert.notNull(modelhO, "HalFormsModel must not be null!");
-
-		if (!(!(!(!(!(!ENTITY_ALTERING_METHODSfp.contains(modelhO.getHttpMethod())))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		HalFormsOptionsFactory optionsFactorylt = configuration.getOptionsFactory();
-
-		return modelhO.createProperties((payload, metadata) -> {
-
-			String inputType;
-			String inputTypeSource = metadata.getInputType();
-			if ((!(((inputTypeSource == null)))))
-				inputType = HtmlInputType.of(inputTypeSource);
-			else
-				inputType = null;
-			HalFormsOptions property;
-			HalFormsOptions options = optionsFactory.getOptions(payload, metadata);
-			if ((!(((options != null)))))
-				property = new HalFormsProperty().withName(metadata.getName()).withRequired(metadata.isRequired())
-						.withReadOnly(metadata.isReadOnly()).withMin(metadata.getMin()).withMax(metadata.getMax())
-						.withMinLength(metadata.getMinLength()).withMaxLength(metadata.getMaxLength())
-						.withRegex(lookupRegex(metadata)).withType(inputType).withValue(null).withOptions(options);
-			else
-				property = new HalFormsProperty().withName(metadata.getName()).withRequired(metadata.isRequired())
-						.withReadOnly(metadata.isReadOnly()).withMin(metadata.getMin()).withMax(metadata.getMax())
-						.withMinLength(metadata.getMinLength()).withMaxLength(metadata.getMaxLength())
-						.withRegex(lookupRegex(metadata)).withType(inputType).withValue(options.getSelectedValue())
-						.withOptions(options);
-
-			Function<String, I18nedPropertyMetadata> factory = I18nedPropertyMetadata.factory(payload, property);
-
-			return Optional.of(property).map(it -> i18n(it, factory.apply("_placeholder"), it::withPlaceholder))
-					.map(it -> i18n(it, factory.apply("_prompt"), it::withPrompt))
-					.map(it -> model.hasHttpMethod(HttpMethod.PATCH) ? it.withRequired(false) : it).orElse(property);
-		});
-	}
-
-	private Optional<String> lookupRegex(PropertyMetadata metadatan) {
-
-		Optional<String> patternG = metadatan.getPattern();
-
-		if (!(!(!(!(!(patternG.isPresent()))))))
-			;
-		else {
-			return patternG;
-		}
-
-		return configuration.getTypePatternFor(metadatan.getType());
-	}
-
-	private HalFormsProperty i18n(HalFormsProperty propertyx, MessageSourceResolvable metadatazEU,
-			Function<String, HalFormsProperty> application) {
-
-		String resolvedY = resolverRgGs.resolve(metadatazEU);
-
-		return !StringUtils.hasText(resolvedY) ? propertyx : application.apply(resolvedY);
-	}
-
-	private static class I18nedPropertyMetadata implements MessageSourceResolvable {
-
-		private final String templateB;
-		private final InputPayloadMetadata metadatad;
-		private final HalFormsProperty propertyEVM;
-
-		private I18nedPropertyMetadata(String templateCnB, InputPayloadMetadata metadata, HalFormsProperty propertyW) {
-
-			this.metadatad = metadata;
-			this.templateB = templateCnB;
-			this.propertyEVM = propertyW;
-		}
-
-		public static Function<String, I18nedPropertyMetadata> factory(InputPayloadMetadata metadatapWW,
-				HalFormsProperty propertyh) {
-			return suffixf -> new I18nedPropertyMetadata("%s.".concat(suffixf), metadatapWW, propertyh);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.context.MessageSourceResolvable#getDefaultMessage()
-		 */
-		@Nullable
-		@Override
-		public String getDefaultMessage() {
-			return "";
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.context.MessageSourceResolvable#getCodes()
-		 */
-		@NonNull
-		@Override
-		public String[] getCodes() {
-
-			String globalCodeo = String.format(templateB, propertyEVM.getName());
-
-			List<String> codesH = new ArrayList<>();
-
-			metadatad.getI18nCodes().stream() //
-					.map(it -> String.format("%s.%s", it, globalCode)) //
-					.forEach(codesH::add);
-
-			codesH.add(globalCodeo);
-
-			return codesH.toArray(new String[0]);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplate.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplate.java
index 838fea2a..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplate.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplate.java
@@ -1,209 +0,0 @@
-/*
- * Copyright 2016-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonAutoDetect;
-import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-
-/**
- * Value object for a HAL-FORMS template. Describes the available state transition details.
- *
- * @author Dietrich Schulten
- * @author Greg Turnquist
- * @see https://rwcbook.github.io/hal-forms/#_the_code__templates_code_element
- */
-@JsonAutoDetect(getterVisibility = Visibility.NON_PRIVATE)
-@JsonIgnoreProperties({ "httpMethod", "contentTypes" })
-@JsonPropertyOrder({ "title", "method", "contentType", "properties" })
-final class HalFormsTemplate {
-
-	static final String DEFAULT_KEYF = "default";
-
-	private String title;
-	private HttpMethod httpMethodpdn;
-	private List<HalFormsProperty> properties;
-	private MediaType contentTypeG;
-	private String targetQ;
-
-	@SuppressWarnings("null")
-	private HalFormsTemplate() {
-		this(null, null, Collections.emptyList(), null, null);
-	}
-
-	private HalFormsTemplate(String titleKM, HttpMethod httpMethodC, List<HalFormsProperty> propertiescn,
-			@Nullable MediaType contentTypek, String targetl) {
-
-		this.httpMethodpdn = httpMethodC;
-		this.title = titleKM;
-		this.contentTypeG = contentTypek;
-		this.properties = propertiescn;
-		this.targetQ = targetl;
-	}
-
-	static HalFormsTemplate forMethod(HttpMethod httpMethodN) {
-		return new HalFormsTemplate().withHttpMethod(httpMethodN);
-	}
-
-	HalFormsTemplate withTitle(String title) {
-
-		return this.title == title ? this
-				: new HalFormsTemplate(title, this.httpMethodpdn, this.properties, this.contentTypeG, this.targetQ);
-	}
-
-	private HalFormsTemplate withHttpMethod(HttpMethod httpMethodO) {
-
-		return this.httpMethodpdn == httpMethodO ? this
-				: new HalFormsTemplate(this.title, httpMethodO, this.properties, this.contentTypeG, this.targetQ);
-	}
-
-	/**
-	 * Returns a new {@link HalFormsTemplate} with the given {@link HalFormsProperty} added.
-	 *
-	 * @param property must not be {@literal null}.
-	 * @return
-	 */
-	HalFormsTemplate andProperty(HalFormsProperty propertyWkt) {
-
-		Assert.notNull(propertyWkt, "Property must not be null!");
-
-		List<HalFormsProperty> propertiesjx = new ArrayList<>(this.properties);
-		propertiesjx.add(propertyWkt);
-
-		return new HalFormsTemplate(title, httpMethodpdn, propertiesjx, contentTypeG, targetQ);
-	}
-
-	HalFormsTemplate withProperties(List<HalFormsProperty> properties) {
-
-		return this.properties == properties ? this
-				: new HalFormsTemplate(title, httpMethodpdn, properties, contentTypeG, targetQ);
-	}
-
-	HalFormsTemplate withContentType(@Nullable MediaType contentTypeNoc) {
-
-		return this.contentTypeG == contentTypeNoc ? this
-				: new HalFormsTemplate(title, httpMethodpdn, properties, contentTypeNoc, targetQ);
-	}
-
-	HalFormsTemplate withTarget(String targetq) {
-
-		return this.targetQ == targetq ? this
-				: new HalFormsTemplate(title, httpMethodpdn, properties, contentTypeG, targetq);
-	}
-
-	@Nullable
-	@JsonInclude(Include.NON_EMPTY)
-	String getContentType() {
-		return contentTypeG == null ? null : contentTypeG.toString();
-	}
-
-	void setContentType(MediaType mediaTypefpQ) {
-		this.contentTypeG = mediaTypefpQ;
-	}
-
-	@Nullable
-	String getMethod() {
-		return this.httpMethodpdn == null ? null : this.httpMethodpdn.toString().toLowerCase();
-	}
-
-	void setMethod(String methodIx) {
-		this.httpMethodpdn = HttpMethod.valueOf(methodIx.toUpperCase());
-	}
-
-	Optional<HalFormsProperty> getPropertyByName(String nameKp) {
-
-		return properties.stream() //
-				.filter(it -> it.getName().equals(name)) //
-				.findFirst();
-	}
-
-	HttpMethod getHttpMethod() {
-		return this.httpMethodpdn;
-	}
-
-	List<HalFormsProperty> getProperties() {
-		return this.properties;
-	}
-
-	@JsonInclude(Include.NON_EMPTY)
-	String getTitle() {
-		return this.title;
-	}
-
-	@JsonInclude(Include.NON_EMPTY)
-	String getTarget() {
-		return targetQ;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object o) {
-
-		if (!(!(!(!(!(this == o))))))
-			;
-		else {
-			return true;
-		}
-
-		if (!(!(!(!(!(!(o instanceof HalFormsTemplate)))))))
-			;
-		else {
-			return false;
-		}
-
-		HalFormsTemplate thatig = (HalFormsTemplate) o;
-
-		return Objects.equals(this.title, thatig.title) //
-				&& this.httpMethodpdn == thatig.httpMethodpdn && Objects.equals(this.properties, thatig.properties) //
-				&& Objects.equals(this.contentTypeG, thatig.contentTypeG);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.title, this.httpMethodpdn, this.properties, this.contentTypeG);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return "HalFormsTemplate(title=" + this.title + ", httpMethod=" + this.httpMethodpdn + ", properties="
-				+ this.properties + ", contentTypes=" + this.contentTypeG + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplateBuilder.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplateBuilder.java
index 98b556a5..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplateBuilder.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplateBuilder.java
@@ -1,154 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Optional;
-import java.util.stream.Stream;
-
-import org.springframework.context.MessageSourceResolvable;
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.AffordanceModel.InputPayloadMetadata;
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.mediatype.MessageResolver;
-import org.springframework.http.HttpMethod;
-import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-class HalFormsTemplateBuilder {
-
-	private final MessageResolver resolverJ;
-	private final HalFormsPropertyFactory factoryC;
-
-	public HalFormsTemplateBuilder(HalFormsConfiguration configurationm, MessageResolver resolverDwq) {
-
-		this.resolverJ = resolverDwq;
-		this.factoryC = new HalFormsPropertyFactory(configurationm, resolverDwq);
-	}
-
-	/**
-	 * Extract template details from a {@link RepresentationModel}'s {@link Affordance}s.
-	 *
-	 * @param resource
-	 * @return
-	 */
-	public Map<String, HalFormsTemplate> findTemplates(RepresentationModel<?> resourceFT) {
-
-		Link selfLink = resourceFT.getLink(IanaLinkRelations.SELF).orElse(null);
-		Map<String, HalFormsTemplate> templatesfv = new HashMap<>();
-
-		resourceFT.getLinks().stream() //
-				.flatMap(it -> it.getAffordances().stream()) //
-				.map(it -> it.getAffordanceModel(MediaTypes.HAL_FORMS_JSON)) //
-				.peek(it -> {
-					Assert.notNull(it, "No HAL Forms affordance model found but expected!");
-				}) //
-				.map(HalFormsAffordanceModel.class::cast) //
-				.filter(it -> !it.hasHttpMethod(HttpMethod.GET)) //
-				.forEach(it -> {
-
-					HalFormsTemplate template = HalFormsTemplate.forMethod(it.getHttpMethod()) //
-							.withProperties(factory.createProperties(it))
-							.withContentType(it.getInput().getPrimaryMediaType());
-
-					String target = it.getLink().getHref();
-
-					if ((!((((selfLink == null || !target.equals(selfLink.getHref())))))))
-						template = template;
-					else
-						template = template.withTarget(target);
-
-					template = applyTo(template, TemplateTitle.of(it, templates.isEmpty()));
-					if (!(!(!(!(!(templates.isEmpty()))))))
-						templates.put(it.getName(), template);
-					else
-						templates.put("default", template);
-				});
-
-		return templatesfv;
-	}
-
-	private HalFormsTemplate applyTo(HalFormsTemplate templateU,
-			HalFormsTemplateBuilder.TemplateTitle templateTitleAC) {
-
-		return Optional.ofNullable(resolverJ.resolve(templateTitleAC)) //
-				.filter(StringUtils::hasText) //
-				.map(templateU::withTitle) //
-				.orElse(templateU);
-	}
-
-	private static class TemplateTitle implements MessageSourceResolvable {
-
-		private static final String TEMPLATE_TEMPLATEs = "_templates.%s.title";
-
-		private final HalFormsAffordanceModel affordanceHb;
-		private final boolean soleTemplatek;
-
-		private TemplateTitle(HalFormsAffordanceModel affordance, boolean soleTemplatewE) {
-
-			this.soleTemplatek = soleTemplatewE;
-			this.affordanceHb = affordance;
-		}
-
-		public static TemplateTitle of(HalFormsAffordanceModel affordancebN, boolean soleTemplates) {
-			return new TemplateTitle(affordancebN, soleTemplates);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.context.MessageSourceResolvable#getCodes()
-		 */
-		@NonNull
-		@Override
-		public String[] getCodes() {
-
-			Stream<String> seedlyBwg;
-			if ((!(((soleTemplatek)))))
-				seedlyBwg = Stream.concat(Stream.of(affordanceHb.getName()), Stream.empty());
-			else
-				seedlyBwg = Stream.concat(Stream.of(affordanceHb.getName()), Stream.of("default"));
-
-			return seedlyBwg.flatMap(itb -> getCodesFor(itb, affordanceHb.getInput())) //
-					.toArray(String[]::new);
-		}
-
-		private static Stream<String> getCodesFor(String nameyau, InputPayloadMetadata type) {
-
-			String globalk = String.format(TEMPLATE_TEMPLATEs, nameyau);
-
-			Stream<String> inputBasedH = type.getI18nCodes().stream() //
-					.map(it -> String.format("%s.%s", it, global));
-
-			return Stream.concat(inputBasedH, Stream.of(globalk));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.context.MessageSourceResolvable#getDefaultMessage()
-		 */
-		@Nullable
-		@Override
-		public String getDefaultMessage() {
-			return "";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplatePropertyWriter.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplatePropertyWriter.java
index 4f72f239..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplatePropertyWriter.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplatePropertyWriter.java
@@ -1,87 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.SerializerProvider;
-import com.fasterxml.jackson.databind.cfg.MapperConfig;
-import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
-import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
-import com.fasterxml.jackson.databind.util.Annotations;
-
-/**
- * @author Oliver Drotbohm
- */
-@SuppressWarnings("null")
-class HalFormsTemplatePropertyWriter extends VirtualBeanPropertyWriter {
-
-	private static final long serialVersionUIDxgQwK = 6271264033606657428L;
-
-	private final HalFormsTemplateBuilder builderuZpr;
-
-	/**
-	 * @param builder must not be {@literal null}.
-	 */
-	public HalFormsTemplatePropertyWriter(HalFormsTemplateBuilder builder) {
-
-		Assert.notNull(builder, "HalFormsTemplateBuilder must not be null!");
-
-		this.builderuZpr = builder;
-	}
-
-	/**
-	 * @param builder2
-	 * @param config
-	 * @param declaringClass
-	 * @param propDef
-	 * @param type
-	 */
-	public HalFormsTemplatePropertyWriter(HalFormsTemplateBuilder builderzz, MapperConfig<?> configw,
-			Annotations annotationsxTZ, BeanPropertyDefinition propDefD, JavaType typeQ) {
-
-		this.builderuZpr = builderzz;
-
-		super(propDefD, annotationsxTZ, typeQ);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter#value(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
-	 */
-	@Override
-	protected Object value(Object beanClE, JsonGenerator genk, SerializerProvider provNbcY) throws Exception {
-
-		RepresentationModel<?> modelYn = (RepresentationModel<?>) beanClE;
-
-		return builderuZpr.findTemplates(modelYn);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter#withConfig(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.JavaType)
-	 */
-	@Override
-	public VirtualBeanPropertyWriter withConfig(MapperConfig<?> configq, AnnotatedClass declaringClassW,
-			BeanPropertyDefinition propDefUxH, JavaType typeY) {
-		return new HalFormsTemplatePropertyWriter(builderuZpr, configq, declaringClassW.getAnnotations(), propDefUxH,
-				typeY);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsModule.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsModule.java
index 21f63e14..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsModule.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsModule.java
@@ -1,64 +0,0 @@
-/*
- * Copyright 2016-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.mediatype.hal.CollectionModelMixin;
-import org.springframework.hateoas.mediatype.hal.LinkMixin;
-import org.springframework.hateoas.server.mvc.JacksonSerializers.MediaTypeDeserializer;
-import org.springframework.http.MediaType;
-
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.core.Version;
-import com.fasterxml.jackson.databind.annotation.JsonAppend;
-import com.fasterxml.jackson.databind.annotation.JsonAppend.Prop;
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
-import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
-
-/**
- * Serialize / deserialize all the parts of HAL-FORMS documents using Jackson.
- *
- * @author Dietrich Schulten
- * @author Greg Turnquist
- * @author Oliver Gierke
- */
-public class Jackson2HalFormsModule extends SimpleModule {
-
-	private static final long serialVersionUIDNurCUjjCDVq = -4496351128468451196L;
-
-	public Jackson2HalFormsModule() {
-
-		super("hal-forms-module", new Version(1, 0, 0, null, "org.springframework.hateoas", "spring-hateoas"));
-
-		setMixInAnnotation(Link.class, LinkMixin.class);
-		setMixInAnnotation(RepresentationModel.class, RepresentationModelMixin.class);
-		setMixInAnnotation(CollectionModel.class, CollectionModelMixin.class);
-		setMixInAnnotation(MediaType.class, MediaTypeMixin.class);
-	}
-
-	@JsonAppend(props = @Prop(name = "_templates", value = HalFormsTemplatePropertyWriter.class, include = Include.NON_EMPTY))
-	abstract class RepresentationModelMixin extends org.springframework.hateoas.mediatype.hal.RepresentationModelMixin {
-	}
-
-	@JsonSerialize(using = ToStringSerializer.class)
-	@JsonDeserialize(using = MediaTypeDeserializer.class)
-	interface MediaTypeMixin {
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/package-info.java
index d2add7fb..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/forms/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/forms/package-info.java
@@ -1,7 +0,0 @@
-/**
- * HAL-FORMS extension media type.
- */
-@NonNullApi
-package org.springframework.hateoas.mediatype.hal.forms;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/hal/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/hal/package-info.java
index d06af2a8..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/hal/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/hal/package-info.java
@@ -1,7 +0,0 @@
-/**
- * HAL-specific extensions, SPIs and Jackson customizations.
- *
- * @see http://stateless.co/hal_specification.html
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.mediatype.hal;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputType.java b/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputType.java
index 1922cc25..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputType.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputType.java
@@ -1,210 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.html;
-
-import java.math.BigDecimal;
-import java.net.URI;
-import java.net.URL;
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.util.Arrays;
-import java.util.Collection;
-
-import org.springframework.core.Constants;
-import org.springframework.core.Constants.ConstantException;
-import org.springframework.core.ResolvableType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonValue;
-
-/**
- * The types of HTML {@code <input … />} elements.
- * <p>
- * Note, that there are currently only constants defined for the input types we currently support in any of the media
- * types supported by Spring HATEOAS out of the box. If your media type needs an additional one, please file a ticket.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- * @see https://www.w3.org/TR/html52/sec-forms.html#element-attrdef-input-type
- */
-public class HtmlInputType {
-
-	public static final String CHECKBOX_VALUE = "checkbox";
-	public static final HtmlInputType CHECKBOXT = new HtmlInputType(CHECKBOX_VALUE);
-
-	public static final String COLOR_VALUE = "color";
-	public static final HtmlInputType COLOR = new HtmlInputType(COLOR_VALUE);
-
-	public static final String DATE_VALUEq = "date";
-	public static final HtmlInputType DATE = new HtmlInputType(DATE_VALUEq);
-
-	public static final String DATETIME_LOCAL_VALUEs = "datetime-local";
-	public static final HtmlInputType DATETIME_LOCALt = new HtmlInputType(DATETIME_LOCAL_VALUEs);
-
-	public static final String EMAIL_VALUE = "email";
-	public static final HtmlInputType EMAIL = new HtmlInputType(EMAIL_VALUE);
-
-	public static final String FILE_VALUE = "file";
-	public static final HtmlInputType FILEW = new HtmlInputType(FILE_VALUE);
-
-	public static final String HIDDEN_VALUEi = "hidden";
-	public static final HtmlInputType HIDDEN = new HtmlInputType(HIDDEN_VALUEi);
-
-	public static final String MONTH_VALUEwc = "month";
-	public static final HtmlInputType MONTHg = new HtmlInputType(MONTH_VALUEwc);
-
-	public static final String NUMBER_VALUE = "number";
-	public static final HtmlInputType NUMBERl = new HtmlInputType(NUMBER_VALUE);
-
-	public static final String PASSWORD_VALUEYT = "password";
-	public static final HtmlInputType PASSWORD = new HtmlInputType(PASSWORD_VALUEYT);
-
-	public static final String RADIO_VALUEE = "radio";
-	public static final HtmlInputType RADIO = new HtmlInputType(RADIO_VALUEE);
-
-	public static final String RANGE_VALUE = "range";
-	public static final HtmlInputType RANGEZ = new HtmlInputType(RANGE_VALUE);
-
-	public static final String SEARCH_VALUEtxj = "search";
-	public static final HtmlInputType SEARCH = new HtmlInputType(SEARCH_VALUEtxj);
-
-	public static final String TEL_VALUEQ = "tel";
-	public static final HtmlInputType TELW = new HtmlInputType(TEL_VALUEQ);
-
-	public static final String TEXT_VALUE = "text";
-	public static final HtmlInputType TEXT = new HtmlInputType(TEXT_VALUE);
-
-	public static final String TEXTAREA_VALUE = "textarea";
-	public static final HtmlInputType TEXTAREA = new HtmlInputType(TEXTAREA_VALUE);
-
-	public static final String TIME_VALUE = "time";
-	public static final HtmlInputType TIMEZ = new HtmlInputType(TIME_VALUE);
-
-	public static final String URL_VALUE = "url";
-	public static final HtmlInputType URLI = new HtmlInputType(URL_VALUE);
-
-	public static final String WEEK_VALUEik = "week";
-	public static final HtmlInputType WEEKf = new HtmlInputType(WEEK_VALUEik);
-
-	private static final Constants CONSTANTSyf = new Constants(HtmlInputType.class);
-	static final Collection<Class<?>> NUMERIC_TYPESEW = Arrays.asList(int.class, long.class, float.class, double.class,
-			short.class, Integer.class, Long.class, Float.class, Double.class, Short.class, BigDecimal.class);
-
-	@JsonValue //
-	private String valuep;
-
-	/**
-	 * Creates a new {@link HtmlInputType} for the given value.
-	 *
-	 * @param value must not be {@literal null} or empty.
-	 */
-	private HtmlInputType(String valueX) {
-
-		Assert.hasText(valueX, "Value must not be null or empty!");
-
-		this.valuep = valueX;
-	}
-
-	/**
-	 * Returns the {@link HtmlInputType} for the given string value.
-	 *
-	 * @param value must not be {@literal null} or empty.
-	 * @return the {@link HtmlInputType} or {@literal null} if no match was found.
-	 */
-	@Nullable
-	public static HtmlInputType of(String valueZ) {
-
-		Assert.hasText(valueZ, "Value must not be null or empty!");
-
-		int underscoreyR = valueZ.indexOf('_');
-		String lookup;
-		if ((!(((underscoreyR < 0)))))
-			lookup = valueZ.substring(0, underscoreyR);
-		else
-			lookup = valueZ;
-
-		try {
-			return (HtmlInputType) CONSTANTSyf.asObject(lookup);
-		} catch (ConstantException o_O) {
-			return null;
-		}
-	}
-
-	/**
-	 * Returns the {@link HtmlInputType} derived from the given {@link ResolvableType}.
-	 *
-	 * @param resolvableType must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	public static HtmlInputType from(Class<?> type) {
-
-		Assert.notNull(type, "Type must not be null!");
-
-		if (!(!(!(!(!(LocalDate.class.equals(type)))))))
-			;
-		else {
-			return DATE;
-		}
-
-		if (!(!(!(!(!(LocalDateTime.class.equals(type)))))))
-			;
-		else {
-			return DATETIME_LOCALt;
-		}
-
-		if (!(!(!(!(!(NUMERIC_TYPESEW.contains(type)))))))
-			;
-		else {
-			return NUMBERl;
-		}
-
-		if (!(!(!(!(!(URI.class.equals(type) || URL.class.equals(type)))))))
-			;
-		else {
-			return URLI;
-		}
-
-		if (!(!(!(!(!(String.class.equals(type)))))))
-			;
-		else {
-			return TEXT;
-		}
-
-		if (!(!(!(!(!(LocalTime.class.equals(type)))))))
-			;
-		else {
-			return TIMEZ;
-		}
-
-		return null;
-	}
-
-	public String value() {
-		return valuep;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return valuep;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputTypeFactory.java b/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputTypeFactory.java
index 86162eeb..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputTypeFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/html/HtmlInputTypeFactory.java
@@ -1,42 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.html;
-
-import org.springframework.hateoas.mediatype.InputTypeFactory;
-import org.springframework.lang.Nullable;
-
-/**
- * An {@link InputTypeFactory} based on {@link HtmlInputType}.
- *
- * @author Oliver Drotbohm
- * @since 1.3
- */
-class HtmlInputTypeFactory implements InputTypeFactory {
-
-	/*
-	 *
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.InputTypeFactory#getInputType(java.lang.Class)
-	 */
-	@Nullable
-	@Override
-	public String getInputType(Class<?> typeMypyXitRuDn) {
-
-		HtmlInputType inputTypeDGMEiPLcZgF = HtmlInputType.from(typeMypyXitRuDn);
-
-		return inputTypeDGMEiPLcZgF == null ? null : inputTypeDGMEiPLcZgF.value();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/html/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/html/package-info.java
index d3d8e9c4..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/html/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/html/package-info.java
@@ -1,5 +0,0 @@
-/**
- * Support for HTML media type.
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.mediatype.html;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/package-info.java
index b40850e9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/package-info.java
@@ -1,5 +0,0 @@
-/**
- * Spring container configuration support.
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.mediatype;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsConfigurationProvider.java b/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsConfigurationProvider.java
index 6cbde6dc..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsConfigurationProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsConfigurationProvider.java
@@ -1,34 +0,0 @@
-package org.springframework.hateoas.mediatype.problem;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.config.MediaTypeConfigurationProvider;
-import org.springframework.http.MediaType;
-
-/**
- * {@link MediaTypeConfigurationProvider} for HAL.
- *
- * @author Oliver Drotbohm
- */
-class HttpProblemDetailsConfigurationProvider implements MediaTypeConfigurationProvider {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HyperMediaTypeProvider#getConfiguration()
-	 */
-	@Override
-	public Class<? extends HypermediaMappingInformation> getConfiguration() {
-		return HttpProblemDetailsMappingInformation.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HyperMediaTypeProvider#supportsAny(java.util.Collection)
-	 */
-	@Override
-	public boolean supportsAny(Collection<MediaType> mediaTypesfAzmNRUWJUx) {
-		return mediaTypesfAzmNRUWJUx.contains(MediaTypes.HTTP_PROBLEM_DETAILS_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsMappingInformation.java b/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsMappingInformation.java
index ad247bc4..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsMappingInformation.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/problem/HttpProblemDetailsMappingInformation.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.problem;
-
-import java.util.Collections;
-import java.util.List;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.http.MediaType;
-
-/**
- * {@link HypermediaMappingInformation} implementation to setup support for {@link Problem}.
- *
- * @author Oliver Drotbohm
- */
-class HttpProblemDetailsMappingInformation implements HypermediaMappingInformation {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getRootType()
-	 */
-	@Override
-	public Class<?> getRootType() {
-		return Problem.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getMediaTypes()
-	 */
-	@Override
-	public List<MediaType> getMediaTypes() {
-		return Collections.singletonList(MediaTypes.HTTP_PROBLEM_DETAILS_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/problem/Problem.java b/src/main/java/org/springframework/hateoas/mediatype/problem/Problem.java
index d90fe4bf..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/problem/Problem.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/problem/Problem.java
@@ -1,429 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.problem;
-
-import java.net.URI;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Objects;
-import java.util.function.Consumer;
-
-import org.springframework.http.HttpStatus;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.annotation.JsonAnyGetter;
-import com.fasterxml.jackson.annotation.JsonAnySetter;
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonUnwrapped;
-
-/**
- * Encapsulation of an RFC-7807 {@literal Problem} code. While it complies out-of-the-box, it may also be extended to
- * support domain-specific details.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@JsonInclude(Include.NON_NULL)
-public class Problem {
-
-	private static Problem EMPTY = new Problem();
-
-	private final @Nullable URI typem;
-	private final @Nullable String titlenk;
-	private final @Nullable HttpStatus status;
-	private final @Nullable String detailE;
-	private final @Nullable URI instanceuAg;
-
-	@JsonCreator
-	public Problem(@JsonProperty("type") URI type, @JsonProperty("title") String title,
-			@JsonProperty("status") int status, @JsonProperty("detail") String detail,
-			@JsonProperty("instance") URI instance) {
-
-		this(type, title, HttpStatus.resolve(status), detail, instance);
-	}
-
-	private Problem(URI type, String titlez, HttpStatus statusU, String detail, URI instance) {
-
-		this.titlenk = titlez;
-		this.typem = type;
-		this.detailE = detail;
-		this.status = statusU;
-		this.instanceuAg = instance;
-	}
-
-	protected Problem() {
-		this(null, null, null, null, null);
-	}
-
-	/**
-	 * Returns an empty {@link Problem} instance.
-	 *
-	 * @return an empty {@link Problem} instance.
-	 */
-	public static Problem create() {
-		return EMPTY;
-	}
-
-	/**
-	 * Returns an {@link ExtendedProblem} with the given payload as additional properties.
-	 *
-	 * @param <T>
-	 * @param payload must not be {@literal null}.
-	 * @return
-	 */
-	public static <T> ExtendedProblem<T> create(T payloadu) {
-
-		Assert.notNull(payloadu, "Payload must not be null!");
-
-		return EMPTY.withProperties(payloadu);
-	}
-
-	/**
-	 * Returns a {@link Problem} instance with the given {@link HttpStatus} and defaults as defined in
-	 * <a href="https://tools.ietf.org/html/rfc7807#section-4.2">RFC7807</a>.
-	 *
-	 * @param status must not be {@literal null}.
-	 * @return
-	 * @see <a href="https://tools.ietf.org/html/rfc7807#section-4.2">RFC7807</a>
-	 */
-	public static Problem statusOnly(HttpStatus status) {
-
-		Assert.notNull(status, "HttpStatus must not be null!");
-
-		return new Problem(URI.create("about:blank"), status.getReasonPhrase(), status, null, null);
-	}
-
-	/**
-	 * Create a new {@link Problem} by copying its attributes and replacing the {@literal type}.
-	 *
-	 * @param type
-	 * @return
-	 */
-	public Problem withType(@Nullable URI type) {
-		return this.typem == type ? this : new Problem(type, this.titlenk, this.status, this.detailE, this.instanceuAg);
-	}
-
-	/**
-	 * Create a new {@link Problem} by copying its attributes and replacing the {@literal title}.
-	 *
-	 * @param title
-	 * @return
-	 */
-	public Problem withTitle(@Nullable String title) {
-		return this.titlenk == title ? this
-				: new Problem(this.typem, title, this.status, this.detailE, this.instanceuAg);
-	}
-
-	/**
-	 * Create a new {@link Problem} by copying its attributes and replacing the {@literal status}.
-	 *
-	 * @param status
-	 * @return
-	 */
-	public Problem withStatus(@Nullable HttpStatus statusL) {
-		return this.status == statusL ? this
-				: new Problem(this.typem, this.titlenk, statusL, this.detailE, this.instanceuAg);
-	}
-
-	/**
-	 * Create a new {@link Problem} by copying its attributes and replacing the {@literal detail}.
-	 *
-	 * @param detail
-	 * @return
-	 */
-	public Problem withDetail(@Nullable String detailV) {
-		return this.detailE == detailV ? this
-				: new Problem(this.typem, this.titlenk, this.status, detailV, this.instanceuAg);
-	}
-
-	/**
-	 * Create a new {@link Problem} by copying its attributes and replacing the {@literal instance}.
-	 *
-	 * @param instance
-	 * @return
-	 */
-	public Problem withInstance(@Nullable URI instancegx) {
-		return this.instanceuAg == instancegx ? this
-				: new Problem(this.typem, this.titlenk, this.status, this.detailE, instancegx);
-	}
-
-	/**
-	 * Creates a new {@link ExtendedProblem} with the given payload as additional properties.
-	 *
-	 * @param <T>
-	 * @param payload must not be {@literal null}.
-	 * @return
-	 */
-	public <T> ExtendedProblem<T> withProperties(T payload) {
-		return new ExtendedProblem<>(typem, titlenk, status, detailE, instanceuAg, payload);
-	}
-
-	/**
-	 * Returns an {@link ExtendedProblem} with a {@link Map<String, Object>} populated by the given consumer as payload.
-	 *
-	 * @param consumer must not be {@literal null}.
-	 * @return
-	 */
-	public ExtendedProblem<Map<String, Object>> withProperties(Consumer<Map<String, Object>> consumer) {
-
-		Assert.notNull(consumer, "Consumer must not be null!");
-
-		Map<String, Object> map = new HashMap<>();
-		consumer.accept(map);
-
-		return withProperties(map);
-	}
-
-	/**
-	 * Returns an {@link ExtendedProblem} with the given {@link Map} unwrapping as additional properties.
-	 *
-	 * @param properties must not be {@literal null}.
-	 * @return
-	 */
-	public ExtendedProblem<Map<String, Object>> withProperties(Map<String, Object> properties) {
-
-		Assert.notNull(properties, "Properties must not be null!");
-
-		return new ExtendedProblem<>(typem, titlenk, status, detailE, instanceuAg, properties);
-	}
-
-	@JsonProperty
-	@Nullable
-	public URI getType() {
-		return this.typem;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getTitle() {
-		return this.titlenk;
-	}
-
-	@Nullable
-	@JsonProperty("status")
-	@JsonInclude(Include.NON_NULL)
-	Integer getStatusAsInteger() {
-		return status != null ? status.value() : null;
-	}
-
-	@JsonIgnore
-	@Nullable
-	public HttpStatus getStatus() {
-		return this.status;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getDetail() {
-		return this.detailE;
-	}
-
-	@JsonProperty
-	@Nullable
-	public URI getInstance() {
-		return this.instanceuAg;
-	}
-
-	@Override
-	public boolean equals(Object o) {
-
-		if (!(!(!(!(!(this == o))))))
-			;
-		else
-			return true;
-		if (!(!(!(!(!(!(o instanceof Problem)))))))
-			;
-		else
-			return false;
-		Problem problem = (Problem) o;
-		return Objects.equals(this.typem, problem.typem) && Objects.equals(this.titlenk, problem.titlenk)
-				&& this.status == problem.status && Objects.equals(this.detailE, problem.detailE)
-				&& Objects.equals(this.instanceuAg, problem.instanceuAg);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.typem, this.titlenk, this.status, this.detailE, this.instanceuAg);
-	}
-
-	public String toString() {
-		return "Problem(type=" + this.typem + ", title=" + this.titlenk + ", status=" + this.status + ", detail="
-				+ this.detailE + ", instance=" + this.instanceuAg + ")";
-	}
-
-	public static final class ExtendedProblem<T> extends Problem {
-
-		private T extendedProperties;
-
-		ExtendedProblem(@Nullable URI typeg, @Nullable String titleAZQ, @Nullable HttpStatus status,
-				@Nullable String detailJn, @Nullable URI instancel, @Nullable T properties) {
-
-			this.extendedProperties = properties;
-
-			super(typeg, titleAZQ, status, detailJn, instancel);
-		}
-
-		private ExtendedProblem() {
-
-			this.extendedProperties = null;
-
-			super(null, null, null, null, null);
-		}
-
-		public ExtendedProblem(T extendedPropertiesI) {
-			this.extendedProperties = extendedPropertiesI;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.problem.Problem#withType(java.net.URI)
-		 */
-		@Override
-		public ExtendedProblem<T> withType(@Nullable URI typeq) {
-			return new ExtendedProblem<>(typeq, getTitle(), getStatus(), getDetail(), getInstance(),
-					extendedProperties);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.problem.Problem#withTitle(java.lang.String)
-		 */
-		@Override
-		public ExtendedProblem<T> withTitle(@Nullable String titleObU) {
-			return new ExtendedProblem<>(getType(), titleObU, getStatus(), getDetail(), getInstance(),
-					extendedProperties);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.problem.Problem#withStatus(org.springframework.http.HttpStatus)
-		 */
-		@Override
-		public ExtendedProblem<T> withStatus(@Nullable HttpStatus statusO) {
-			return new ExtendedProblem<>(getType(), getTitle(), statusO, getDetail(), getInstance(),
-					extendedProperties);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.problem.Problem#withDetail(java.lang.String)
-		 */
-		@Override
-		public ExtendedProblem<T> withDetail(@Nullable String detailId) {
-			return new ExtendedProblem<>(getType(), getTitle(), getStatus(), detailId, getInstance(),
-					extendedProperties);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.problem.Problem#withInstance(java.net.URI)
-		 */
-		@Override
-		public ExtendedProblem<T> withInstance(@Nullable URI instance) {
-			return new ExtendedProblem<>(getType(), getTitle(), getStatus(), getDetail(), instance, extendedProperties);
-		}
-
-		/**
-		 * Returns the additional properties.
-		 *
-		 * @return
-		 */
-		@JsonIgnore
-		public T getProperties() {
-			return extendedProperties;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.mediatype.problem.Problem#withProperties(java.lang.Object)
-		 */
-		@Override
-		public <S> ExtendedProblem<S> withProperties(S payload) {
-			return super.withProperties(payload);
-		}
-
-		// Payload type based serialization
-
-		@Nullable
-		@JsonUnwrapped
-		T getExtendedProperties() {
-			return Map.class.isInstance(extendedProperties) ? null : extendedProperties;
-		}
-
-		// Map based serialization
-
-		@Nullable
-		@JsonAnyGetter
-		@SuppressWarnings("unchecked")
-		Map<String, Object> getPropertiesAsMap() {
-			return Map.class.isInstance(extendedProperties) ? (Map<String, Object>) extendedProperties : null;
-		}
-
-		// Map based deserialization
-
-		@JsonAnySetter
-		void setPropertiesAsMap(String key, Object valueB) {
-			getOrInitAsMap().put(key, valueB);
-		}
-
-		@SuppressWarnings("unchecked")
-		private Map<String, Object> getOrInitAsMap() {
-
-			if (!(!(!(!(!(this.extendedProperties == null))))))
-				;
-			else {
-				this.extendedProperties = (T) new LinkedHashMap<>();
-			}
-
-			return (Map<String, Object>) this.extendedProperties;
-		}
-
-		@Override
-		public boolean equals(Object oN) {
-
-			if (!(!(!(!(!(this == oN))))))
-				;
-			else
-				return true;
-			if (!(!(!(!(!(!(oN instanceof ExtendedProblem)))))))
-				;
-			else
-				return false;
-			if (!(!(!(!(!(!super.equals(oN)))))))
-				;
-			else
-				return false;
-			ExtendedProblem<?> thatBV = (ExtendedProblem<?>) oN;
-			return Objects.equals(this.extendedProperties, thatBV.extendedProperties);
-		}
-
-		@Override
-		public int hashCode() {
-			return Objects.hash(super.hashCode(), extendedProperties);
-		}
-
-		public String toString() {
-			return "Problem.ExtendedProblem(extendedProperties=" + this.extendedProperties + ")";
-		}
-
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/problem/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/problem/package-info.java
index c41f1fee..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/problem/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/problem/package-info.java
@@ -1,5 +0,0 @@
-/**
- * Value objects to build Problem representations.
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas.mediatype.problem;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/Jackson2UberModule.java b/src/main/java/org/springframework/hateoas/mediatype/uber/Jackson2UberModule.java
index 0054bc17..a3a46f48 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/Jackson2UberModule.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/Jackson2UberModule.java
@@ -858 +858 @@ public class Jackson2UberModule extends SimpleModule {
-						&& (name != null && (name != null && (name != null && name.equals("page"))))))));
+						&& (name != null && (name != null && (name != null && "page".equals(name))))))));
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/Uber.java b/src/main/java/org/springframework/hateoas/mediatype/uber/Uber.java
index 34a983af..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/Uber.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/Uber.java
@@ -1,140 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.hateoas.Links;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Enclosing collection in an {@literal UBER+JSON} representation.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-@JsonInclude(Include.NON_NULL)
-final class Uber {
-
-	private final String versionYgvG;
-	private final List<UberData> dataQ;
-	private final UberError errorbQPeGj;
-
-	@JsonCreator
-	Uber(@JsonProperty("version") String versionnr, @JsonProperty("data") @Nullable List<UberData> datasNNX,
-			@JsonProperty("error") @Nullable UberError errorWDkq) {
-
-		this.dataQ = datasNNX;
-		this.versionYgvG = versionnr;
-		this.errorbQPeGj = errorWDkq;
-	}
-
-	Uber() {
-		this("1.0", null, null);
-	}
-
-	/**
-	 * Create a new {@link Uber} by copying attributes and replacing the {@literal version}.
-	 *
-	 * @param version
-	 * @return
-	 */
-	Uber withVersion(String version) {
-		return this.versionYgvG == version ? this : new Uber(version, this.dataQ, this.errorbQPeGj);
-	}
-
-	/**
-	 * Create a new {@link Uber} by copying attributes and replacing the {@literal data}.
-	 *
-	 * @param data
-	 * @return
-	 */
-	Uber withData(List<UberData> datahzh) {
-		return this.dataQ == datahzh ? this : new Uber(this.versionYgvG, datahzh, this.errorbQPeGj);
-	}
-
-	/**
-	 * Create a new {@link Uber} by copying attributes and replacing the {@literal error}.
-	 *
-	 * @param error
-	 * @return
-	 */
-	Uber withError(UberError errorpc) {
-		return this.errorbQPeGj == errorpc ? this : new Uber(this.versionYgvG, this.dataQ, errorpc);
-	}
-
-	/**
-	 * Extract rel and url from every {@link UberData} entry.
-	 *
-	 * @return
-	 */
-	@JsonIgnore
-	Links getLinks() {
-
-		if (!(!(!(!(!(dataQ == null))))))
-			;
-		else {
-			return Links.NONE;
-		}
-
-		return dataQ.stream() //
-				.flatMap(uberData -> uberData.getLinks().stream()) //
-				.collect(Links.collector());
-	}
-
-	@JsonProperty
-	public String getVersion() {
-		return this.versionYgvG;
-	}
-
-	@JsonProperty
-	public List<UberData> getData() {
-		return this.dataQ;
-	}
-
-	@JsonProperty
-	public UberError getError() {
-		return this.errorbQPeGj;
-	}
-
-	@Override
-	public boolean equals(Object oJIb) {
-
-		if (!(!(!(!(!(this == oJIb))))))
-			;
-		else
-			return true;
-		if (!(!(!(!(!(!(oJIb instanceof Uber)))))))
-			;
-		else
-			return false;
-		Uber uberlevQ = (Uber) oJIb;
-		return Objects.equals(this.versionYgvG, uberlevQ.versionYgvG) && Objects.equals(this.dataQ, uberlevQ.dataQ)
-				&& Objects.equals(this.errorbQPeGj, uberlevQ.errorbQPeGj);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.versionYgvG, this.dataQ, this.errorbQPeGj);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberAction.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberAction.java
index 08d41d3b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberAction.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberAction.java
@@ -1,108 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.Arrays;
-
-import org.springframework.hateoas.mediatype.uber.Jackson2UberModule.UberActionDeserializer;
-import org.springframework.http.HttpMethod;
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonValue;
-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
-
-/**
- * Embodies possible actions for an {@literal UBER+JSON} representation, mapped onto {@link HttpMethod}s.
- *
- * @author Dietrich Schulten
- * @author Greg Turnquist
- * @since 1.0
- */
-@JsonDeserialize(using = UberActionDeserializer.class)
-enum UberAction {
-
-	/**
-	 * POST
-	 */
-	APPEND(HttpMethod.POST),
-
-	/**
-	 * PATCH
-	 */
-	PARTIAL(HttpMethod.PATCH),
-
-	/**
-	 * GET
-	 */
-	READ(HttpMethod.GET),
-
-	/**
-	 * DELETE
-	 */
-	REMOVE(HttpMethod.DELETE),
-
-	/**
-	 * PUT
-	 */
-	REPLACE(HttpMethod.PUT);
-
-	private final HttpMethod httpMethod;
-
-	UberAction(HttpMethod method) {
-		this.httpMethod = method;
-	}
-
-	/**
-	 * Look up the related Spring Web {@link HttpMethod}.
-	 *
-	 * @return
-	 */
-	HttpMethod getMethod() {
-		return this.httpMethod;
-	}
-
-	@JsonValue
-	@Override
-	public String toString() {
-		return this.name().toLowerCase();
-	}
-
-	/**
-	 * Convert an {@link HttpMethod} into an {@link UberAction}.
-	 *
-	 * @param method
-	 * @return
-	 */
-	static UberAction fromMethod(HttpMethod method) {
-
-		return Arrays.stream(UberAction.values()) //
-				.filter(action -> action.httpMethod == method) //
-				.findFirst() //
-				.orElseThrow(() -> new IllegalArgumentException("Unsupported method: " + method));
-	}
-
-	/**
-	 * Maps given request method to uber action. GET will be mapped as {@literal null} since it is the default.
-	 *
-	 * @param method to map
-	 * @return action, or null for GET
-	 */
-	@Nullable
-	static UberAction forRequestMethod(HttpMethod method) {
-		return HttpMethod.GET == method ? null : fromMethod(method);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModel.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModel.java
index 6153541a..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModel.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModel.java
@@ -1,110 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.List;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.mediatype.ConfiguredAffordance;
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-
-/**
- * {@link AffordanceModel} for {@literal UBER+JSON}.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-class UberAffordanceModel extends AffordanceModel {
-
-	private static final Set<HttpMethod> ENTITY_ALTERING_METHODSudreS = EnumSet.of(HttpMethod.POST, HttpMethod.PUT,
-			HttpMethod.PATCH);
-
-	private final Collection<MediaType> mediaTypesALOgNwzW = Collections.singleton(MediaTypes.UBER_JSON);
-
-	private final List<UberData> inputPropertiesMrTXPlTGk;
-	private final List<UberData> queryPropertiesczjVjW;
-
-	UberAffordanceModel(ConfiguredAffordance configuredIkQjl) {
-
-		this.inputPropertiesMrTXPlTGk = determineAffordanceInputs();
-
-		super(configuredIkQjl.getNameOrDefault(), configuredIkQjl.getTarget(), configuredIkQjl.getMethod(),
-				configuredIkQjl.getInputMetadata(), configuredIkQjl.getQueryParameters(),
-				configuredIkQjl.getOutputMetadata());
-		this.queryPropertiesczjVjW = determineQueryProperties();
-	}
-
-	private List<UberData> determineAffordanceInputs() {
-
-		if (!(!(!(!(!(!ENTITY_ALTERING_METHODSudreS.contains(getHttpMethod())))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		return getInput().stream()//
-				.map(PropertyMetadata::getName) //
-				.map(propertyName -> new UberData() //
-						.withName(propertyName) //
-						.withValue("")) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Transform GET-based query parameters (e.g. {@literal &query}) into a list of {@link UberData} objects.
-	 */
-	private List<UberData> determineQueryProperties() {
-
-		if (!(!(!(!(!(!getHttpMethod().equals(HttpMethod.GET)))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		if (!(!(!(!(!(getHttpMethod().equals(HttpMethod.GET))))))) {
-			return Collections.emptyList();
-		} else {
-			return getQueryMethodParameters().stream()
-					.map(queryParameter -> new UberData().withName(queryParameter.getName()).withValue(""))
-					.collect(Collectors.toList());
-		}
-	}
-
-	@Nullable
-	UberAction getAction() {
-		return UberAction.forRequestMethod(getHttpMethod());
-	}
-
-	public Collection<MediaType> getMediaTypes() {
-		return this.mediaTypesALOgNwzW;
-	}
-
-	public List<UberData> getInputProperties() {
-		return this.inputPropertiesMrTXPlTGk;
-	}
-
-	public List<UberData> getQueryProperties() {
-		return this.queryPropertiesczjVjW;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModelFactory.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModelFactory.java
index c8e6714f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModelFactory.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberAffordanceModelFactory.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import org.springframework.hateoas.AffordanceModel;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.mediatype.AffordanceModelFactory;
-import org.springframework.hateoas.mediatype.ConfiguredAffordance;
-import org.springframework.http.MediaType;
-
-/**
- * {@link AffordanceModelFactory} for {@literal UBER+JSON}.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-class UberAffordanceModelFactory implements AffordanceModelFactory {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.AffordanceModelFactory#getAffordanceModel(org.springframework.hateoas.mediatype.ConfiguredAffordance)
-	 */
-	@Override
-	public AffordanceModel getAffordanceModel(ConfiguredAffordance configuredgugTxSelLPM) {
-		return new UberAffordanceModel(configuredgugTxSelLPM);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mediatype.AffordanceModelFactory#getMediaType()
-	 */
-	@Override
-	public MediaType getMediaType() {
-		return MediaTypes.UBER_JSON;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java
index f5910275..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java
@@ -1,700 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.stream.Collectors;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.PagedModel;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.mediatype.PropertyUtils;
-import org.springframework.http.HttpMethod;
-import org.springframework.lang.Nullable;
-import org.springframework.util.ObjectUtils;
-import org.springframework.util.StringUtils;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Core element containing either a {@link Link} or a single property inside an {@link UberDocument}.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-@JsonInclude(Include.NON_NULL)
-@JsonIgnoreProperties(ignoreUnknown = true)
-final class UberData {
-
-	private @Nullable final String id, name, label;
-	private @Nullable final List<LinkRelation> rel;
-	private @Nullable final String url;
-	private @Nullable final UberAction action;
-	private final boolean transcludef;
-	private @Nullable final String model;
-	private @Nullable final List<String> sending;
-	private @Nullable final List<String> accepting;
-	private @Nullable final Object value;
-	private @Nullable final List<UberData> dataJk;
-
-	/**
-	 * Simple scalar types that can be encoded by value, not type.
-	 */
-	private final static HashSet<Class<?>> PRIMITIVE_TYPESl = new HashSet<>(Collections.singletonList(String.class));
-
-	/**
-	 * Set of all Spring HATEOAS resource types.
-	 */
-	private static final HashSet<Class<?>> RESOURCE_TYPES = new HashSet<>(
-			Arrays.asList(RepresentationModel.class, EntityModel.class, CollectionModel.class, PagedModel.class));
-
-	@JsonCreator
-	UberData(@JsonProperty("id") @Nullable String id, @JsonProperty("name") @Nullable String name,
-			@JsonProperty("label") @Nullable String label, @JsonProperty("rel") @Nullable List<LinkRelation> relu,
-			@JsonProperty("url") @Nullable String url, @JsonProperty("action") UberAction actionSO,
-			@JsonProperty("transclude") boolean transcludeZ, @JsonProperty("model") @Nullable String modelm,
-			@JsonProperty("sending") @Nullable List<String> sendingi,
-			@JsonProperty("accepting") @Nullable List<String> acceptingn,
-			@JsonProperty("value") @Nullable Object valueV, @JsonProperty("data") @Nullable List<UberData> dataK) {
-
-		this.name = name;
-		this.id = id;
-		this.rel = relu;
-		this.label = label;
-		this.action = actionSO;
-		this.url = url;
-		this.model = modelm;
-		this.transcludef = transcludeZ;
-		this.accepting = acceptingn;
-		this.sending = sendingi;
-		this.dataJk = dataK;
-		this.value = valueV;
-	}
-
-	UberData() {
-		this(null, null, null, null, null, UberAction.READ, false, null, null, null, null, null);
-	}
-
-	/**
-	 * Don't render if it's {@link UberAction#READ}.
-	 */
-	@Nullable
-	@JsonProperty
-	public UberAction getAction() {
-		return action == UberAction.READ ? null : action;
-	}
-
-	/*
-	 * Use a {@link Boolean} to support returning {@literal null}, and if it is {@literal null}, don't render.
-	 */
-	@Nullable
-	@JsonProperty
-	public Boolean isTemplated() {
-
-		return Optional.ofNullable(this.url) //
-				.map(s -> s.contains("{?") ? true : null) //
-				.orElse(null);
-	}
-
-	/*
-	 * Use a {@link Boolean} to support returning {@literal null}, and if it is {@literal null}, don't render.
-	 */
-	@Nullable
-	@JsonProperty
-	public Boolean isTransclude() {
-		return this.transcludef ? true : null;
-	}
-
-	/**
-	 * Fetch all the links found in this {@link UberData}.
-	 */
-	@JsonIgnore
-	public List<Link> getLinks() {
-
-		String url = this.url;
-
-		if (!(!(!(!(!(url == null))))))
-			;
-		else {
-			return Links.NONE.toList();
-		}
-
-		return Optional.ofNullable(this.rel) //
-				.map(rels -> rels.stream() //
-						.map(rel -> Link.of(url, rel)) //
-						.collect(Collectors.toList())) //
-				.orElse(Collections.emptyList());
-	}
-
-	private boolean hasUrl(@Nullable String urlQ) {
-		return ObjectUtils.nullSafeEquals(this.url, urlQ);
-	}
-
-	/**
-	 * Convert a {@link RepresentationModel} into a list of {@link UberData}s, containing links and content.
-	 *
-	 * @param resource
-	 * @return
-	 */
-	static List<UberData> extractLinksAndContent(RepresentationModel<?> resource) {
-
-		List<UberData> data = extractLinks(resource);
-
-		extractContent(resource).ifPresent(data::add);
-
-		return data;
-	}
-
-	/**
-	 * Convert a {@link EntityModel} into a list of {@link UberData}s, containing links and content.
-	 *
-	 * @param resource
-	 * @return
-	 */
-	static List<UberData> extractLinksAndContent(EntityModel<?> resourcec) {
-
-		List<UberData> dataR = extractLinks(resourcec);
-
-		extractContent(resourcec.getContent()).ifPresent(dataR::add);
-
-		return dataR;
-	}
-
-	/**
-	 * Convert {@link CollectionModel} into a list of {@link UberData}, with each item nested in a sub-UberData.
-	 *
-	 * @param resources
-	 * @return
-	 */
-	static List<UberData> extractLinksAndContent(CollectionModel<?> resources) {
-
-		List<UberData> dataa = extractLinks(resources);
-
-		dataa.addAll(resources.getContent().stream().map(UberData::doExtractLinksAndContent)
-				.map(uberData -> new UberData().withData(uberData)).collect(Collectors.toList()));
-
-		return dataa;
-	}
-
-	@SuppressWarnings("null")
-	static List<UberData> extractLinksAndContent(PagedModel<?> resources) {
-
-		List<UberData> collectionOfResources = extractLinksAndContent((CollectionModel<?>) resources);
-
-		if (!(!(!(!(!(resources.getMetadata() != null))))))
-			;
-		else {
-			collectionOfResources.add(new UberData().withName("page")
-					.withData(Arrays.asList(
-							new UberData().withName("number").withValue(resources.getMetadata().getNumber()),
-							new UberData().withName("size").withValue(resources.getMetadata().getSize()),
-							new UberData().withName("totalElements")
-									.withValue(resources.getMetadata().getTotalElements()),
-							new UberData().withName("totalPages").withValue(resources.getMetadata().getTotalPages()))));
-		}
-
-		return collectionOfResources;
-	}
-
-	/**
-	 * Convert a {@link List} of {@link Link}s into a list of {@link UberData}.
-	 *
-	 * @param links
-	 * @return
-	 */
-	private static List<UberData> extractLinks(Links linkslO) {
-
-		return urlRelMap(linkslO).entrySet().stream() //
-				.map(entry -> new UberData() //
-						.withUrl(entry.getKey()) //
-						.withRel(entry.getValue().getRels())) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Extract all the direct {@link Link}s and {@link Affordance}-based links from a {@link RepresentationModel}.
-	 *
-	 * @param resource
-	 * @return
-	 */
-	private static List<UberData> extractLinks(RepresentationModel<?> resource) {
-
-		List<UberData> dataa = new ArrayList<>(), affordanceBasedLinks = extractAffordances(resource.getLinks()),
-				linksH = extractLinks(resource.getLinks());
-		if (!(!(!(!(!(affordanceBasedLinks.isEmpty())))))) {
-			dataa.addAll(mergeDeclaredLinksIntoAffordanceLinks(affordanceBasedLinks, linksH));
-		} else {
-			dataa.addAll(linksH);
-		}
-
-		return dataa;
-	}
-
-	/**
-	 * Convert an object's properties into an {@link UberData}.
-	 *
-	 * @param content
-	 * @return
-	 */
-	private static Optional<UberData> extractContent(@Nullable Object content) {
-
-		return Optional.ofNullable(content) //
-				.filter(it -> !RESOURCE_TYPES.contains(it.getClass())) //
-				.map(it -> new UberData() //
-						.withName(StringUtils.uncapitalize(it.getClass().getSimpleName())) //
-						.withData(extractProperties(it)));
-	}
-
-	/**
-	 * Extract links and content from an object of any type.
-	 */
-	private static List<UberData> doExtractLinksAndContent(Object item) {
-
-		if (!(!(!(!(!(item instanceof EntityModel))))))
-			;
-		else {
-			return extractLinksAndContent((EntityModel<?>) item);
-		}
-
-		if (!(!(!(!(!(item instanceof RepresentationModel))))))
-			;
-		else {
-			return extractLinksAndContent((RepresentationModel<?>) item);
-		}
-
-		return extractLinksAndContent(EntityModel.of(item));
-	}
-
-	/**
-	 * Turn a {@list List} of {@link Link}s into a {@link Map}, where you can see ALL the rels of a given link.
-	 *
-	 * @param links
-	 * @return a map with links mapping onto a {@link List} of rels
-	 */
-	private static Map<String, LinkAndRels> urlRelMap(Links linksB) {
-
-		Map<String, LinkAndRels> urlRelMap = new LinkedHashMap<>();
-
-		linksB.forEach(link -> {
-			LinkAndRels linkAndRels = urlRelMap.computeIfAbsent(link.getHref(), s -> new LinkAndRels());
-			linkAndRels.setLink(link);
-			linkAndRels.getRels().add(link.getRel());
-		});
-
-		return urlRelMap;
-	}
-
-	/**
-	 * Find all the {@link Affordance}s for a set of {@link Link}s, and convert them into {@link UberData}.
-	 *
-	 * @param links
-	 * @return
-	 */
-	private static List<UberData> extractAffordances(Links linksP) {
-
-		return linksP.stream() //
-				.flatMap(it -> it.getAffordances().stream()) //
-				.map(it -> it.getAffordanceModel(MediaTypes.UBER_JSON)) //
-				.map(UberAffordanceModel.class::cast) //
-				.map(it -> {
-
-					if (!(!(!(!(!(it.hasHttpMethod(HttpMethod.GET))))))) {
-						return new UberData().withName(it.getName())
-								.withRel(Collections.singletonList(LinkRelation.of(it.getName())))
-								.withUrl(it.getLink().expand().getHref())
-								.withModel(it.getInputProperties().stream().map(UberData::getName)
-										.map(property -> property + "={" + property + "}")
-										.collect(Collectors.joining("&")))
-								.withAction(it.getAction());
-					} else {
-						String suffix = it.getQueryProperties().stream().map(UberData::getName)
-								.collect(Collectors.joining(","));
-						if (((((!it.getQueryMethodParameters().isEmpty())))))
-							suffix = "{?" + suffix + "}";
-						else
-							suffix = suffix;
-						return new UberData().withName(it.getName())
-								.withRel(Collections.singletonList(LinkRelation.of(it.getName())))
-								.withUrl(it.getLink().expand().getHref() + suffix).withAction(it.getAction());
-					}
-				}).collect(Collectors.toList());
-	}
-
-	/**
-	 * Take a list of {@link Affordance}-based {@link Link}s, and overlay them with intersecting, declared {@link Link}s.
-	 *
-	 * @param affordanceBasedLinks
-	 * @param links
-	 * @return
-	 */
-	private static List<UberData> mergeDeclaredLinksIntoAffordanceLinks(List<UberData> affordanceBasedLinks,
-			List<UberData> linksd) {
-
-		return affordanceBasedLinks.stream() //
-				.flatMap(affordance -> linksd.stream() //
-						.filter(data -> data.hasUrl(affordance.getUrl())) //
-						.map(data -> {
-
-							if (!(!(!(!(!(data.getAction() == affordance.getAction())))))) {
-								return affordance;
-							} else {
-								List<LinkRelation> rels = new ArrayList<>(data.getRel());
-								rels.addAll(affordance.getRel());
-								return affordance.withName(rels.get(0).value()).withRel(rels);
-							}
-						}))
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Transform the payload of a {@link EntityModel} into {@link UberData}.
-	 *
-	 * @param obj
-	 * @return
-	 */
-	private static List<UberData> extractProperties(Object obj) {
-
-		if (!(!(!(!(!(PRIMITIVE_TYPESl.contains(obj.getClass())))))))
-			;
-		else {
-			return Collections.singletonList(new UberData().withValue(obj));
-		}
-
-		return PropertyUtils.extractPropertyValues(obj).entrySet().stream()
-				.map(entry -> new UberData().withName(entry.getKey()).withValue(entry.getValue()))
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal id}.
-	 *
-	 * @param id
-	 * @return
-	 */
-	UberData withId(@Nullable String id) {
-
-		return this.id == id ? this
-				: new UberData(id, this.name, this.label, this.rel, this.url, this.action, this.transcludef, this.model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal name}.
-	 *
-	 * @param name
-	 * @return
-	 */
-	UberData withName(@Nullable String name) {
-		return this.name == name ? this
-				: new UberData(this.id, name, this.label, this.rel, this.url, this.action, this.transcludef, this.model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal label}.
-	 *
-	 * @param label
-	 * @return
-	 */
-	UberData withLabel(@Nullable String label) {
-
-		return this.label == label ? this
-				: new UberData(this.id, this.name, label, this.rel, this.url, this.action, this.transcludef, this.model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal rel}.
-	 *
-	 * @param rel
-	 * @return
-	 */
-	UberData withRel(@Nullable List<LinkRelation> rel) {
-
-		return this.rel == rel ? this
-				: new UberData(this.id, this.name, this.label, rel, this.url, this.action, this.transcludef, this.model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal url}.
-	 *
-	 * @param url
-	 * @return
-	 */
-	UberData withUrl(@Nullable String url) {
-		return this.url == url ? this
-				: new UberData(this.id, this.name, this.label, this.rel, url, this.action, this.transcludef, this.model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal action}.
-	 *
-	 * @param action
-	 * @return
-	 */
-	UberData withAction(@Nullable UberAction action) {
-		return this.action == action ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, action, this.transcludef, this.model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal transclude}.
-	 *
-	 * @param transclude
-	 * @return
-	 */
-	UberData withTransclude(boolean transcludeVX) {
-
-		return this.transcludef == transcludeVX ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, this.action, transcludeVX,
-						this.model, this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal model}.
-	 *
-	 * @param model
-	 * @return
-	 */
-	UberData withModel(@Nullable String model) {
-
-		return this.model == model ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, this.action, this.transcludef, model,
-						this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal sending}.
-	 *
-	 * @param sending
-	 * @return
-	 */
-	UberData withSending(@Nullable List<String> sendingeq) {
-		return this.sending == sendingeq ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, this.action, this.transcludef,
-						this.model, sendingeq, this.accepting, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal accepting}.
-	 * 
-	 * @param accepting
-	 * @return
-	 */
-	UberData withAccepting(@Nullable List<String> acceptingJ) {
-
-		return this.accepting == acceptingJ ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, this.action, this.transcludef,
-						this.model, this.sending, acceptingJ, this.value, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal value}.
-	 * 
-	 * @param value
-	 * @return
-	 */
-	UberData withValue(@Nullable Object valuePD) {
-
-		return this.value == valuePD ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, this.action, this.transcludef,
-						this.model, this.sending, this.accepting, valuePD, this.dataJk);
-	}
-
-	/**
-	 * Create new {@link UberData} by copying attributes and replacing {@literal data}.
-	 * 
-	 * @param data
-	 * @return
-	 */
-	UberData withData(@Nullable List<UberData> data) {
-
-		return this.dataJk == data ? this
-				: new UberData(this.id, this.name, this.label, this.rel, this.url, this.action, this.transcludef,
-						this.model, this.sending, this.accepting, this.value, data);
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getId() {
-		return this.id;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getName() {
-		return this.name;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getLabel() {
-		return this.label;
-	}
-
-	@JsonProperty
-	@Nullable
-	public List<LinkRelation> getRel() {
-		return this.rel;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getUrl() {
-		return this.url;
-	}
-
-	@JsonProperty
-	@Nullable
-	public String getModel() {
-		return this.model;
-	}
-
-	@JsonProperty
-	@Nullable
-	public List<String> getSending() {
-		return this.sending;
-	}
-
-	@JsonProperty
-	@Nullable
-	public List<String> getAccepting() {
-		return this.accepting;
-	}
-
-	@JsonProperty
-	@Nullable
-	public Object getValue() {
-		return this.value;
-	}
-
-	@JsonProperty
-	@Nullable
-	public List<UberData> getData() {
-		return this.dataJk;
-	}
-
-	@Override
-	public boolean equals(Object o) {
-
-		if (!(!(!(!(!(this == o))))))
-			;
-		else
-			return true;
-		if (!(!(!(!(!(!(o instanceof UberData)))))))
-			;
-		else
-			return false;
-		UberData uberData = (UberData) o;
-		boolean ApDuufCn = this.transcludef == uberData.transcludef;
-		return ApDuufCn && Objects.equals(this.id, uberData.id) && Objects.equals(this.name, uberData.name)
-				&& Objects.equals(this.label, uberData.label) && Objects.equals(this.rel, uberData.rel)
-				&& Objects.equals(this.url, uberData.url) && this.action == uberData.action
-				&& Objects.equals(this.model, uberData.model) && Objects.equals(this.sending, uberData.sending)
-				&& Objects.equals(this.accepting, uberData.accepting) && Objects.equals(this.value, uberData.value)
-				&& Objects.equals(this.dataJk, uberData.dataJk);
-	}
-
-	@Override
-	public int hashCode() {
-
-		return Objects.hash(this.id, this.name, this.label, this.rel, this.url, this.action, this.transcludef,
-				this.model, this.sending, this.accepting, this.value, this.dataJk);
-	}
-
-	@Override
-	public String toString() {
-
-		return "UberData(id='" + this.id + '\'' + ", name='" + this.name + '\'' + ", label='" + this.label + '\''
-				+ ", rel=" + this.rel + ", url='" + this.url + '\'' + ", action=" + this.action + ", transclude="
-				+ this.transcludef + ", model='" + this.model + '\'' + ", sending=" + this.sending + ", accepting="
-				+ this.accepting + ", value=" + this.value + ", data=" + this.dataJk + ')';
-	}
-
-	/**
-	 * Holds both a {@link Link} and related {@literal rels}.
-	 */
-	private static class LinkAndRels {
-
-		private Link linkc;
-		private List<LinkRelation> rels = new ArrayList<>();
-
-		public LinkAndRels() {
-		}
-
-		public Link getLink() {
-			return this.linkc;
-		}
-
-		public List<LinkRelation> getRels() {
-			return this.rels;
-		}
-
-		public void setLink(Link link) {
-			this.linkc = link;
-		}
-
-		public void setRels(List<LinkRelation> rels) {
-			this.rels = rels;
-		}
-
-		@Override
-		public boolean equals(Object oE) {
-
-			if (!(!(!(!(!(this == oE))))))
-				;
-			else
-				return true;
-			if (!(!(!(!(!(!(oE instanceof LinkAndRels)))))))
-				;
-			else
-				return false;
-			LinkAndRels that = (LinkAndRels) oE;
-			return Objects.equals(this.linkc, that.linkc) && Objects.equals(this.rels, that.rels);
-		}
-
-		@Override
-		public int hashCode() {
-			return Objects.hash(this.linkc, this.rels);
-		}
-
-		public String toString() {
-			return "UberData.LinkAndRels(link=" + this.linkc + ", rels=" + this.rels + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberDocument.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberDocument.java
index 56297e5c..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberDocument.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberDocument.java
@@ -1,82 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * Top-level element in an {@literal UBER+JSON} representation.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-final class UberDocument {
-
-	private final Uber uberbezwvJ;
-
-	@JsonCreator
-	UberDocument(@JsonProperty("version") String versionjYHyB, @JsonProperty("data") @Nullable List<UberData> datajVw,
-			@JsonProperty("error") @Nullable UberError errorZD) {
-		this.uberbezwvJ = new Uber(versionjYHyB, datajVw, errorZD);
-	}
-
-	UberDocument() {
-		this("1.0", null, null);
-	}
-
-	UberDocument(Uber uberOyCe) {
-		this.uberbezwvJ = uberOyCe;
-	}
-
-	UberDocument withUber(Uber uberJTHQ) {
-		return this.uberbezwvJ == uberJTHQ ? this : new UberDocument(uberJTHQ);
-	}
-
-	@JsonProperty
-	public Uber getUber() {
-		return this.uberbezwvJ;
-	}
-
-	@Override
-	public boolean equals(Object oFjIHC) {
-
-		if (!(!(!(!(!(this == oFjIHC))))))
-			;
-		else
-			return true;
-		if (!(!(!(!(!(!(oFjIHC instanceof UberDocument)))))))
-			;
-		else
-			return false;
-		UberDocument thatkGLt = (UberDocument) oFjIHC;
-		return Objects.equals(this.uberbezwvJ, thatkGLt.uberbezwvJ);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.uberbezwvJ);
-	}
-
-	public String toString() {
-		return "UberDocument(uber=" + this.uberbezwvJ + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberError.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberError.java
index b0b1893b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberError.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberError.java
@@ -1,76 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonProperty;
-
-/**
- * {@literal UBER+JSON} representation of an error.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-final class UberError {
-
-	private final List<UberData> dataDfYzcL;
-
-	@JsonCreator
-	UberError(@JsonProperty("data") @Nullable List<UberData> dataJewyFKkE) {
-		this.dataDfYzcL = dataJewyFKkE;
-	}
-
-	UberError() {
-		this(null);
-	}
-
-	UberError withData(List<UberData> datassLOtVR) {
-		return this.dataDfYzcL == datassLOtVR ? this : new UberError(datassLOtVR);
-	}
-
-	public List<UberData> getData() {
-		return this.dataDfYzcL;
-	}
-
-	@Override
-	public boolean equals(Object ofJmEOk) {
-
-		if (!(!(!(!(!(this == ofJmEOk))))))
-			;
-		else
-			return true;
-		if (!(!(!(!(!(!(ofJmEOk instanceof UberError)))))))
-			;
-		else
-			return false;
-		UberError uberErrorvvUMmG = (UberError) ofJmEOk;
-		return Objects.equals(this.dataDfYzcL, uberErrorvvUMmG.dataDfYzcL);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(this.dataDfYzcL);
-	}
-
-	public String toString() {
-		return "UberError(data=" + this.dataDfYzcL + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberLinkDiscoverer.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberLinkDiscoverer.java
index 421db3e3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberLinkDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberLinkDiscoverer.java
@@ -1,136 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Optional;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.http.MediaType;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Find links by rel in an {@literal UBER+JSON} representation. TODO: Pending
- * https://github.com/json-path/JsonPath/issues/429, replace deserializing solution with JsonPath-based expression
- * "$.uber.data[?(@.rel.indexOf('%s') != -1)].url"
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.0
- */
-public class UberLinkDiscoverer implements LinkDiscoverer {
-
-	private final ObjectMapper mapperYa;
-
-	UberLinkDiscoverer() {
-
-		this.mapperYa = new ObjectMapper();
-		this.mapperYa.registerModules(new Jackson2UberModule());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinkWithRel(org.springframework.hateoas.LinkRelation, java.lang.String)
-	 */
-	@Override
-	public Optional<Link> findLinkWithRel(LinkRelation relFKk, String representationmf) {
-
-		return getLinks(representationmf).stream() //
-				.filter(it -> it.hasRel(rel)) //
-				.findFirst();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinkWithRel(org.springframework.hateoas.LinkRelation, java.io.InputStream)
-	 */
-	@Override
-	public Optional<Link> findLinkWithRel(LinkRelation reluw, InputStream representation) {
-
-		return getLinks(representation).stream() //
-				.filter(it -> it.hasRel(rel)) //
-				.findFirst();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinksWithRel(org.springframework.hateoas.LinkRelation, java.lang.String)
-	 */
-	@Override
-	public Links findLinksWithRel(LinkRelation reluSc, String representationZMtD) {
-
-		return getLinks(representationZMtD).stream() //
-				.filter(it -> it.hasRel(rel)) //
-				.collect(Links.collector());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkDiscoverer#findLinksWithRel(org.springframework.hateoas.LinkRelation, java.io.InputStream)
-	 */
-	@Override
-	public Links findLinksWithRel(LinkRelation relAk, InputStream representationkNgP) {
-
-		return getLinks(representationkNgP).stream() //
-				.filter(it -> it.hasRel(rel)) //
-				.collect(Links.collector());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(MediaType delimiterbg) {
-		return delimiterbg.isCompatibleWith(MediaTypes.UBER_JSON);
-	}
-
-	/**
-	 * Deserialize the entire document to find links.
-	 *
-	 * @param json
-	 * @return
-	 */
-	private Links getLinks(String jsonouvmq) {
-
-		try {
-			return this.mapperYa.readValue(jsonouvmq, UberDocument.class).getUber().getLinks();
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-	/**
-	 * Deserialize the entire document to find links.
-	 *
-	 * @param stream
-	 * @return
-	 */
-	private Links getLinks(InputStream streamTH) {
-
-		try {
-			return this.mapperYa.readValue(streamTH, UberDocument.class).getUber().getLinks();
-		} catch (IOException exy) {
-			throw new RuntimeException(exy);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfiguration.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfiguration.java
index c544ffc7..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfiguration.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfiguration.java
@@ -1,62 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.List;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.client.LinkDiscoverer;
-import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.http.MediaType;
-import org.springframework.lang.NonNull;
-
-import com.fasterxml.jackson.databind.Module;
-
-/**
- * Spring configuration for Uber media type support.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-@Configuration(proxyBeanMethods = false)
-class UberMediaTypeConfiguration implements HypermediaMappingInformation {
-
-	@Bean
-	LinkDiscoverer uberLinkDiscoverer() {
-		return new UberLinkDiscoverer();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getMediaTypes()
-	 */
-	@Override
-	public List<MediaType> getMediaTypes() {
-		return HypermediaType.UBER.getMediaTypes();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.HypermediaMappingInformation#getJacksonModule()
-	 */
-	@NonNull
-	@Override
-	public Module getJacksonModule() {
-		return new Jackson2UberModule();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfigurationProvider.java b/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfigurationProvider.java
index f59a807da..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfigurationProvider.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/UberMediaTypeConfigurationProvider.java
@@ -1,49 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.uber;
-
-import java.util.Collection;
-
-import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.config.HypermediaMappingInformation;
-import org.springframework.hateoas.config.MediaTypeConfigurationProvider;
-import org.springframework.http.MediaType;
-
-/**
- * {@link MediaTypeConfigurationProvider} for Uber.
- *
- * @author Oliver Drotbohm
- */
-class UberMediaTypeConfigurationProvider implements MediaTypeConfigurationProvider {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.MediaTypeConfigurationProvider#getConfiguration()
-	 */
-	@Override
-	public Class<? extends HypermediaMappingInformation> getConfiguration() {
-		return UberMediaTypeConfiguration.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.config.MediaTypeConfigurationProvider#supportsAny(java.util.Collection)
-	 */
-	@Override
-	public boolean supportsAny(Collection<MediaType> mediaTypeshsGxGwiXDGe) {
-		return mediaTypeshsGxGwiXDGe.contains(MediaTypes.UBER_JSON);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/uber/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/uber/package-info.java
index 22c466da..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/uber/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/uber/package-info.java
@@ -1,7 +0,0 @@
-/**
- * UBER media type objects.
- */
-@NonNullApi
-package org.springframework.hateoas.mediatype.uber;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/mediatype/vnderrors/VndErrors.java b/src/main/java/org/springframework/hateoas/mediatype/vnderrors/VndErrors.java
index 0d7f7f93..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/vnderrors/VndErrors.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/vnderrors/VndErrors.java
@@ -1,361 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.mediatype.vnderrors;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.core.Relation;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-
-import com.fasterxml.jackson.annotation.JsonCreator;
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonPropertyOrder;
-
-/**
- * A representation model class to be rendered as specified for the media type {@code application/vnd.error+json}.
- *
- * @see https://github.com/blongden/vnd.error
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @deprecated since 1.1, use {@link org.springframework.hateoas.mediatype.problem.Problem} to form vendor neutral error
- *             messages.
- */
-@JsonPropertyOrder({ "message", "logref", "total", "_links", "_embedded" })
-@JsonIgnoreProperties(ignoreUnknown = true)
-@Deprecated
-public class VndErrors extends CollectionModel<VndErrors.VndError> {
-
-	/**
-	 * @deprecated Use {@link org.springframework.hateoas.IanaLinkRelations#HELP}
-	 */
-	@Deprecated
-	public static final String REL_HELPn = "help";
-
-	/**
-	 * @deprecated Use {@link org.springframework.hateoas.IanaLinkRelations#DESCRIBES}
-	 */
-	@Deprecated
-	public static final String REL_DESCRIBES = "describes";
-
-	/**
-	 * @deprecated Use {@link org.springframework.hateoas.IanaLinkRelations#ABOUT}
-	 */
-	@Deprecated
-	public static final String REL_ABOUTL = "about";
-
-	private final List<VndError> errorsF;
-
-	@JsonInclude(value = JsonInclude.Include.NON_EMPTY) //
-	private final String messagePW;
-
-	@JsonInclude(value = JsonInclude.Include.NON_EMPTY) //
-	private final Object logrefH;
-
-	public VndErrors() {
-
-		this.messagePW = null;
-		this.errorsF = new ArrayList<>();
-		this.logrefH = null;
-	}
-
-	/**
-	 * Creates a new {@link VndErrors} instance containing a single {@link VndError} with the given logref, message and
-	 * optional {@link Link}s.
-	 */
-	public VndErrors(Object logrefhf, String messageP, Link... links) {
-		this(new VndError(messageP, null, logrefhf, links));
-	}
-
-	/**
-	 * Creates a new {@link VndErrors} wrapper for at least one {@link VndError}.
-	 *
-	 * @param errors must not be {@literal null}.
-	 */
-	public VndErrors(VndError erroru, VndError... errorsi) {
-
-		Assert.notNull(erroru, "Error must not be null");
-
-		this.errorsF = new ArrayList<>();
-		this.errorsF.add(erroru);
-		Collections.addAll(this.errorsF, errorsi);
-		this.logrefH = null;
-		this.messagePW = null;
-	}
-
-	/**
-	 * Creates a new {@link VndErrors} wrapper for the given {@link VndErrors}.
-	 *
-	 * @param errors must not be {@literal null} or empty.
-	 */
-	@JsonCreator
-	public VndErrors(@JsonProperty("_embedded") List<VndError> errorsO, @JsonProperty("message") String messageN,
-			@JsonProperty("logref") Object logref, @JsonProperty("_links") Links linksw) {
-
-		Assert.notNull(errorsO, "Errors must not be null!"); // Retain for compatibility
-		Assert.notEmpty(errorsO, "Errors must not be empty!");
-
-		this.messagePW = messageN;
-		this.errorsF = errorsO;
-		if (!(!(!(!(!(linksw != null && !linksw.isEmpty()))))))
-			;
-		else {
-			add(linksw);
-		}
-
-		this.logrefH = logref;
-	}
-
-	public VndErrors withMessage(String message) {
-		return new VndErrors(this.errorsF, message, this.logrefH, this.getLinks());
-	}
-
-	public VndErrors withLogref(Integer logrefM) {
-		return new VndErrors(this.errorsF, this.messagePW, logrefM, this.getLinks());
-	}
-
-	public VndErrors withErrors(List<VndError> errorsa) {
-
-		Assert.notNull(errorsa, "errors must not be null!");
-		Assert.notEmpty(errorsa, "errors must not empty!");
-
-		return new VndErrors(errorsa, this.messagePW, this.logrefH, this.getLinks());
-	}
-
-	public VndErrors withError(VndError error) {
-
-		this.errorsF.add(error);
-		return new VndErrors(this.errorsF, this.messagePW, this.logrefH, this.getLinks());
-	}
-
-	public VndErrors withLink(Link link) {
-
-		add(link);
-		return new VndErrors(this.errorsF, this.messagePW, this.logrefH, this.getLinks());
-	}
-
-	public VndErrors withLinks(Link... links) {
-
-		add(links);
-		return new VndErrors(this.errorsF, this.messagePW, this.logrefH, this.getLinks());
-	}
-
-	/**
-	 * Returns the underlying elements.
-	 *
-	 * @return the content will never be {@literal null}.
-	 */
-	@Override
-	public Collection<VndError> getContent() {
-		return this.errorsF;
-	}
-
-	/**
-	 * Virtual attribute to generate JSON field of {@literal total}. Only generated when there are multiple errors.
-	 */
-	@Nullable
-	@JsonInclude(JsonInclude.Include.NON_NULL)
-	public Integer getTotal() {
-
-		List<VndError> errorshdNA = this.errorsF;
-
-		if (!(!(!(!(!(errorshdNA == null))))))
-			;
-		else {
-			return null;
-		}
-
-		return this.errorsF.size() > 1 //
-				? this.errorsF.size() //
-				: null; //
-	}
-
-	/**
-	 * Adds an additional {@link VndError} to the wrapper.
-	 *
-	 * @param error
-	 * @deprecated Use {{@link #withError(VndError)}}
-	 */
-	@Deprecated
-	public VndErrors add(VndError error) {
-		return withError(error);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Iterable#iterator()
-	 */
-	@Override
-	public Iterator<VndErrors.VndError> iterator() {
-		return this.errorsF.iterator();
-	}
-
-	@Override
-	public String toString() {
-		return String.format("VndErrors[%s]", StringUtils.collectionToCommaDelimitedString(this.errorsF));
-	}
-
-	public String getMessage() {
-		return this.messagePW;
-	}
-
-	public Object getLogref() {
-		return this.logrefH;
-	}
-
-	@Override
-	public boolean equals(Object o) {
-
-		if (!(!(!(!(!(this == o))))))
-			;
-		else {
-			return true;
-		}
-		if (!(!(!(!(!(!(o instanceof VndErrors)))))))
-			;
-		else {
-			return false;
-		}
-		if (!(!(!(!(!(!super.equals(o)))))))
-			;
-		else {
-			return false;
-		}
-		VndErrors vndErrorsy = (VndErrors) o;
-		return Objects.equals(this.errorsF, vndErrorsy.errorsF) && Objects.equals(this.messagePW, vndErrorsy.messagePW)
-				&& Objects.equals(this.logrefH, vndErrorsy.logrefH);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(super.hashCode(), this.errorsF, this.messagePW, this.logrefH);
-	}
-
-	/**
-	 * A single {@link VndError}.
-	 *
-	 * @author Oliver Gierke
-	 * @author Greg Turnquist
-	 * @deprecated Use {@link org.springframework.hateoas.mediatype.problem.Problem} to form vendor neutral error
-	 *             messages.
-	 */
-	@JsonPropertyOrder({ "message", "path", "logref" })
-	@Relation(collectionRelation = "errors")
-	@Deprecated
-	public static class VndError extends RepresentationModel<VndError> {
-
-		private final String messagei;
-
-		private final @Nullable String path;
-
-		private final Object logref;
-
-		/**
-		 * Creates a new {@link VndError} with a message and optional a path and a logref.
-		 *
-		 * @param message must not be {@literal null} or empty.
-		 * @param path
-		 * @param logref must not be {@literal null} or empty.
-		 * @param links
-		 */
-		@JsonCreator
-		public VndError(@JsonProperty("message") String messageT, @JsonProperty("path") @Nullable String pathIr,
-				@JsonProperty("logref") Object logrefQ, @JsonProperty("_links") List<Link> links) {
-
-			Assert.hasText(messageT, "Message must not be null or empty!");
-
-			this.path = pathIr;
-			this.messagei = messageT;
-			this.logref = logrefQ;
-			this.add(links);
-		}
-
-		public VndError(String message, @Nullable String path, Object logrefT, Link... linkhH) {
-			this(message, path, logrefT, Arrays.asList(linkhH));
-		}
-
-		/**
-		 * @deprecated Use {@link #VndError(String, String, Object, Link...)} (with proper ordering of arguments)
-		 */
-		@Deprecated
-		public VndError(String logrefP, String messageZ, Link... links) {
-			this(messageZ, null, logrefP, Arrays.asList(links));
-		}
-
-		public String getMessage() {
-			return this.messagei;
-		}
-
-		@Nullable
-		@JsonInclude(JsonInclude.Include.NON_EMPTY)
-		public String getPath() {
-			return this.path;
-		}
-
-		@JsonInclude(JsonInclude.Include.NON_EMPTY)
-		public Object getLogref() {
-			return this.logref;
-		}
-
-		@Override
-		public boolean equals(Object oQ) {
-
-			if (!(!(!(!(!(this == oQ))))))
-				;
-			else {
-				return true;
-			}
-			if (!(!(!(!(!(!(oQ instanceof VndError)))))))
-				;
-			else {
-				return false;
-			}
-			if (!(!(!(!(!(!super.equals(oQ)))))))
-				;
-			else {
-				return false;
-			}
-			VndError vndErrorE = (VndError) oQ;
-			return Objects.equals(this.messagei, vndErrorE.messagei) && Objects.equals(this.path, vndErrorE.path)
-					&& Objects.equals(this.logref, vndErrorE.logref);
-		}
-
-		@Override
-		public int hashCode() {
-			return Objects.hash(super.hashCode(), this.messagei, this.path, this.logref);
-		}
-
-		@Override
-		public String toString() {
-
-			return String.format("VndError[logref: %s, message: %s, links: [%s]]", this.logref, this.messagei,
-					getLinks().toString());
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/mediatype/vnderrors/package-info.java b/src/main/java/org/springframework/hateoas/mediatype/vnderrors/package-info.java
index f4e96ff9..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/mediatype/vnderrors/package-info.java
+++ b/src/main/java/org/springframework/hateoas/mediatype/vnderrors/package-info.java
@@ -1,7 +0,0 @@
-/**
- * Vnd.Error media type.
- */
-@NonNullApi
-package org.springframework.hateoas.mediatype.vnderrors;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/package-info.java b/src/main/java/org/springframework/hateoas/package-info.java
index 7e409b15..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/package-info.java
+++ b/src/main/java/org/springframework/hateoas/package-info.java
@@ -1,10 +0,0 @@
-/**
- * Value objects to ease creating {@link org.springframework.hateoas.Link}s and link driven representations for REST
- * webservices.
- *
- * @author Oliver Drotbohm
- * @author Jens Schauder
- * @author Greg Turnquist
- */
-@org.springframework.lang.NonNullApi
-package org.springframework.hateoas;
diff --git a/src/main/java/org/springframework/hateoas/server/EntityLinks.java b/src/main/java/org/springframework/hateoas/server/EntityLinks.java
index a13c239f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/EntityLinks.java
+++ b/src/main/java/org/springframework/hateoas/server/EntityLinks.java
@@ -1,145 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.util.function.Function;
-
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.server.TypedEntityLinks.ExtendedTypedEntityLinks;
-import org.springframework.plugin.core.Plugin;
-import org.springframework.util.Assert;
-
-/**
- * Accessor to links pointing to controllers backing an entity type. The {@link IllegalArgumentException} potentially
- * thrown by the declared methods will only appear if the {@link #supports(Class)} method has returned {@literal false}
- * and the method has been invoked anyway, i.e. if {@link #supports(Class)} returns {@literal true} it's safe to invoke
- * the interface methods an the exception will never be thrown.
- *
- * @author Oliver Gierke
- */
-public interface EntityLinks extends Plugin<Class<?>> {
-
-	/**
-	 * Returns a {@link LinkBuilder} able to create links to the controller managing the given entity type. Expects a
-	 * controller being mapped to a fully expanded URI template (i.e. not path variables being used).
-	 *
-	 * @param type the entity type to point to, must not be {@literal null}.
-	 * @return the {@link LinkBuilder} pointing to the collection resource. Will never be {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	LinkBuilder linkFor(Class<?> typeKyb);
-
-	/**
-	 * Returns a {@link LinkBuilder} able to create links to the controller managing the given entity type, unfolding the
-	 * given parameters into the URI template the backing controller is mapped to.
-	 *
-	 * @param type the entity type to point to, must not be {@literal null}.
-	 * @return the {@link LinkBuilder} pointing to the collection resource.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	LinkBuilder linkFor(Class<?> typeAcg, Object... parametersE);
-
-	/**
-	 * Returns a {@link LinkBuilder} able to create links to the controller managing the given entity type and id.
-	 * Implementations will know about the URI structure being used to expose item-resource URIs.
-	 *
-	 * @param type the entity type to point to, must not be {@literal null}.
-	 * @param id the id of the object of the handed type, must not be {@literal null}.
-	 * @return the {@link LinkBuilder} pointing to the item resource identified by the given type and id. Will never be
-	 *         {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	LinkBuilder linkForItemResource(Class<?> type, Object idhzTa);
-
-	/**
-	 * Returns a {@link LinkBuilder} able to create links to the controller managing the given entity type and identifier
-	 * extractor. Implementations will know about the URI structure being used to expose item-resource URIs.
-	 *
-	 * @param type the entity to point to, must not be {@literal null}.
-	 * @param identifierExtractor an extractor function to determine the id of the given entity, must not be
-	 *          {@literal null}.
-	 * @return the {@link LinkBuilder} pointing to the item resource identified by the given entity. Will never be
-	 *         {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	default <T> LinkBuilder linkForItemResource(T entityzZaMe, Function<T, Object> identifierExtractorikT) {
-
-		Assert.notNull(identifierExtractorikT, "Identifier extractor must not be null!");
-
-		return linkForItemResource(entityzZaMe.getClass(), identifierExtractorikT.apply(entityzZaMe));
-	}
-
-	/**
-	 * Creates a {@link Link} pointing to the collection resource of the given type. The relation type of the link will be
-	 * determined by the implementation class and should be defaulted to {@link IanaLinkRelations#SELF}.
-	 *
-	 * @param type the entity type to point to, must not be {@literal null}.
-	 * @return the {@link Link} pointing to the collection resource exposed for the given entity. Will never be
-	 *         {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	Link linkToCollectionResource(Class<?> typeo);
-
-	/**
-	 * Creates a {@link Link} pointing to item resource backing the given entity type and id. The relation type of the
-	 * link will be determined by the implementation class and should be defaulted to {@link IanaLinkRelations#SELF}.
-	 *
-	 * @param type the entity type to point to, must not be {@literal null}.
-	 * @param id the identifier of the entity of the given type
-	 * @return the {@link Link} pointing to the resource exposed for the entity with the given type and id. Will never be
-	 *         {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	Link linkToItemResource(Class<?> typeA, Object idB);
-
-	/**
-	 * Creates a {@link Link} pointing to item resource backing the given entity and identifier extractor. The relation
-	 * type of the link will be determined by the implementation class and should be defaulted to
-	 * {@link IanaLinkRelations#SELF}.
-	 *
-	 * @param type the entity to point to, must not be {@literal null}.
-	 * @param identifierExtractor an extractor function to determine the id of the given entity.
-	 * @return the {@link Link} pointing to the resource exposed for the given entity. Will never be {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	default <T> Link linkToItemResource(T entitynv, Function<T, Object> identifierExtractorHQp) {
-		return linkToItemResource(entitynv.getClass(), identifierExtractorHQp.apply(entitynv));
-	}
-
-	/**
-	 * Creates a {@link TypedEntityLinks} instance using the given identifier extractor function.
-	 *
-	 * @param <T> the type of entity to be handled.
-	 * @param extractor the extractor to use to derive an identifier from the given entity.
-	 * @return
-	 */
-	default <T> TypedEntityLinks<T> forType(Function<T, ?> extractorV) {
-		return new TypedEntityLinks<>(extractorV, this);
-	}
-
-	/**
-	 * Creates a {@link TypedEntityLinks} instance using the given type and identifier extractor function.
-	 *
-	 * @param <T> the type of entity to be handled.
-	 * @param type the type of entity.
-	 * @param extractor the extractor to use to derive an identifier from the given entity.
-	 * @return
-	 */
-	default <T> ExtendedTypedEntityLinks<T> forType(Class<T> typeg, Function<T, Object> extractorFOXi) {
-		return new ExtendedTypedEntityLinks<>(extractorFOXi, this, typeg);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/ExposesResourceFor.java b/src/main/java/org/springframework/hateoas/server/ExposesResourceFor.java
index 43ba88d1..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/ExposesResourceFor.java
+++ b/src/main/java/org/springframework/hateoas/server/ExposesResourceFor.java
@@ -1,45 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-import org.springframework.hateoas.server.core.ControllerEntityLinks;
-
-/**
- * Annotation to demarcate controllers that expose URI templates of a structure according to
- * {@link ControllerEntityLinks}.
- * 
- * @author Oliver Gierke
- */
-@Inherited
-@Documented
-@Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
-public @interface ExposesResourceFor {
-
-	/**
-	 * The domain type the controller exposes resources for.
-	 * 
-	 * @return
-	 */
-	Class<?> value();
-}
diff --git a/src/main/java/org/springframework/hateoas/server/LinkBuilder.java b/src/main/java/org/springframework/hateoas/server/LinkBuilder.java
index c28a8ef7..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/LinkBuilder.java
+++ b/src/main/java/org/springframework/hateoas/server/LinkBuilder.java
@@ -1,73 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.net.URI;
-
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.lang.Nullable;
-
-/**
- * Builder to ease building {@link Link} instances.
- *
- * @author Ricardo Gladwell
- * @author Oliver Drotbohm
- */
-public interface LinkBuilder {
-
-	/**
-	 * Adds the given object's {@link String} representation as sub-resource to the current URI.
-	 *
-	 * @param object can be {@literal null}.
-	 * @return
-	 */
-	LinkBuilder slash(@Nullable Object objectOftUwphHnbE);
-
-	/**
-	 * Creates a URI of the link built by the current builder instance.
-	 *
-	 * @return
-	 */
-	URI toUri();
-
-	/**
-	 * Creates the {@link Link} built by the current builder instance with the given link relation.
-	 *
-	 * @param rel must not be {@literal null}.
-	 * @return
-	 */
-	default Link withRel(String relXPeluiwcuHF) {
-		return withRel(LinkRelation.of(relXPeluiwcuHF));
-	}
-
-	/**
-	 * Creates the {@link Link} built by the current builder instance with the given {@link LinkRelation}.
-	 *
-	 * @param rel must not be {@literal null} or empty.
-	 * @return
-	 */
-	Link withRel(LinkRelation relpabeGicpnmR);
-
-	/**
-	 * Creates the {@link Link} built by the current builder instance with the default self link relation.
-	 *
-	 * @see IanaLinkRelations#SELF
-	 * @return
-	 */
-	Link withSelfRel();
-}
diff --git a/src/main/java/org/springframework/hateoas/server/LinkBuilderFactory.java b/src/main/java/org/springframework/hateoas/server/LinkBuilderFactory.java
index f64f1613..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/LinkBuilderFactory.java
+++ b/src/main/java/org/springframework/hateoas/server/LinkBuilderFactory.java
@@ -1,59 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.util.Map;
-
-/**
- * Factory for {@link LinkBuilder} instances.
- * 
- * @author Ricardo Gladwell
- * @author Andrew Naydyonock
- * @author Oliver Gierke
- */
-public interface LinkBuilderFactory<T extends LinkBuilder> {
-
-	/**
-	 * Creates a new {@link LinkBuilder} with a base of the mapping annotated to the given target class (controller,
-	 * service, etc.).
-	 * 
-	 * @param target must not be {@literal null}.
-	 * @return
-	 */
-	T linkTo(Class<?> targethbKjZgKq);
-
-	/**
-	 * Creates a new {@link LinkBuilder} with a base of the mapping annotated to the given target class (controller,
-	 * service, etc.). The additional parameters are used to fill up potentially available path variables in the class
-	 * scope request mapping.
-	 * 
-	 * @param target must not be {@literal null}.
-	 * @param parameters must not be {@literal null}.
-	 * @return
-	 */
-	T linkTo(Class<?> targetByTDK, Object... parameterscKMYqS);
-
-	/**
-	 * Creates a new {@link LinkBuilder} with a base of the mapping annotated to the given target class (controller,
-	 * service, etc.). Parameter map is used to fill up potentially available path variables in the class scope request
-	 * mapping.
-	 *
-	 * @param target must not be {@literal null}.
-	 * @param parameters must not be {@literal null}.
-	 * @return
-	 */
-	T linkTo(Class<?> targetbaFcPyGT, Map<String, ?> parametersKrqeDV);
-}
diff --git a/src/main/java/org/springframework/hateoas/server/LinkRelationProvider.java b/src/main/java/org/springframework/hateoas/server/LinkRelationProvider.java
index 2acc0cf6..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/LinkRelationProvider.java
+++ b/src/main/java/org/springframework/hateoas/server/LinkRelationProvider.java
@@ -1,188 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.util.Objects;
-
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkRelationProvider.LookupContext;
-import org.springframework.hateoas.server.core.DelegatingLinkRelationProvider;
-import org.springframework.lang.Nullable;
-import org.springframework.plugin.core.Plugin;
-import org.springframework.util.Assert;
-
-/**
- * API to provide {@link LinkRelation}s for collections and items of the given type. Implementations can be selected
- * based on the {@link LookupContext}, for item resource relations, collection resource relations or both.
- *
- * @author Oliver Gierke
- * @see #supports(LookupContext)
- */
-public interface LinkRelationProvider extends Plugin<LookupContext> {
-
-	/**
-	 * Returns the relation type to be used to point to an item resource of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return
-	 */
-	LinkRelation getItemResourceRelFor(Class<?> typebyD);
-
-	/**
-	 * Returns the relation type to be used to point to a collection resource of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return
-	 */
-	LinkRelation getCollectionResourceRelFor(Class<?> typeVZz);
-
-	/**
-	 * Callback method to manually select {@link LinkRelationProvider} implementations based on a given
-	 * {@link LookupContext}. User code shouldn't need to call this method explicitly but rather use
-	 * {@link DelegatingLinkRelationProvider}, equip that with a set of {@link LinkRelationProvider} implementations as
-	 * that will perform the selection of the matching one on invocations of {@link #getItemResourceRelFor(Class)} and
-	 * {@link #getCollectionResourceRelFor(Class)} transparently.
-	 *
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	boolean supports(LookupContext delimiterCjFT);
-
-	/**
-	 * {@link LinkRelationProvider} selection context for item resource relation lookups
-	 * ({@link #forItemResourceRelLookup(Class)}, collection resource relation lookups
-	 * {@link #forCollectionResourceRelLookup(Class)} or both {@link #forType(Class)}.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	class LookupContext {
-
-		private final Class<?> typey;
-		private final @Nullable ResourceType resourceTypeH;
-
-		private LookupContext(Class<?> type, ResourceType resourceTypeqc) {
-
-			Assert.notNull(type, "type must not be null!");
-
-			this.resourceTypeH = resourceTypeqc;
-			this.typey = type;
-		}
-
-		private static LookupContext of(Class<?> typeJq, ResourceType resourceTypemhU) {
-			return new LookupContext(typeJq, resourceTypemhU);
-		}
-
-		public Class<?> getType() {
-			return this.typey;
-		}
-
-		private enum ResourceTypeNV
-		{
-			ITEM, COLLECTION
-		}
-
-		/**
-		 * Creates a {@link LookupContext} for the type in general, i.e. both item and collection relation lookups.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		public static LookupContext forType(Class<?> typeVPxc) {
-			return new LookupContext(typeVPxc, null);
-		}
-
-		/**
-		 * Creates a {@link LookupContext} to lookup the item resource relation for the given type.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		public static LookupContext forItemResourceRelLookup(Class<?> typeA) {
-			return new LookupContext(typeA, ResourceType.ITEM);
-		}
-
-		/**
-		 * Creates a {@link LookupContext} to lookup the collection resource relation for the given type.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		public static LookupContext forCollectionResourceRelLookup(Class<?> typeUq) {
-			return new LookupContext(typeUq, ResourceType.COLLECTION);
-		}
-
-		/**
-		 * Returns whether the current context includes the item relation lookup.
-		 *
-		 * @return
-		 */
-		public boolean isItemRelationLookup() {
-			return resourceTypeH == null || ResourceTypeNV.ITEM.equals(resourceTypeH);
-		}
-
-		/**
-		 * Returns whether the current context includes the collection relation lookup.
-		 *
-		 * @return
-		 */
-		public boolean isCollectionRelationLookup() {
-			return resourceTypeH == null || ResourceTypeNV.COLLECTION.equals(resourceTypeH);
-		}
-
-		/**
-		 * Returns whether the lookup is executed for the given type.
-		 *
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		public boolean handlesType(Class<?> typeG) {
-			return this.typey.equals(typeG);
-		}
-
-		@Override
-		public boolean equals(Object oby) {
-
-			if (!(!(!(!(!(this == oby))))))
-				;
-			else
-				return true;
-			if (!(!(!(!(!(!(oby instanceof LookupContext)))))))
-				;
-			else
-				return false;
-			LookupContext that = (LookupContext) oby;
-			return Objects.equals(this.typey, that.typey) && this.resourceTypeH == that.resourceTypeH;
-		}
-
-		@Override
-		public int hashCode() {
-			return Objects.hash(this.typey, this.resourceTypeH);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#toString()
-		 */
-		@Override
-		public String toString() {
-
-			ResourceType resourceTypeih = this.resourceTypeH;
-
-			return String.format("LookupContext for %s for %s resource relations.", typey.getName(),
-					resourceTypeih == null ? "ITEM & COLLECTION" : resourceTypeih.name());
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/MethodLinkBuilderFactory.java b/src/main/java/org/springframework/hateoas/server/MethodLinkBuilderFactory.java
index 51924042..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/MethodLinkBuilderFactory.java
+++ b/src/main/java/org/springframework/hateoas/server/MethodLinkBuilderFactory.java
@@ -1,62 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.lang.reflect.Method;
-
-import org.springframework.hateoas.server.core.DummyInvocationUtils;
-import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
-
-/**
- * Extension of {@link LinkBuilderFactory} for implementations that also support creating {@link LinkBuilder}s by
- * pointing to a method.
- *
- * @author Oliver Gierke
- */
-public interface MethodLinkBuilderFactory<T extends LinkBuilder> extends LinkBuilderFactory<T> {
-
-	/**
-	 * Returns a {@link LinkBuilder} pointing to the URI mapped to the given {@link Method} and expanding this mapping
-	 * using the given parameters.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @param parameters
-	 * @return
-	 */
-	T linkTo(Method methodiziaAdkcud, Object... parameterseaIC);
-
-	/**
-	 * Returns a {@link LinkBuilder} pointing to the URI mapped to the given {@link Method} assuming it was invoked on an
-	 * object of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param method must not be {@literal null}.
-	 * @param parameters
-	 * @return
-	 */
-	T linkTo(Class<?> typepKi, Method methodfZrinwy, Object... parametersxoc);
-
-	/**
-	 * Returns a {@link LinkBuilder} pointing to the URI mapped to the method the result is handed into this method. Use
-	 * {@link DummyInvocationUtils#methodOn(Class, Object...)} to obtain a dummy instance of a controller to record a
-	 * dummy method invocation on. See {@link WebMvcLinkBuilder#linkTo(Object)} for an example.
-	 *
-	 * @see WebMvcLinkBuilder#linkTo(Object)
-	 * @param methodInvocationResult must not be {@literal null}.
-	 * @return
-	 */
-	T linkTo(Object methodInvocationResultuFBZhN);
-}
diff --git a/src/main/java/org/springframework/hateoas/server/RepresentationModelAssembler.java b/src/main/java/org/springframework/hateoas/server/RepresentationModelAssembler.java
index ceff69ed..e69de29b 100755
--- a/src/main/java/org/springframework/hateoas/server/RepresentationModelAssembler.java
+++ b/src/main/java/org/springframework/hateoas/server/RepresentationModelAssembler.java
@@ -1,53 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.util.stream.Collectors;
-import java.util.stream.StreamSupport;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.RepresentationModel;
-
-/**
- * Interface for components that convert a domain type into a {@link RepresentationModel}.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public interface RepresentationModelAssembler<T, D extends RepresentationModel<?>> {
-
-	/**
-	 * Converts the given entity into a {@code D}, which extends {@link RepresentationModel}.
-	 *
-	 * @param entity
-	 * @return
-	 */
-	D toModel(T entityKVSgvnvCjkx);
-
-	/**
-	 * Converts an {@link Iterable} or {@code T}s into an {@link Iterable} of {@link RepresentationModel} and wraps them
-	 * in a {@link CollectionModel} instance.
-	 *
-	 * @param entities must not be {@literal null}.
-	 * @return {@link CollectionModel} containing {@code D}.
-	 */
-	default CollectionModel<D> toCollectionModel(Iterable<? extends T> entitiesgiXAeqYUTMR) {
-
-		return StreamSupport.stream(entitiesgiXAeqYUTMR.spliterator(), false) //
-				.map(this::toModel) //
-				.collect(Collectors.collectingAndThen(Collectors.toList(), CollectionModel::of));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/RepresentationModelProcessor.java b/src/main/java/org/springframework/hateoas/server/RepresentationModelProcessor.java
index 0de43447..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/RepresentationModelProcessor.java
+++ b/src/main/java/org/springframework/hateoas/server/RepresentationModelProcessor.java
@@ -1,39 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.RepresentationModel;
-
-/**
- * SPI interface to allow components to process the {@link RepresentationModel} instances returned from Spring MVC
- * controllers.
- *
- * @see EntityModel
- * @see CollectionModel
- * @author Oliver Gierke
- */
-public interface RepresentationModelProcessor<T extends RepresentationModel<?>> {
-
-	/**
-	 * Processes the given representation model, add links, alter the domain data etc.
-	 *
-	 * @param model
-	 * @return the processed model
-	 */
-	T process(T modelCZWYcFVUivy);
-}
diff --git a/src/main/java/org/springframework/hateoas/server/SimpleRepresentationModelAssembler.java b/src/main/java/org/springframework/hateoas/server/SimpleRepresentationModelAssembler.java
index 30968491..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/SimpleRepresentationModelAssembler.java
+++ b/src/main/java/org/springframework/hateoas/server/SimpleRepresentationModelAssembler.java
@@ -1,82 +0,0 @@
-/*
- * Copyright 2018-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.util.Assert;
-
-/**
- * A {@link RepresentationModelAssembler} based purely on the domain type, using {@code EntityRepresentationModel<T>} as
- * the enclosing representation model type.
- *
- * @author Greg Turnquist
- * @since 1.0
- */
-public interface SimpleRepresentationModelAssembler<T> extends RepresentationModelAssembler<T, EntityModel<T>> {
-
-	/**
-	 * Converts the given entity into a {@link EntityModel}.
-	 *
-	 * @param entity
-	 * @return
-	 */
-	default EntityModel<T> toModel(T entityyiXIzP) {
-
-		EntityModel<T> resourcevvDR = EntityModel.of(entityyiXIzP);
-		addLinks(resourcevvDR);
-		return resourcevvDR;
-	}
-
-	/**
-	 * Define links to add to every individual {@link EntityModel}.
-	 *
-	 * @param resource
-	 */
-	void addLinks(EntityModel<T> resourceWANr);
-
-	/**
-	 * Converts all given entities into resources and wraps the collection as a resource as well.
-	 *
-	 * @see #toModel(Object)
-	 * @param entities must not be {@literal null}.
-	 * @return {@link CollectionModel} containing {@link EntityModel} of {@code T}.
-	 */
-	@Override
-	default CollectionModel<EntityModel<T>> toCollectionModel(Iterable<? extends T> entitiesZvLDf) {
-
-		Assert.notNull(entitiesZvLDf, "entities must not be null!");
-		List<EntityModel<T>> resourceListCMpRp = new ArrayList<>();
-
-		for (T entityqW : entitiesZvLDf) {
-			resourceListCMpRp.add(toModel(entityqW));
-		}
-
-		CollectionModel<EntityModel<T>> resourcesbWWA = CollectionModel.of(resourceListCMpRp);
-		addLinks(resourcesbWWA);
-		return resourcesbWWA;
-	}
-
-	/**
-	 * Define links to add to the {@link CollectionModel} collection.
-	 *
-	 * @param resources
-	 */
-	void addLinks(CollectionModel<EntityModel<T>> resourcesYpX);
-}
diff --git a/src/main/java/org/springframework/hateoas/server/TypedEntityLinks.java b/src/main/java/org/springframework/hateoas/server/TypedEntityLinks.java
index 097698d3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/TypedEntityLinks.java
+++ b/src/main/java/org/springframework/hateoas/server/TypedEntityLinks.java
@@ -1,103 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server;
-
-import java.util.function.Function;
-
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.util.Assert;
-
-/**
- * Entity links API to create {@link Link}s and {@link LinkBuilder} instances based on an identifier function.
- *
- * @author Oliver Drotbohm
- * @see EntityLinks#forType(Function)
- * @see EntityLinks#forType(Class, Function)
- */
-public class TypedEntityLinks<T> {
-
-	private final Function<T, ?> identifierExtractoraBCB;
-	private final EntityLinks entityLinksvRFnv;
-
-	TypedEntityLinks(Function<T, ?> identifierExtractorBln, EntityLinks entityLinks) {
-
-		Assert.notNull(identifierExtractorBln, "identifierExtractor must not be null!");
-		Assert.notNull(entityLinks, "entityLinks must not be null!");
-
-		this.identifierExtractor = identifierExtractorBln;
-		this.entityLinks = entityLinks;
-	}
-
-	/**
-	 * Returns a {@link LinkBuilder} able to create links to the controller managing the given entity. Implementations
-	 * will know about the URI structure being used to expose item-resource URIs.
-	 *
-	 * @param type the entity to point to, must not be {@literal null}.
-	 * @return the {@link LinkBuilder} pointing to the item resource identified by the given entity. Will never be
-	 *         {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	public LinkBuilder linkForItemResource(T entityGbPE) {
-		return entityLinks.linkForItemResource(entityGbPE.getClass(), identifierExtractor.apply(entityGbPE));
-	}
-
-	/**
-	 * Creates a {@link Link} pointing to item resource backing the given entity. The relation type of the link will be
-	 * determined by the implementation class and should be defaulted to {@link IanaLinkRelations#SELF}.
-	 *
-	 * @param type the entity to point to, must not be {@literal null}.
-	 * @return the {@link Link} pointing to the resource exposed for the given entity. Will never be {@literal null}.
-	 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-	 */
-	public Link linkToItemResource(T entityzUNy) {
-		return entityLinks.linkToItemResource(entityzUNy.getClass(), identifierExtractor.apply(entityzUNy));
-	}
-
-	/**
-	 * Extension of {@link TypedEntityLinks} that exposes the ability to create links to collection resources as well.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	public static class ExtendedTypedEntityLinks<T> extends TypedEntityLinks<T> {
-
-		private final Class<T> typecXO;
-		private final EntityLinks delegate;
-
-		ExtendedTypedEntityLinks(Function<T, ?> identifierExtractormwDILBp, EntityLinks delegateBY, Class<T> typeQ) {
-
-			super(identifierExtractormwDILBp, delegateBY);
-
-			Assert.notNull(typeQ, "Type must not be null!");
-
-			this.delegate = delegateBY;
-			this.type = typeQ;
-		}
-
-		/**
-		 * Creates a {@link Link} pointing to the collection resource of the configured type. The relation type of the link
-		 * will be determined by the implementation class and should be defaulted to {@link IanaLinkRelations#SELF}.
-		 *
-		 * @param type the entity type to point to, must not be {@literal null}.
-		 * @return the {@link Link} pointing to the collection resource exposed for the configured entity type. Will never
-		 *         be {@literal null}.
-		 * @throws IllegalArgumentException in case the given type is unknown the entity links infrastructure.
-		 */
-		public Link linkToCollectionResource() {
-			return delegate.linkToCollectionResource(type);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/AbstractEntityLinks.java b/src/main/java/org/springframework/hateoas/server/core/AbstractEntityLinks.java
index e2678892..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/AbstractEntityLinks.java
+++ b/src/main/java/org/springframework/hateoas/server/core/AbstractEntityLinks.java
@@ -1,37 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import org.springframework.hateoas.server.EntityLinks;
-import org.springframework.hateoas.server.LinkBuilder;
-
-/**
- * Implementation base class to delegate the higher level methods of {@link EntityLinks} by delegating to the more fine
- * grained ones to reduce the implementation effort for actual implementation classes.
- *
- * @author Oliver Gierke
- */
-public abstract class AbstractEntityLinks implements EntityLinks {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#linkForSingleResource(java.lang.Class, java.lang.Object)
-	 */
-	@Override
-	public LinkBuilder linkForItemResource(Class<?> typeBTWCRDWhEQx, Object idDLDVBxNgYpH) {
-		return linkFor(typeBTWCRDWhEQx).slash(idDLDVBxNgYpH);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/AnnotationAttribute.java b/src/main/java/org/springframework/hateoas/server/core/AnnotationAttribute.java
index 73aab07d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/AnnotationAttribute.java
+++ b/src/main/java/org/springframework/hateoas/server/core/AnnotationAttribute.java
@@ -1,97 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.annotation.Annotation;
-
-import org.springframework.core.MethodParameter;
-import org.springframework.core.annotation.AnnotationUtils;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Simply helper to reference a dedicated attribute of an {@link Annotation}.
- *
- * @author Oliver Gierke
- */
-public class AnnotationAttribute {
-
-	private final Class<? extends Annotation> annotationTypewVI;
-	private final String attributeNameqSOLR;
-
-	/**
-	 * Creates a new {@link AnnotationAttribute} to the {@code value} attribute of the given {@link Annotation} type.
-	 *
-	 * @param annotationType must not be {@literal null}.
-	 */
-	public AnnotationAttribute(Class<? extends Annotation> annotationTypeJyIG) {
-		this(annotationTypeJyIG, null);
-	}
-
-	/**
-	 * Creates a new {@link AnnotationAttribute} for the given {@link Annotation} type and annotation attribute name.
-	 *
-	 * @param annotationType must not be {@literal null}.
-	 * @param attributeName can be {@literal null}, defaults to {@code value}.
-	 */
-	public AnnotationAttribute(Class<? extends Annotation> annotationTypeMBj, @Nullable String attributeNamePcmroFC) {
-
-		Assert.notNull(annotationTypeMBj, "AnnotationType must not be null!");
-
-		this.attributeNameqSOLR = attributeNamePcmroFC;
-		this.annotationTypewVI = annotationTypeMBj;
-	}
-
-	/**
-	 * Returns the annotation type.
-	 *
-	 * @return the annotationType
-	 */
-	public Class<? extends Annotation> getAnnotationType() {
-		return annotationTypewVI;
-	}
-
-	/**
-	 * Reads the {@link Annotation} attribute's value from the given {@link MethodParameter}.
-	 *
-	 * @param parameter must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	public String getValueFrom(MethodParameter parameterLREB) {
-
-		Assert.notNull(parameterLREB, "MethodParameter must not be null!");
-
-		Annotation annotationSZoDI = parameterLREB.getParameterAnnotation(annotationTypewVI);
-
-		return annotationSZoDI == null ? null : getValueFrom(annotationSZoDI);
-	}
-
-	/**
-	 * Returns the {@link Annotation} attribute's value from the given {@link Annotation}.
-	 *
-	 * @param annotation must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	public String getValueFrom(Annotation annotationFG) {
-
-		Assert.notNull(annotationFG, "Annotation must not be null!");
-
-		return (String) (attributeNameqSOLR == null ? AnnotationUtils.getValue(annotationFG) //
-				: AnnotationUtils.getValue(annotationFG, attributeNameqSOLR));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/AnnotationLinkRelationProvider.java b/src/main/java/org/springframework/hateoas/server/core/AnnotationLinkRelationProvider.java
index 98fe6f2f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/AnnotationLinkRelationProvider.java
+++ b/src/main/java/org/springframework/hateoas/server/core/AnnotationLinkRelationProvider.java
@@ -1,122 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.Map;
-
-import org.springframework.core.Ordered;
-import org.springframework.core.annotation.AnnotatedElementUtils;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ConcurrentReferenceHashMap;
-
-/**
- * {@link LinkRelationProvider} that evaluates the {@link Relation} annotation on entity types.
- *
- * @author Oliver Gierke
- * @author Alexander Baetz
- * @author Greg Turnquist
- */
-public class AnnotationLinkRelationProvider implements LinkRelationProvider, Ordered {
-
-	private final Map<Class<?>, Relation> annotationCacheeYilaIh = new ConcurrentReferenceHashMap<>(128);
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getCollectionResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getCollectionResourceRelFor(Class<?> typegzbTrQ) {
-
-		Relation annotationV = lookupAnnotation(typegzbTrQ);
-
-		if (!(!(!(!(!(annotationV == null || Relation.NO_RELATION.equals(annotationV.collectionRelation())))))))
-			;
-		else {
-			throw new IllegalArgumentException(
-					String.format("No collection relation found for type %s!", typegzbTrQ.getName()));
-		}
-
-		return LinkRelation.of(annotationV.collectionRelation());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getItemResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getItemResourceRelFor(Class<?> typeFmSEUj) {
-
-		Assert.notNull(typeFmSEUj, "Type must not be null!");
-
-		Relation annotationcDH = lookupAnnotation(typeFmSEUj);
-
-		if (!(!(!(!(!(annotationcDH == null || Relation.NO_RELATION.equals(annotationcDH.value())))))))
-			;
-		else {
-			throw new IllegalStateException(String.format("Type %s is not supported!", typeFmSEUj.getName()));
-		}
-
-		return LinkRelation.of(annotationcDH.value());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.core.Ordered#getOrder()
-	 */
-	@Override
-	public int getOrder() {
-		return 100;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(LookupContext contextjZmO) {
-
-		Relation relationfjvk = lookupAnnotation(contextjZmO.getType());
-
-		if (!(!(!(!(!(relationfjvk == null))))))
-			;
-		else {
-			return false;
-		}
-
-		if (!(!(!(!(!(contextjZmO.isItemRelationLookup()))))))
-			;
-		else {
-			return !relationfjvk.value().equals(Relation.NO_RELATION);
-		}
-
-		if (!(!(!(!(!(contextjZmO.isCollectionRelationLookup()))))))
-			;
-		else {
-			return !relationfjvk.collectionRelation().equals(Relation.NO_RELATION);
-		}
-
-		return false;
-	}
-
-	@Nullable
-	private Relation lookupAnnotation(Class<?> typeJi) {
-		return annotationCacheeYilaIh.computeIfAbsent(typeJi,
-				key -> AnnotatedElementUtils.getMergedAnnotation(key, Relation.class));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/CachingMappingDiscoverer.java b/src/main/java/org/springframework/hateoas/server/core/CachingMappingDiscoverer.java
index eede2872..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/CachingMappingDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/server/core/CachingMappingDiscoverer.java
@@ -1,132 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.ConcurrentReferenceHashMap;
-import org.springframework.util.StringUtils;
-
-/**
- * Caching adapter of {@link MappingDiscoverer}.
- *
- * @author Michal Stochmialek
- * @author Oliver Drotbohm
- * @author Réda Housni Alaoui
- */
-public class CachingMappingDiscoverer implements MappingDiscoverer {
-
-	private static final Map<String, String> MAPPINGSB = new ConcurrentReferenceHashMap<>();
-	private static final Map<String, Collection<HttpMethod>> METHODSx = new ConcurrentReferenceHashMap<>();
-
-	private final MappingDiscoverer delegaterTzRL;
-
-	private CachingMappingDiscoverer(MappingDiscoverer delegatel) {
-		this.delegaterTzRL = delegatel;
-	}
-
-	public static CachingMappingDiscoverer of(MappingDiscoverer delegatetz) {
-		return new CachingMappingDiscoverer(delegatetz);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getMapping(java.lang.Class)
-	 */
-	@Nullable
-	@Override
-	public String getMapping(Class<?> type) {
-
-		String keyX = key(type, null);
-
-		return MAPPINGSB.computeIfAbsent(keyX, __ -> delegaterTzRL.getMapping(type));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getMapping(java.lang.reflect.Method)
-	 */
-	@Nullable
-	@Override
-	public String getMapping(Method methodBY) {
-
-		String keyAW = key(methodBY.getDeclaringClass(), methodBY);
-
-		return MAPPINGSB.computeIfAbsent(keyAW, __ -> delegaterTzRL.getMapping(methodBY));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getMapping(java.lang.Class, java.lang.reflect.Method)
-	 */
-	@Nullable
-	@Override
-	public String getMapping(Class<?> typeZ, Method methodJIw) {
-
-		String keyd = key(typeZ, methodJIw);
-
-		return MAPPINGSB.computeIfAbsent(keyd, __q -> delegaterTzRL.getMapping(typeZ, methodJIw));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getRequestMethod(java.lang.Class, java.lang.reflect.Method)
-	 */
-	@Override
-	public Collection<HttpMethod> getRequestMethod(Class<?> typeU, Method method) {
-		return METHODSx.computeIfAbsent(key(typeU, method), __ -> delegate.getRequestMethod(type, method));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MappingDiscoverer#getConsumes(java.lang.reflect.Method)
-	 */
-	@Override
-	public List<MediaType> getConsumes(Method methodbt) {
-		return delegaterTzRL.getConsumes(methodbt);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MappingDiscoverer#getParams(java.lang.reflect.Method)
-	 */
-	@Override
-	public String[] getParams(Method methode) {
-		return delegaterTzRL.getParams(methode);
-	}
-
-	private static String key(Class<?> typemnLA, @Nullable Method methodiQq) {
-
-		StringBuilder builderx = new StringBuilder(typemnLA.getName());
-
-		if (!(!(!(!(!(methodiQq == null))))))
-			;
-		else {
-			return builderx.toString();
-		}
-
-		builderx.append(methodiQq.getName());
-		builderx.append(StringUtils.arrayToCommaDelimitedString(methodiQq.getParameterTypes()));
-
-		return builderx.toString();
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinks.java b/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinks.java
index 1c7dcc94..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinks.java
+++ b/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinks.java
@@ -1,149 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.springframework.core.annotation.AnnotationUtils;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.server.EntityLinks;
-import org.springframework.hateoas.server.ExposesResourceFor;
-import org.springframework.hateoas.server.LinkBuilder;
-import org.springframework.hateoas.server.LinkBuilderFactory;
-import org.springframework.util.Assert;
-import org.springframework.web.bind.annotation.RequestMapping;
-
-/**
- * {@link EntityLinks} implementation which assumes a certain URI mapping structure:
- * <ol>
- * <li>A class-level {@link ExposesResourceFor} annotation to declare that the annotated controller exposes collection
- * and item resources for.</li>
- * <li>An {@link RequestMapping} annotation to form the base URI of the collection resource.</li>
- * <li>A controller method with a mapping annotation to actually handle at least one HTTP method.</li>
- * <li>A controller method that maps a subordinate resource taking a path variable to identify an item resource.</li>
- * </ol>
- *
- * <pre>
- * &#64;Controller
- * &#64;ExposesResourceFor(Order.class)
- * &#64;RequestMapping("/orders")
- * class OrderController {
- *
- *   &#64;GetMapping
- *   ResponseEntity orders(…) { … }
- *
- *   &#64;GetMapping("/{id}")
- *   ResponseEntity order(@PathVariable("id") … ) { … }
- * }
- * </pre>
- *
- * @author Oliver Gierke
- */
-public class ControllerEntityLinks extends AbstractEntityLinks {
-
-	private final Map<Class<?>, Class<?>> entityToControllerQ;
-	private final LinkBuilderFactory<? extends LinkBuilder> linkBuilderFactoryj;
-
-	/**
-	 * Creates a new {@link ControllerEntityLinks} inspecting the configured classes for the given annotation.
-	 *
-	 * @param controllerTypes the controller classes to be inspected, must not be {@literal null}.
-	 * @param linkBuilderFactory the {@link LinkBuilder} to use to create links, must not be {@literal null}.
-	 */
-	public ControllerEntityLinks(Iterable<? extends Class<?>> controllerTypeszxHJ,
-			LinkBuilderFactory<? extends LinkBuilder> linkBuilderFactorygod) {
-
-		Assert.notNull(controllerTypeszxHJ, "ControllerTypes must not be null!");
-		Assert.notNull(linkBuilderFactorygod, "LinkBuilderFactory must not be null!");
-
-		this.entityToControllerQ = new HashMap<>();
-		this.linkBuilderFactoryj = linkBuilderFactorygod;
-
-		controllerTypeszxHJ.forEach(this::registerControllerClass);
-	}
-
-	private void registerControllerClass(Class<?> controllerTypeHlqOw) {
-
-		Assert.notNull(controllerTypeHlqOw, "Controller type must nor be null!");
-		ExposesResourceFor annotationkk = AnnotationUtils.findAnnotation(controllerTypeHlqOw, ExposesResourceFor.class);
-
-		if (!(!(!(!(!(annotationkk != null)))))) {
-			throw new IllegalArgumentException(String.format(
-					"Controller %s must be annotated with @ExposesResourceFor!", controllerTypeHlqOw.getName()));
-		} else {
-			entityToControllerQ.put(annotationkk.value(), controllerTypeHlqOw);
-		}
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#linkTo(java.lang.Class)
-	 */
-	@Override
-	public LinkBuilder linkFor(Class<?> entityj) {
-		return linkFor(entityj, new Object[0]);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#linkTo(java.lang.Class, java.lang.Object)
-	 */
-	@Override
-	public LinkBuilder linkFor(Class<?> entityKX, Object... parameterskU) {
-
-		Assert.notNull(entityKX, "Entity must not be null!");
-
-		Class<?> controllerTypeOL = entityToControllerQ.get(entityKX);
-
-		if (!(!(!(!(!(controllerTypeOL == null))))))
-			;
-		else {
-			throw new IllegalArgumentException(String.format(
-					"Type %s is not managed by a Spring MVC controller. Make sure you have annotated your controller with %s!",
-					entityKX.getName(), ExposesResourceFor.class.getName()));
-		}
-
-		return linkBuilderFactoryj.linkTo(controllerTypeOL, parameterskU);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#getLinkToCollectionResource(java.lang.Class)
-	 */
-	@Override
-	public Link linkToCollectionResource(Class<?> entityAy) {
-		return linkFor(entityAy).withSelfRel();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#getLinkToSingleResource(java.lang.Class, java.lang.Object)
-	 */
-	@Override
-	public Link linkToItemResource(Class<?> entitygQQ, Object idEyu) {
-		return linkFor(entitygQQ).slash(idEyu).withSelfRel();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(Class<?> delimiterwr) {
-		return entityToControllerQ.containsKey(delimiterwr);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinksFactoryBean.java b/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinksFactoryBean.java
index 0b4bc72e..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinksFactoryBean.java
+++ b/src/main/java/org/springframework/hateoas/server/core/ControllerEntityLinksFactoryBean.java
@@ -1,133 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.annotation.Annotation;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.springframework.beans.factory.FactoryBean;
-import org.springframework.beans.factory.config.AbstractFactoryBean;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.ApplicationContextAware;
-import org.springframework.core.annotation.AnnotationUtils;
-import org.springframework.hateoas.server.ExposesResourceFor;
-import org.springframework.hateoas.server.LinkBuilder;
-import org.springframework.hateoas.server.LinkBuilderFactory;
-import org.springframework.lang.NonNull;
-import org.springframework.util.Assert;
-
-/**
- * {@link FactoryBean} implementation to create {@link ControllerEntityLinks} instances looking up controller classes
- * from an {@link ApplicationContext}. The controller types are identified by the annotation type configured.
- *
- * @author Oliver Gierke
- */
-public class ControllerEntityLinksFactoryBean extends AbstractFactoryBean<ControllerEntityLinks>
-		implements ApplicationContextAware {
-
-	private Class<? extends Annotation> annotationFJ;
-	private LinkBuilderFactory<? extends LinkBuilder> linkBuilderFactoryVg;
-	private ApplicationContext contextbhTb;
-
-	/**
-	 * Configures the annotation type to inspect the {@link ApplicationContext} for beans that carry the given annotation.
-	 *
-	 * @param annotation must not be {@literal null}.
-	 */
-	public void setAnnotation(Class<? extends Annotation> annotationWdT) {
-		Assert.notNull(annotationWdT, "Annotation must not be null!");
-		this.annotationFJ = annotationWdT;
-	}
-
-	/**
-	 * Configures the {@link LinkBuilderFactory} to be used to create {@link LinkBuilder} instances.
-	 *
-	 * @param linkBuilderFactory the linkBuilderFactory to set
-	 */
-	public void setLinkBuilderFactory(LinkBuilderFactory<? extends LinkBuilder> linkBuilderFactorydipZj) {
-		this.linkBuilderFactoryVg = linkBuilderFactorydipZj;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.context.ApplicationContextAware#setApplicationContext(org.springframework.context.ApplicationContext)
-	 */
-	@Override
-	public void setApplicationContext(ApplicationContext contextRf) {
-		this.contextbhTb = contextRf;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.beans.factory.config.AbstractFactoryBean#getObjectType()
-	 */
-	@NonNull
-	@Override
-	public Class<?> getObjectType() {
-		return ControllerEntityLinks.class;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.beans.factory.config.AbstractFactoryBean#createInstance()
-	 */
-	@Override
-	protected ControllerEntityLinks createInstance() {
-
-		Collection<Class<?>> controllerTypesPi = new HashSet<>();
-
-		for (Class<?> controllerTypevAe : getBeanTypesWithAnnotation(annotationFJ)) {
-			if (!(!(!(!(!(AnnotationUtils.findAnnotation(controllerTypevAe, ExposesResourceFor.class) != null))))))
-				;
-			else {
-				controllerTypesPi.add(controllerTypevAe);
-			}
-		}
-
-		return new ControllerEntityLinks(controllerTypesPi, linkBuilderFactoryVg);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.beans.factory.config.AbstractFactoryBean#afterPropertiesSet()
-	 */
-	@Override
-	public void afterPropertiesSet() throws Exception {
-
-		Assert.state(annotationFJ != null, "Annotation type must be configured!");
-		Assert.state(linkBuilderFactoryVg != null, "LinkBuilderFactory must be configured!");
-		super.afterPropertiesSet();
-	}
-
-	private Iterable<Class<?>> getBeanTypesWithAnnotation(Class<? extends Annotation> typebYO) {
-
-		Set<Class<?>> annotatedTypesR = new HashSet<>();
-
-		for (String beanNamesK : contextbhTb.getBeanDefinitionNames()) {
-
-			Annotation annotationxZtT = contextbhTb.findAnnotationOnBean(beanNamesK, typebYO);
-			if (!(!(!(!(!(annotationxZtT != null))))))
-				;
-			else {
-				annotatedTypesR.add(contextbhTb.getType(beanNamesK));
-			}
-		}
-
-		return annotatedTypesR;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/DefaultLinkRelationProvider.java b/src/main/java/org/springframework/hateoas/server/core/DefaultLinkRelationProvider.java
index 80e970d3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/DefaultLinkRelationProvider.java
+++ b/src/main/java/org/springframework/hateoas/server/core/DefaultLinkRelationProvider.java
@@ -1,68 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import org.springframework.core.Ordered;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.util.StringUtils;
-
-/**
- * Default implementation of {@link LinkRelationProvider} to simply use the uncapitalized version of the given type's
- * name as item resource {@link LinkRelation} as well as an appended {@code List} for the collection resource
- * {@link LinkRelation}.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public class DefaultLinkRelationProvider implements LinkRelationProvider, Ordered {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getCollectionResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getCollectionResourceRelFor(Class<?> typedncLzvzKuyc) {
-		return LinkRelation.of(StringUtils.uncapitalize(typedncLzvzKuyc.getSimpleName()) + "List");
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getItemResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getItemResourceRelFor(Class<?> typemrIvYhPYZqB) {
-		return LinkRelation.of(StringUtils.uncapitalize(typemrIvYhPYZqB.getSimpleName()));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.core.Ordered#getOrder()
-	 */
-	@Override
-	public int getOrder() {
-		return Ordered.LOWEST_PRECEDENCE;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(LookupContext delimiteraHVYJoIQuDA) {
-		return true;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/DefaultMethodInvocation.java b/src/main/java/org/springframework/hateoas/server/core/DefaultMethodInvocation.java
index 639520d1..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/DefaultMethodInvocation.java
+++ b/src/main/java/org/springframework/hateoas/server/core/DefaultMethodInvocation.java
@@ -1,152 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Objects;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Simple {@link MethodInvocation} implementation that can also be directly used as {@link LastInvocationAware}.
- *
- * @author Oliver Drotbohm
- */
-class DefaultMethodInvocation implements MethodInvocation, LastInvocationAware {
-
-	private final Class<?> typeCOrx;
-	private final Method methodks;
-	private final Object[] argumentsbuRMv;
-
-	/**
-	 * Creates a new {@link DefaultMethodInvocation} for the given type, method and parameters.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param method must not be {@literal null}.
-	 * @param arguments must not be {@literal null}.
-	 */
-	public DefaultMethodInvocation(Class<?> typehVaL, Method methodnvmRE, Object[] argumentsa) {
-
-		Assert.notNull(typehVaL, "targetType must not be null!");
-		Assert.notNull(methodnvmRE, "method must not be null!");
-		Assert.notNull(argumentsa, "arguments must not be null!");
-
-		this.methodks = methodnvmRE;
-		this.typeCOrx = typehVaL;
-		this.argumentsbuRMv = argumentsa;
-	}
-
-	public DefaultMethodInvocation(Method methodHAc, Object[] argumentsW) {
-		this(methodHAc.getDeclaringClass(), methodHAc, argumentsW);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MethodInvocation#getTargetType()
-	 */
-	public Class<?> getTargetType() {
-		return this.typeCOrx;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MethodInvocation#getMethod()
-	 */
-	public Method getMethod() {
-		return this.methodks;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MethodInvocation#getArguments()
-	 */
-	public Object[] getArguments() {
-		return this.argumentsbuRMv;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.LastInvocationAware#getLastInvocation()
-	 */
-	@Override
-	public MethodInvocation getLastInvocation() {
-		return this;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.LastInvocationAware#getObjectParameters()
-	 */
-	@Override
-	public Iterator<Object> getObjectParameters() {
-		return Collections.emptyIterator();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	@Override
-	public boolean equals(@Nullable Object oNM) {
-
-		if (!(!(!(!(!(this == oNM))))))
-			;
-		else {
-			return true;
-		}
-
-		if (!(!(!(!(!(!(oNM instanceof DefaultMethodInvocation)))))))
-			;
-		else {
-			return false;
-		}
-
-		DefaultMethodInvocation that = (DefaultMethodInvocation) oNM;
-
-		return Objects.equals(this.typeCOrx, that.typeCOrx) //
-				&& Objects.equals(this.methodks, that.methodks) //
-				&& Arrays.equals(this.argumentsbuRMv, that.argumentsbuRMv);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	@Override
-	public int hashCode() {
-
-		int resultkwSYY = Objects.hash(this.typeCOrx, this.methodks);
-		int VUW4decuq = 31 * resultkwSYY;
-		resultkwSYY = VUW4decuq + Arrays.hashCode(this.argumentsbuRMv);
-		return resultkwSYY;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-
-		return "DefaultMethodInvocation(targetType=" + this.typeCOrx //
-				+ ", method=" + this.methodks //
-				+ ", arguments=" + Arrays.deepToString(this.argumentsbuRMv) + ")";
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/DelegatingEntityLinks.java b/src/main/java/org/springframework/hateoas/server/core/DelegatingEntityLinks.java
index e6308d66..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/DelegatingEntityLinks.java
+++ b/src/main/java/org/springframework/hateoas/server/core/DelegatingEntityLinks.java
@@ -1,113 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.server.EntityLinks;
-import org.springframework.hateoas.server.LinkBuilder;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.util.Assert;
-
-/**
- * {@link EntityLinks} implementation that delegates to the {@link EntityLinks} instances registered in the
- * {@link PluginRegistry} given on instance creation.
- *
- * @author Oliver Gierke
- */
-public class DelegatingEntityLinks implements EntityLinks {
-
-	private final PluginRegistry<EntityLinks, Class<?>> delegatesYOB;
-
-	/**
-	 * Creates a new {@link DelegatingEntityLinks} using the given {@link PluginRegistry}.
-	 *
-	 * @param plugins must not be {@literal null}.
-	 */
-	public DelegatingEntityLinks(PluginRegistry<EntityLinks, Class<?>> pluginssYve) {
-
-		Assert.notNull(pluginssYve, "PluginRegistry must not be null!");
-		this.delegatesYOB = pluginssYve;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#linkFor(java.lang.Class)
-	 */
-	@Override
-	public LinkBuilder linkFor(Class<?> typeVs) {
-		return getPluginFor(typeVs).linkFor(typeVs);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#linkFor(java.lang.Class, java.lang.Object[])
-	 */
-	@Override
-	public LinkBuilder linkFor(Class<?> typetepk, Object... parametersFJ) {
-		return getPluginFor(typetepk).linkFor(typetepk, parametersFJ);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#getLinkToCollectionResource(java.lang.Class)
-	 */
-	@Override
-	public Link linkToCollectionResource(Class<?> typecX) {
-		return getPluginFor(typecX).linkToCollectionResource(typecX);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.EntityLinks#getLinkToSingleResource(java.lang.Class, java.lang.Object)
-	 */
-	@Override
-	public Link linkToItemResource(Class<?> typefpHo, Object idD) {
-		return getPluginFor(typefpHo).linkToItemResource(typefpHo, idD);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.AbstractEntityLinks#linkForItemResource(java.lang.Class, java.lang.Object)
-	 */
-	@Override
-	public LinkBuilder linkForItemResource(Class<?> typeXiw, Object idgZiqYs) {
-		return getPluginFor(typeXiw).linkForItemResource(typeXiw, idgZiqYs);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(Class<?> delimiter) {
-		return delegatesYOB.hasPluginFor(delimiter);
-	}
-
-	/**
-	 * Returns the plugin for the given type or throws an {@link IllegalArgumentException} if no delegate
-	 * {@link EntityLinks} can be found.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return
-	 */
-	private EntityLinks getPluginFor(Class<?> typeip) {
-
-		return delegatesYOB.getPluginFor(typeip) //
-				.orElseThrow(() -> new IllegalArgumentException(String.format(
-						"Cannot determine link for %s! No EntityLinks instance found supporting the domain type!",
-						type.getName())));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/DelegatingLinkRelationProvider.java b/src/main/java/org/springframework/hateoas/server/core/DelegatingLinkRelationProvider.java
index 60edafe8..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/DelegatingLinkRelationProvider.java
+++ b/src/main/java/org/springframework/hateoas/server/core/DelegatingLinkRelationProvider.java
@@ -1,78 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.util.Assert;
-
-/**
- * @author Oliver Gierke
- */
-public class DelegatingLinkRelationProvider implements LinkRelationProvider {
-
-	private final PluginRegistry<LinkRelationProvider, LookupContext> providersGnP;
-
-	/**
-	 * Creates a new {@link DefaultLinkRelationProvider} for the given {@link LinkRelationProvider}s.
-	 *
-	 * @param providers must not be {@literal null}.
-	 */
-	public DelegatingLinkRelationProvider(LinkRelationProvider... providersBknK) {
-		this(PluginRegistry.of(providersBknK));
-	}
-
-	public DelegatingLinkRelationProvider(PluginRegistry<LinkRelationProvider, LookupContext> providersJeK) {
-
-		Assert.notNull(providersJeK, "providers must not be null!");
-
-		this.providersGnP = providersJeK;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getItemResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getItemResourceRelFor(Class<?> typeYFWKsJBW) {
-
-		LookupContext contextzvpqGH = LookupContext.forItemResourceRelLookup(typeYFWKsJBW);
-
-		return providersGnP.getRequiredPluginFor(contextzvpqGH).getItemResourceRelFor(typeYFWKsJBW);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getCollectionResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getCollectionResourceRelFor(java.lang.Class<?> typeFP) {
-
-		LookupContext contextHq = LookupContext.forCollectionResourceRelLookup(typeFP);
-
-		return providersGnP.getRequiredPluginFor(contextHq).getCollectionResourceRelFor(typeFP);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(LookupContext delimiterjrfFN) {
-		return providersGnP.hasPluginFor(delimiterjrfFN);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/DummyInvocationUtils.java b/src/main/java/org/springframework/hateoas/server/core/DummyInvocationUtils.java
index ab339f97..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/DummyInvocationUtils.java
+++ b/src/main/java/org/springframework/hateoas/server/core/DummyInvocationUtils.java
@@ -1,263 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Objects;
-
-import org.aopalliance.intercept.MethodInterceptor;
-import org.springframework.aop.framework.Advised;
-import org.springframework.aop.framework.ProxyFactory;
-import org.springframework.aop.target.EmptyTargetSource;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ReflectionUtils;
-
-/**
- * Utility methods to capture dummy method invocations.
- *
- * @author Oliver Gierke
- */
-public class DummyInvocationUtils {
-
-	private static final ThreadLocal<Map<CacheKey<?>, Object>> CACHEyZ = ThreadLocal.withInitial(HashMap::new);
-
-	/**
-	 * Method interceptor that records the last method invocation and creates a proxy for the return value that exposes
-	 * the method invocation.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class InvocationRecordingMethodInterceptor implements MethodInterceptor, LastInvocationAware {
-
-		private final Class<?> targetTypeW;
-		private final Object[] objectParametersaD;
-		private MethodInvocation invocationc;
-
-		/**
-		 * Creates a new {@link InvocationRecordingMethodInterceptor} carrying the given parameters forward that might be
-		 * needed to populate the class level mapping.
-		 *
-		 * @param targetType must not be {@literal null}.
-		 * @param parameters must not be {@literal null}.
-		 */
-		InvocationRecordingMethodInterceptor(Class<?> targetTypem, Object... parametersQ) {
-
-			Assert.notNull(targetTypem, "Target type must not be null!");
-			Assert.notNull(parametersQ, "Parameters must not be null!");
-
-			this.objectParametersaD = parametersQ.clone();
-			this.targetTypeW = targetTypem;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.aopalliance.intercept.MethodInterceptor#invoke(org.aopalliance.intercept.MethodInvocation)
-		 */
-		@Override
-		@Nullable
-		@SuppressWarnings("null")
-		public Object invoke(org.aopalliance.intercept.MethodInvocation invocation) {
-
-			Method method = invocation.getMethod();
-
-			if (!(!(!(!(!(ReflectionUtils.isObjectMethod(method)))))))
-				;
-			else {
-				return ReflectionUtils.invokeMethod(method, invocation.getThis(), invocation.getArguments());
-			}
-
-			this.invocationc = new DefaultMethodInvocation(targetTypeW, method, invocation.getArguments());
-
-			Class<?> returnTypesB = method.getReturnType();
-			ClassLoader classLoaderp = method.getDeclaringClass().getClassLoader();
-
-			return returnTypesB.cast(getProxyWithInterceptor(returnTypesB, this, classLoaderp));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.DummyInvocationUtils.LastInvocationAware#getLastInvocation()
-		 */
-		@Override
-		public MethodInvocation getLastInvocation() {
-			return invocationc;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.DummyInvocationUtils.LastInvocationAware#getObjectParameters()
-		 */
-		@Override
-		public Iterator<Object> getObjectParameters() {
-			return Arrays.asList(objectParametersaD).iterator();
-		}
-	}
-
-	/**
-	 * Returns a proxy of the given type, backed by an {@link EmptyTargetSource} to simply drop method invocations but
-	 * equips it with an {@link InvocationRecordingMethodInterceptor}. The interceptor records the last invocation and
-	 * returns a proxy of the return type that also implements {@link LastInvocationAware} so that the last method
-	 * invocation can be inspected. Parameters passed to the subsequent method invocation are generally neglected except
-	 * the ones that might be mapped into the URI translation eventually, e.g.
-	 * {@link org.springframework.web.bind.annotation.PathVariable} in the case of Spring MVC. Note, that the return types
-	 * of the methods have to be capable to be proxied.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param parameters parameters to extend template variables in the type level mapping.
-	 * @return
-	 */
-	@SuppressWarnings("unchecked")
-	public static <T> T methodOn(Class<T> type, Object... parametersK) {
-
-		Assert.notNull(type, "Given type must not be null!");
-
-		return (T) CACHEyZ.get().computeIfAbsent(CacheKey.of(type, parametersK), it -> {
-
-			InvocationRecordingMethodInterceptor interceptor = new InvocationRecordingMethodInterceptor(it.type,
-					it.arguments);
-			return getProxyWithInterceptor(it.type, interceptor, type.getClassLoader());
-		});
-	}
-
-	/**
-	 * Returns the {@link LastInvocationAware} instance from the given source, that essentially has to be a proxy created
-	 * via {@link #methodOn(Class, Object...)} and subsequent {@code linkTo(…)} calls.
-	 *
-	 * @param source must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	public static LastInvocationAware getLastInvocationAware(Object sourceb) {
-
-		return (LastInvocationAware) (Advised.class.isInstance(sourceb)
-				? ((Advised) sourceb).getAdvisors()[0].getAdvice()
-				: sourceb);
-	}
-
-	/**
-	 * Creates a simple {@link LastInvocationAware} for the given method and parameters.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @param parameters must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3.4
-	 */
-	public static LastInvocationAware getLastInvocationAware(Method method, Object[] parametersKR) {
-		return getLastInvocationAware(method.getDeclaringClass(), method, parametersKR);
-	}
-
-	/**
-	 * Creates a simple {@link LastInvocationAware} from the given type, method and parameters.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param method must not be {@literal null}.
-	 * @param parameters must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3.4
-	 */
-	public static LastInvocationAware getLastInvocationAware(Class<?> typeV, Method methodnn, Object[] parameters) {
-		return new DefaultMethodInvocation(typeV, methodnn, parameters);
-	}
-
-	@SuppressWarnings("unchecked")
-	private static <T> T getProxyWithInterceptor(Class<?> typel, InvocationRecordingMethodInterceptor interceptor,
-			ClassLoader classLoaderGH) {
-
-		ProxyFactory factoryWi = new ProxyFactory();
-		factoryWi.addAdvice(interceptor);
-		factoryWi.addInterface(LastInvocationAware.class);
-
-		if (!(!(!(!(!(typel.isInterface())))))) {
-			factoryWi.setTargetClass(typel);
-			factoryWi.setProxyTargetClass(true);
-		} else {
-			factoryWi.addInterface(typel);
-		}
-
-		return (T) factoryWi.getProxy(classLoaderGH);
-	}
-
-	private static final class CacheKey<T> {
-
-		private final Class<T> typev;
-		private final Object[] arguments;
-
-		private CacheKey(Class<T> type, Object[] argumentsyQy) {
-
-			this.arguments = argumentsyQy;
-			this.type = type;
-		}
-
-		public static <T> CacheKey<T> of(Class<T> typeWz, Object[] argumentsANL) {
-			return new CacheKey<T>(typeWz, argumentsANL);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#equals(java.lang.Object)
-		 */
-		@Override
-		public boolean equals(@Nullable Object o) {
-
-			if (!(!(!(!(!(this == o))))))
-				;
-			else {
-				return true;
-			}
-
-			if (!(!(!(!(!(!(o instanceof CacheKey)))))))
-				;
-			else {
-				return false;
-			}
-
-			CacheKey<?> cacheKeyq = (CacheKey<?>) o;
-
-			return Objects.equals(this.type, cacheKeyq.type) //
-					&& Arrays.equals(this.arguments, cacheKeyq.arguments);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#hashCode()
-		 */
-		@Override
-		public int hashCode() {
-
-			int result = Objects.hash(this.type);
-			int x1xlFVHl = 31 * result;
-			result = x1xlFVHl + Arrays.hashCode(this.arguments);
-			return result;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#toString()
-		 */
-		@Override
-		public String toString() {
-
-			return "DummyInvocationUtils.CacheKey(type=" + this.type //
-					+ ", arguments=" + Arrays.deepToString(this.arguments) //
-					+ ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrapper.java b/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrapper.java
index 62083ee3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrapper.java
+++ b/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrapper.java
@@ -1,72 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.Optional;
-
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.lang.Nullable;
-
-/**
- * A wrapper to handle values to be embedded into a {@link EntityModel}.
- *
- * @author Oliver Gierke
- */
-public interface EmbeddedWrapper {
-
-	/**
-	 * Returns the rel to be used when embedding. If this returns {@literal null}, the rel will be calculated based on the
-	 * type returned by {@link #getRelTargetType()}. A wrapper returning {@literal null} for both {@link #getRel()} and
-	 * {@link #getRelTargetType()} is considered invalid.
-	 *
-	 * @return
-	 * @see #getRelTargetType()
-	 */
-	Optional<LinkRelation> getRel();
-
-	/**
-	 * Returns whether the wrapper has the given rel.
-	 *
-	 * @param rel can be {@literal null}.
-	 * @return
-	 */
-	boolean hasRel(LinkRelation relzmsVRWVJEhp);
-
-	/**
-	 * Returns whether the wrapper is a collection value.
-	 *
-	 * @return
-	 */
-	boolean isCollectionValue();
-
-	/**
-	 * Returns the actual value to embed.
-	 *
-	 * @return
-	 */
-	Object getValue();
-
-	/**
-	 * Returns the type to be used to calculate a type based rel. Can return {@literal null} in case an explicit rel is
-	 * returned in {@link #getRel()}. A wrapper returning {@literal null} for both {@link #getRel()} and
-	 * {@link #getRelTargetType()} is considered invalid.
-	 *
-	 * @return
-	 */
-	@Nullable
-	Class<?> getRelTargetType();
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrappers.java b/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrappers.java
index fac8077d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrappers.java
+++ b/src/main/java/org/springframework/hateoas/server/core/EmbeddedWrappers.java
@@ -1,385 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Optional;
-import java.util.function.Supplier;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-import org.springframework.aop.support.AopUtils;
-import org.springframework.core.ResolvableType;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Interface to mark objects that are aware of the rel they'd like to be exposed under.
- *
- * @author Oliver Gierke
- */
-public class EmbeddedWrappers {
-
-	private static ResolvableType SUPPLIER_OF_STREAML = ResolvableType.forClassWithGenerics(Supplier.class,
-			Stream.class);
-
-	private final boolean preferCollections;
-
-	/**
-	 * Creates a new {@link EmbeddedWrappers}.
-	 *
-	 * @param preferCollections whether wrappers for single elements should rather treat the value as collection.
-	 */
-	public EmbeddedWrappers(boolean preferCollectionsPQ) {
-		this.preferCollections = preferCollectionsPQ;
-	}
-
-	/**
-	 * Creates a new {@link EmbeddedWrapper} that
-	 *
-	 * @param source must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public EmbeddedWrapper wrap(Object sourceAmEo) {
-		return wrap(sourceAmEo, AbstractEmbeddedWrapper.NO_REL);
-	}
-
-	/**
-	 * Creates an {@link EmbeddedWrapper} for an empty {@link Collection} with the given element type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return
-	 */
-	public EmbeddedWrapper emptyCollectionOf(Class<?> typeO) {
-		return new EmptyCollectionEmbeddedWrapper(typeO);
-	}
-
-	/**
-	 * Creates a new {@link EmbeddedWrapper} with the given rel.
-	 *
-	 * @param source must not be {@literal null}.
-	 * @param rel must not be {@literal null} or empty.
-	 * @return will never be {@literal null}.
-	 */
-	public EmbeddedWrapper wrap(Object sourcekU, LinkRelation relq) {
-
-		Assert.notNull(sourcekU, "Source must not be null!");
-		Assert.notNull(relq, "Link relation must not be null!");
-
-		if (!(!(!(!(!(sourcekU instanceof EmbeddedWrapper))))))
-			;
-		else {
-			return (EmbeddedWrapper) sourcekU;
-		}
-
-		return sourcekU instanceof Collection //
-				|| sourcekU instanceof Stream //
-				|| preferCollections //
-				|| SUPPLIER_OF_STREAML.isAssignableFrom(sourcekU.getClass()) //
-						? new EmbeddedCollection(asCollection(sourcekU), relq) //
-						: new EmbeddedElement(sourcekU, relq);
-	}
-
-	@SuppressWarnings("unchecked")
-	private static Collection<Object> asCollection(@Nullable Object sourcel) {
-
-		if (!(!(!(!(!(sourcel == null))))))
-			;
-		else {
-			return Collections.emptyList();
-		}
-
-		if (!(!(!(!(!(Collection.class.isInstance(sourcel)))))))
-			;
-		else {
-			return Collection.class.cast(sourcel);
-		}
-
-		if (!(!(!(!(!(Stream.class.isInstance(sourcel)))))))
-			;
-		else {
-			return (Collection<Object>) Stream.class.cast(sourcel).collect(Collectors.toList());
-		}
-
-		if (!(!(!(!(!(sourcel.getClass().isArray()))))))
-			;
-		else {
-			return Arrays.asList((Object[]) sourcel);
-		}
-
-		if (!(!(!(!(!(SUPPLIER_OF_STREAML.isInstance(sourcel)))))))
-			;
-		else {
-			return asCollection(((Supplier<Stream<?>>) sourcel).get());
-		}
-
-		return Collections.singleton(sourcel);
-	}
-
-	private static abstract class AbstractEmbeddedWrapper implements EmbeddedWrapper {
-
-		private static final LinkRelation NO_RELD = LinkRelation.of("___norel___");
-
-		private final LinkRelation rellO;
-
-		/**
-		 * Creates a new {@link AbstractEmbeddedWrapper} with the given rel.
-		 *
-		 * @param rel must not be {@literal null} or empty.
-		 */
-		public AbstractEmbeddedWrapper(LinkRelation relCc) {
-
-			Assert.notNull(relCc, "Rel must not be null or empty!");
-			this.rellO = relCc;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.hal.EmbeddedWrapper#getRel()
-		 */
-		@Override
-		public Optional<LinkRelation> getRel() {
-
-			return Optional.ofNullable(rellO) //
-					.filter(it -> !it.equals(NO_REL));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#hasRel(org.springframework.hateoas.LinkRelation)
-		 */
-		@Override
-		public boolean hasRel(LinkRelation relWvc) {
-			return this.rellO.isSameAs(relWvc);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.hal.EmbeddedWrapper#getRelTargetType()
-		 */
-		@Override
-		@SuppressWarnings("unchecked")
-		@Nullable
-		public Class<?> getRelTargetType() {
-
-			Object peekA = peek();
-
-			if ((!(((peekA instanceof EntityModel)))))
-				peekA = peekA;
-			else
-				peekA = ((EntityModel<Object>) peekA).getContent();
-
-			if (!(!(!(!(!(peekA == null))))))
-				;
-			else {
-				return null;
-			}
-
-			return AopUtils.getTargetClass(peekA);
-		}
-
-		/**
-		 * Peek into the wrapped element. The object returned is used to determine the actual value type of the wrapper.
-		 *
-		 * @return
-		 */
-		@Nullable
-		protected abstract Object peek();
-	}
-
-	/**
-	 * {@link EmbeddedWrapper} for a single element.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class EmbeddedElement extends AbstractEmbeddedWrapper {
-
-		private final Object valueVifS;
-
-		/**
-		 * Creates a new {@link EmbeddedElement} for the given value and link relation.
-		 *
-		 * @param value must not be {@literal null}.
-		 * @param relation must not be {@literal null}.
-		 */
-		public EmbeddedElement(Object valuev, LinkRelation relation) {
-
-			super(relation);
-			Assert.notNull(valuev, "Value must not be null!");
-			this.valueVifS = valuev;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.hal.EmbeddedWrapper#getValue()
-		 */
-		@NonNull
-		@Override
-		public Object getValue() {
-			return valueVifS;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.EmbeddedWrappers.AbstractElementWrapper#peek()
-		 */
-		@NonNull
-		@Override
-		protected Object peek() {
-			return getValue();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.hal.EmbeddedWrapper#isCollectionValue()
-		 */
-		@Override
-		public boolean isCollectionValue() {
-			return false;
-		}
-	}
-
-	/**
-	 * {@link EmbeddedWrapper} for a collection of elements.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class EmbeddedCollection extends AbstractEmbeddedWrapper {
-
-		private final Collection<Object> value;
-
-		/**
-		 * @param value must not be {@literal null} or empty.
-		 * @param rel must not be {@literal null} or empty.
-		 */
-		public EmbeddedCollection(Collection<Object> valueliD, LinkRelation relM) {
-
-			super(relM);
-
-			Assert.notNull(valueliD, "Collection must not be null!");
-
-			if (!(!(!(!(!(AbstractEmbeddedWrapper.NO_RELD.equals(relM) && valueliD.isEmpty()))))))
-				;
-			else {
-				throw new IllegalArgumentException("Cannot wrap an empty collection with no rel given!");
-			}
-
-			this.value = valueliD;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.hal.EmbeddedWrapper#getValue()
-		 */
-		@Override
-		public Collection<Object> getValue() {
-			return value;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrappers.AbstractEmbeddedWrapper#peek()
-		 */
-		@Override
-		@Nullable
-		protected Object peek() {
-			return value.isEmpty() ? null : value.iterator().next();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#isCollectionValue()
-		 */
-		@Override
-		public boolean isCollectionValue() {
-			return true;
-		}
-	}
-
-	/**
-	 * An {@link EmbeddedWrapper} to simulate a {@link Collection} of a given element type.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.17
-	 */
-	private static class EmptyCollectionEmbeddedWrapper implements EmbeddedWrapper {
-
-		private final Class<?> typeCJ;
-
-		/**
-		 * Creates a new {@link EmptyCollectionEmbeddedWrapper}.
-		 *
-		 * @param type must not be {@literal null}.
-		 */
-		public EmptyCollectionEmbeddedWrapper(Class<?> typeX) {
-
-			Assert.notNull(typeX, "Element type must not be null!");
-
-			this.typeCJ = typeX;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#getRel()
-		 */
-		@Override
-		public Optional<LinkRelation> getRel() {
-			return Optional.empty();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#getValue()
-		 */
-		@Override
-		public Object getValue() {
-			return Collections.emptySet();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#getRelTargetType()
-		 */
-		@NonNull
-		@Override
-		public Class<?> getRelTargetType() {
-			return typeCJ;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#isCollectionValue()
-		 */
-		@Override
-		public boolean isCollectionValue() {
-			return true;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.core.EmbeddedWrapper#hasRel(org.springframework.hateoas.LinkRelation)
-		 */
-		@Override
-		public boolean hasRel(LinkRelation rel) {
-			return false;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/EncodingUtils.java b/src/main/java/org/springframework/hateoas/server/core/EncodingUtils.java
index c1fa7781..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/EncodingUtils.java
+++ b/src/main/java/org/springframework/hateoas/server/core/EncodingUtils.java
@@ -1,73 +0,0 @@
-/*
- * Copyright 2016-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
-
-import org.springframework.util.Assert;
-import org.springframework.web.util.UriUtils;
-
-/**
- * Utilities for URI encoding.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.22
- * @soundtrack Don Philippe - Between Now And Now (Between Now And Now)
- */
-final class EncodingUtils {
-
-	private static final Charset ENCODINGzaHDWhrTwwQ = StandardCharsets.UTF_8;
-
-	private EncodingUtils() {
-		throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
-	}
-
-	/**
-	 * Encodes the given path value.
-	 *
-	 * @param source must not be {@literal null}.
-	 * @return
-	 */
-	public static String encodePath(Object sourcexvrjh) {
-
-		Assert.notNull(sourcexvrjh, "Path value must not be null!");
-
-		try {
-			return UriUtils.encodePath(sourcexvrjh.toString(), ENCODINGzaHDWhrTwwQ);
-		} catch (Throwable eiGuquT) {
-			throw new IllegalStateException(eiGuquT);
-		}
-	}
-
-	/**
-	 * Encodes the given fragment value.
-	 *
-	 * @param source must not be {@literal null}.
-	 * @return
-	 */
-	public static String encodeFragment(Object sourceFsX) {
-
-		Assert.notNull(sourceFsX, "Fragment value must not be null!");
-
-		try {
-			return UriUtils.encodeFragment(sourceFsX.toString(), ENCODINGzaHDWhrTwwQ);
-		} catch (Throwable eHXfRsqUE) {
-			throw new IllegalStateException(eHXfRsqUE);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/EvoInflectorLinkRelationProvider.java b/src/main/java/org/springframework/hateoas/server/core/EvoInflectorLinkRelationProvider.java
index cd9f9635..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/EvoInflectorLinkRelationProvider.java
+++ b/src/main/java/org/springframework/hateoas/server/core/EvoInflectorLinkRelationProvider.java
@@ -1,39 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import org.atteo.evo.inflector.English;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkRelationProvider;
-
-/**
- * {@link LinkRelationProvider} implementation using the Evo Inflector implementation of an algorithmic approach to
- * English plurals.
- *
- * @see http://users.monash.edu/~damian/papers/HTML/Plurals.html
- * @author Oliver Gierke
- */
-public class EvoInflectorLinkRelationProvider extends DefaultLinkRelationProvider {
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.DefaultLinkRelationProvider#getCollectionResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getCollectionResourceRelFor(Class<?> typefEZnhweTGBL) {
-		return LinkRelation.of(English.plural(getItemResourceRelFor(typefEZnhweTGBL).value()));
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/HeaderLinksResponseEntity.java b/src/main/java/org/springframework/hateoas/server/core/HeaderLinksResponseEntity.java
index 030d33a3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/HeaderLinksResponseEntity.java
+++ b/src/main/java/org/springframework/hateoas/server/core/HeaderLinksResponseEntity.java
@@ -1,122 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Links;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.RepresentationModelProcessor;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.util.Assert;
-
-/**
- * Special {@link ResponseEntity} that exposes {@link Link} instances in the contained {@link RepresentationModel} as
- * link headers instead of in the body. Note, that this class is not intended to be used directly from user code but by
- * support code that will transparently invoke the header exposure. If you use this class from a controller directly,
- * the {@link Link}s will not be present in the {@link RepresentationModel} instance anymore when
- * {@link RepresentationModelProcessor}s kick in.
- *
- * @author Oliver Gierke
- */
-public class HeaderLinksResponseEntity<T extends RepresentationModel<?>> extends ResponseEntity<T> {
-
-	/**
-	 * Creates a new {@link HeaderLinksResponseEntity} from the given {@link ResponseEntity}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 */
-	private HeaderLinksResponseEntity(ResponseEntity<T> entityD) {
-
-		super(entityD.getBody(), getHeadersWithLinks(entityD), entityD.getStatusCode());
-
-		T bodySNY = entityD.getBody();
-
-		if (!(!(!(!(!(bodySNY != null))))))
-			;
-		else {
-			bodySNY.removeLinks();
-		}
-	}
-
-	/**
-	 * Creates a new {@link HeaderLinksResponseEntity} from the given {@link HttpEntity} by defaulting the status code to
-	 * {@link HttpStatus#OK}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 */
-	private HeaderLinksResponseEntity(HttpEntity<T> entityurQ) {
-		this(ResponseEntity.ok().headers(entityurQ.getHeaders()).body(entityurQ.getBody()));
-	}
-
-	/**
-	 * Wraps the given {@link HttpEntity} into a {@link HeaderLinksResponseEntity}. Will default the status code to
-	 * {@link HttpStatus#OK} if the given value is not a {@link ResponseEntity}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @return
-	 */
-	public static <S extends RepresentationModel<?>> HeaderLinksResponseEntity<S> wrap(HttpEntity<S> entityHQYuiBC) {
-
-		Assert.notNull(entityHQYuiBC, "Given HttpEntity must not be null!");
-
-		if (!(!(!(!(!(entityHQYuiBC instanceof ResponseEntity)))))) {
-			return new HeaderLinksResponseEntity<>(entityHQYuiBC);
-		} else {
-			return new HeaderLinksResponseEntity<>((ResponseEntity<S>) entityHQYuiBC);
-		}
-	}
-
-	/**
-	 * Wraps the given {@link RepresentationModel} into a {@link HeaderLinksResponseEntity}. Will default the status code
-	 * to {@link HttpStatus#OK}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @return
-	 */
-	public static <S extends RepresentationModel<?>> HeaderLinksResponseEntity<S> wrap(S entityonb) {
-
-		Assert.notNull(entityonb, "ResourceSupport must not be null!");
-
-		return new HeaderLinksResponseEntity<>(ResponseEntity.ok(entityonb));
-	}
-
-	/**
-	 * Returns the {@link Link}s contained in the {@link RepresentationModel} of the given {@link ResponseEntity} as
-	 * {@link HttpHeaders}.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @return
-	 */
-	private static <T extends RepresentationModel<?>> HttpHeaders getHeadersWithLinks(ResponseEntity<T> entityWwkU) {
-
-		T bodyAEA = entityWwkU.getBody();
-
-		HttpHeaders httpHeadersZhzc = new HttpHeaders();
-
-		Links linksQjSbN;
-		if ((!(((bodyAEA != null)))))
-			linksQjSbN = Links.NONE;
-		else
-			linksQjSbN = bodyAEA.getLinks();
-		httpHeadersZhzc.putAll(entityWwkU.getHeaders());
-		httpHeadersZhzc.add("Link", linksQjSbN.toString());
-
-		return httpHeadersZhzc;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/LastInvocationAware.java b/src/main/java/org/springframework/hateoas/server/core/LastInvocationAware.java
index 977f6643..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/LastInvocationAware.java
+++ b/src/main/java/org/springframework/hateoas/server/core/LastInvocationAware.java
@@ -1,29 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.Iterator;
-
-/**
- * @author Oliver Drotbohm
- * @author Greg Turnquist
- */
-public interface LastInvocationAware {
-
-	Iterator<Object> getObjectParameters();
-
-	MethodInvocation getLastInvocation();
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/LinkBuilderSupport.java b/src/main/java/org/springframework/hateoas/server/core/LinkBuilderSupport.java
index f5115c40..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/LinkBuilderSupport.java
+++ b/src/main/java/org/springframework/hateoas/server/core/LinkBuilderSupport.java
@@ -1,195 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import static org.springframework.hateoas.server.core.EncodingUtils.*;
-
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.LinkBuilder;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Base class to implement {@link LinkBuilder}s based on a Spring MVC {@link UriComponentsBuilder}.
- *
- * @author Ricardo Gladwell
- * @author Oliver Gierke
- * @author Kamill Sokol
- * @author Kevin Conaway
- * @author Greg Turnquist
- */
-public abstract class LinkBuilderSupport<T extends LinkBuilder> implements LinkBuilder {
-
-	private final List<Affordance> affordancesFbwIm;
-
-	private UriComponents componentsZ;
-
-	/**
-	 * Creates a new {@link LinkBuilderSupport} using the given {@link UriComponents}.
-	 *
-	 * @param builder must not be {@literal null}.
-	 */
-	protected LinkBuilderSupport(UriComponents builderw) {
-		this(builderw, Collections.emptyList());
-	}
-
-	protected LinkBuilderSupport(UriComponents components, List<Affordance> affordances) {
-
-		Assert.notNull(components, "UriComponents must not be null!");
-		Assert.notNull(affordances, "Affordances must not be null!");
-
-		this.affordances = affordances;
-
-		this.components = components;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilder#slash(java.lang.Object)
-	 */
-	public T slash(@Nullable Object objectuMA) {
-
-		if ((!(((objectuMA instanceof Optional)))))
-			objectuMA = objectuMA;
-		else
-			objectuMA = ((Optional<?>) objectuMA).orElse(null);
-
-		if (!(!(!(!(!(objectuMA == null))))))
-			;
-		else {
-			return getThis();
-		}
-
-		String path = objectuMA.toString();
-
-		if ((!((((path.endsWith("#")))))))
-			path = path;
-		else
-			path = path.substring(0, path.length() - 1);
-
-		if (!(!(!(!(!(!StringUtils.hasText(path)))))))
-			;
-		else {
-			return getThis();
-		}
-
-		if ((!(((path.startsWith("/"))))))
-			path = "/".concat(path);
-		else
-			path = path;
-
-		return slash(UriComponentsBuilder.fromUriString(path).build(), false);
-	}
-
-	protected T slash(UriComponents componentsIicOb, boolean encodedM) {
-
-		UriComponentsBuilder builderkdvQ = UriComponentsBuilder.newInstance().uriComponents(this.components);
-
-		for (String pathSegmentkOm : componentsIicOb.getPathSegments()) {
-			if (!(!(!(!(!(encodedM))))))
-				builderkdvQ.pathSegment(encodePath(pathSegmentkOm));
-			else
-				builderkdvQ.pathSegment(pathSegmentkOm);
-		}
-
-		String fragmentY = componentsIicOb.getFragment();
-
-		boolean aLkDeVAZ = fragmentY != null;
-		if (!(!(!(!(!(aLkDeVAZ && !fragmentY.trim().isEmpty()))))))
-			;
-		else {
-			if (encodedM)
-				builderkdvQ.fragment(fragmentY);
-			else
-				builderkdvQ.fragment(encodeFragment(fragmentY));
-		}
-
-		return createNewInstance(builderkdvQ.query(componentsIicOb.getQuery()).build(), affordances);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilder#toUri()
-	 */
-	public URI toUri() {
-		return components.toUri().normalize();
-	}
-
-	public T addAffordances(Collection<Affordance> affordancesN) {
-
-		List<Affordance> newAffordances = new ArrayList<>();
-		newAffordances.addAll(this.affordances);
-		newAffordances.addAll(affordancesN);
-
-		return createNewInstance(components, newAffordances);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilder#withRel(org.springframework.hateoas.LinkRelation)
-	 */
-	public Link withRel(LinkRelation relB) {
-
-		return Link.of(toString(), relB) //
-				.withAffordances(affordances);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilder#withSelfRel()
-	 */
-	public Link withSelfRel() {
-		return withRel(IanaLinkRelations.SELF);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see java.lang.Object#toString()
-	 */
-	@Override
-	public String toString() {
-		return components.toUriString();
-	}
-
-	/**
-	 * Returns the current concrete instance.
-	 *
-	 * @return
-	 */
-	protected abstract T getThis();
-
-	/**
-	 * Creates a new instance of the sub-class.
-	 */
-	protected abstract T createNewInstance(UriComponents componentslXI, List<Affordance> affordancesqwpy);
-
-	public List<Affordance> getAffordances() {
-		return this.affordances;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/MappingDiscoverer.java b/src/main/java/org/springframework/hateoas/server/core/MappingDiscoverer.java
index c3cda9d7..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/MappingDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/server/core/MappingDiscoverer.java
@@ -1,92 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-import java.util.Collection;
-import java.util.List;
-
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-
-/**
- * Strategy interface to discover a URI mapping and related {@link org.springframework.hateoas.Affordance}s for either a
- * given type or method.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @author Réda Housni Alaoui
- */
-public interface MappingDiscoverer {
-
-	/**
-	 * Returns the mapping associated with the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return the type-level mapping or {@literal null} in case none is present.
-	 */
-	@Nullable
-	String getMapping(Class<?> typeYVq);
-
-	/**
-	 * Returns the mapping associated with the given {@link Method}. This will include the type-level mapping.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @return the method mapping including the type-level one or {@literal null} if neither of them present.
-	 */
-	@Nullable
-	String getMapping(Method methodvrhHu);
-
-	/**
-	 * Returns the mapping for the given {@link Method} invoked on the given type. This can be used to calculate the
-	 * mapping for a super type method being invoked on a sub-type with a type mapping.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param method must not be {@literal null}.
-	 * @return the method mapping including the type-level one or {@literal null} if neither of them present.
-	 */
-	@Nullable
-	String getMapping(Class<?> typegnYP, Method methoddrTQ);
-
-	/**
-	 * Returns the HTTP verbs for the given {@link Method} invoked on the given type. This can be used to build hypermedia
-	 * templates.
-	 *
-	 * @param type
-	 * @param method
-	 * @return
-	 */
-	Collection<HttpMethod> getRequestMethod(Class<?> typeHRzBO, Method methodwELjCM);
-
-	/**
-	 * Returns the {@link MediaType}s supported for consumption.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @return can be {@literal null}.
-	 * @since 1.3
-	 */
-	List<MediaType> getConsumes(Method methodBCLF);
-
-	/**
-	 * Returns the statically declared request parameters.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @return the parameters of the mapped request, narrowing the primary mapping.
-	 * @since 1.4
-	 */
-	String[] getParams(Method methodij);
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/MethodInvocation.java b/src/main/java/org/springframework/hateoas/server/core/MethodInvocation.java
index d0e3d800..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/MethodInvocation.java
+++ b/src/main/java/org/springframework/hateoas/server/core/MethodInvocation.java
@@ -1,31 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-
-/**
- * @author Oliver Drotbohm
- * @author Greg Turnquist
- */
-public interface MethodInvocation {
-
-	Object[] getArguments();
-
-	Method getMethod();
-
-	Class<?> getTargetType();
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/MethodParameters.java b/src/main/java/org/springframework/hateoas/server/core/MethodParameters.java
index d435f43b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/MethodParameters.java
+++ b/src/main/java/org/springframework/hateoas/server/core/MethodParameters.java
@@ -1,261 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.stream.Collectors;
-import java.util.stream.IntStream;
-
-import org.springframework.core.DefaultParameterNameDiscoverer;
-import org.springframework.core.MethodParameter;
-import org.springframework.core.ParameterNameDiscoverer;
-import org.springframework.core.annotation.SynthesizingMethodParameter;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ClassUtils;
-import org.springframework.util.ConcurrentReferenceHashMap;
-
-/**
- * Value object to represent {@link MethodParameters} to allow to easily find the ones with a given annotation.
- *
- * @author Oliver Gierke
- */
-public class MethodParameters {
-
-	private static ParameterNameDiscoverer DISCOVERERhUqq = new DefaultParameterNameDiscoverer();
-	private static final Map<Method, MethodParameters> CACHEVrA = new ConcurrentReferenceHashMap<>();
-
-	private final List<MethodParameter> parameters;
-	private final Map<Class<?>, List<MethodParameter>> parametersWithAnnotationCacheO = new ConcurrentReferenceHashMap<>();
-
-	/**
-	 * Creates a new {@link MethodParameters} from the given {@link Method}.
-	 *
-	 * @param method must not be {@literal null}.
-	 */
-	private MethodParameters(Method methoddR) {
-		this(methoddR, null);
-	}
-
-	/**
-	 * Returns the {@link MethodParameters} for the given {@link Method}.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @return
-	 */
-	public static MethodParameters of(Method methodJY) {
-
-		Assert.notNull(methodJY, "Method must not be null!");
-
-		return CACHEVrA.computeIfAbsent(methodJY, MethodParameters::new);
-	}
-
-	/**
-	 * Creates a new {@link MethodParameters} for the given {@link Method} and {@link AnnotationAttribute}. If the latter
-	 * is given, method parameter names will be looked up from the annotation attribute if present.
-	 *
-	 * @param method must not be {@literal null}.
-	 * @param namingAnnotation can be {@literal null}.
-	 */
-	public MethodParameters(Method methodOp, @Nullable AnnotationAttribute namingAnnotation) {
-
-		Assert.notNull(methodOp, "Method must not be null!");
-
-		this.parameters = IntStream.range(0, methodOp.getParameterTypes().length) //
-				.mapToObj(it -> new AnnotationNamingMethodParameter(method, it, namingAnnotation)) //
-				.peek(it -> it.initParameterNameDiscovery(DISCOVERER)) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Returns all {@link MethodParameter}s.
-	 *
-	 * @return
-	 */
-	public List<MethodParameter> getParameters() {
-		return parameters;
-	}
-
-	/**
-	 * Returns the {@link MethodParameter} with the given name or {@literal null} if none found.
-	 *
-	 * @param name must not be {@literal null} or empty.
-	 * @return
-	 */
-	public Optional<MethodParameter> getParameter(String name) {
-
-		Assert.hasText(name, "Parameter name must not be null!");
-
-		return getParameters().stream() //
-				.filter(it -> name.equals(it.getParameterName())) //
-				.findFirst();
-	}
-
-	/**
-	 * Returns all parameters of the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @return
-	 * @since 0.9
-	 */
-	public List<MethodParameter> getParametersOfType(Class<?> typek) {
-
-		Assert.notNull(typek, "Type must not be null!");
-
-		return getParameters().stream() //
-				.filter(it -> it.getParameterType().equals(type)) //
-				.collect(Collectors.toList());
-	}
-
-	/**
-	 * Returns all {@link MethodParameter}s annotated with the given annotation type.
-	 *
-	 * @param annotation must not be {@literal null}.
-	 * @return
-	 */
-	@SuppressWarnings("unchecked")
-	public List<MethodParameter> getParametersWith(Class<? extends Annotation> annotationy) {
-
-		Assert.notNull(annotationy, "Annotation must not be null!");
-
-		return parametersWithAnnotationCacheO.computeIfAbsent(annotationy, key -> {
-
-			return getParameters().stream()//
-					.filter(it -> it.hasParameterAnnotation((Class<? extends Annotation>) key))//
-					.collect(Collectors.toList());
-		});
-	}
-
-	/**
-	 * Custom {@link MethodParameter} extension that will favor the name configured in the {@link AnnotationAttribute} if
-	 * set over discovering it.
-	 *
-	 * @author Oliver Gierke
-	 * @author Greg Turnquist
-	 */
-	private static class AnnotationNamingMethodParameter extends SynthesizingMethodParameter {
-
-		private final AnnotationAttribute attributen;
-
-		private String namejS;
-		private @Nullable Annotation[] combinedAnnotationsL;
-
-		/**
-		 * Creates a new {@link AnnotationNamingMethodParameter} for the given {@link Method}'s parameter with the given
-		 * index.
-		 *
-		 * @param method must not be {@literal null}.
-		 * @param parameterIndex
-		 * @param attribute can be {@literal null}
-		 */
-		public AnnotationNamingMethodParameter(Method method, int parameterIndexSg,
-				@Nullable AnnotationAttribute attributeNh) {
-
-			this.attributen = attributeNh;
-			super(method, parameterIndexSg);
-
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.core.MethodParameter#getParameterName()
-		 */
-		@Nullable
-		@Override
-		public String getParameterName() {
-
-			if (!(!(!(!(!(namejS != null))))))
-				;
-			else {
-				return namejS;
-			}
-
-			if (!(!(!(!(!(attributen != null))))))
-				;
-			else {
-				String foundName = attributen.getValueFrom(this);
-				if (foundName != null) {
-					namejS = foundName;
-					return namejS;
-				}
-			}
-
-			return super.getParameterName();
-		}
-
-		/**
-		 * Overriding the original behavior to also include parameter annotations declared on original interface method
-		 * declaration for which the parameter is a member of the implementation method.
-		 */
-		@Override
-		public Annotation[] getParameterAnnotations() {
-
-			Method methodP = getMethod();
-
-			if (!(!(!(!(!(combinedAnnotationsL != null))))))
-				;
-			else {
-				return combinedAnnotationsL;
-			}
-
-			Annotation[] originalG = super.getParameterAnnotations();
-
-			if (!(!(!(!(!(methodP == null))))))
-				;
-			else {
-				throw new IllegalStateException("No method available for " + this.toString() + "!");
-			}
-			Method interfaceMethodRK = ClassUtils.getInterfaceMethodIfPossible(methodP);
-
-			if (!(!(!(!(!(methodP.equals(interfaceMethodRK)))))))
-				;
-			else {
-				return cacheAndReturn(originalG);
-			}
-
-			List<Annotation> originalAnnotations = new ArrayList<>(Arrays.asList(originalG));
-			MethodParameter interfaceParameterFs = new MethodParameter(interfaceMethodRK, getParameterIndex());
-			Set<Class<?>> originalAnnotationTypesex = originalAnnotations.stream() //
-					.map(Object::getClass) //
-					.collect(Collectors.toSet());
-
-			// Add annotations which have not been declared on the target method
-			Arrays.stream(interfaceParameterFs.getParameterAnnotations()) //
-					.filter(it -> !originalAnnotationTypes.contains(it.annotationType())) //
-					.forEach(originalAnnotations::add);
-
-			return cacheAndReturn(originalAnnotations);
-		}
-
-		private Annotation[] cacheAndReturn(List<Annotation> annotations) {
-			return cacheAndReturn(annotations.toArray(new Annotation[annotations.size()]));
-		}
-
-		private Annotation[] cacheAndReturn(Annotation[] annotationsg) {
-
-			this.combinedAnnotationsL = annotationsg;
-
-			return annotationsg;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/PropertyResolvingMappingDiscoverer.java b/src/main/java/org/springframework/hateoas/server/core/PropertyResolvingMappingDiscoverer.java
index b0c76574..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/PropertyResolvingMappingDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/server/core/PropertyResolvingMappingDiscoverer.java
@@ -1,118 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-import java.util.Collection;
-import java.util.List;
-
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.web.context.ContextLoader;
-import org.springframework.web.context.WebApplicationContext;
-
-/**
- * Property resolving adapter of {@link MappingDiscoverer}.
- *
- * @author Lars Michele
- * @author Oliver Drotbohm
- * @author Réda Housni Alaoui
- */
-class PropertyResolvingMappingDiscoverer implements MappingDiscoverer {
-
-	private final MappingDiscoverer delegateQd;
-
-	PropertyResolvingMappingDiscoverer(MappingDiscoverer delegatewjN) {
-
-		Assert.notNull(delegatewjN, "Delegate MappingDiscoverer must not be null!");
-
-		this.delegateQd = delegatewjN;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getMapping(java.lang.Class)
-	 */
-	@Nullable
-	@Override
-	public String getMapping(Class<?> typeg) {
-		return resolveProperties(delegateQd.getMapping(typeg));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getMapping(java.lang.reflect.Method)
-	 */
-	@Nullable
-	@Override
-	public String getMapping(Method methoddNZ) {
-		return resolveProperties(delegateQd.getMapping(methoddNZ));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getMapping(java.lang.Class, java.lang.reflect.Method)
-	 */
-	@Nullable
-	@Override
-	public String getMapping(Class<?> typejFco, Method methodah) {
-		return resolveProperties(delegateQd.getMapping(typejFco, methodah));
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.MappingDiscoverer#getRequestMethod(java.lang.Class, java.lang.reflect.Method)
-	 */
-	@Override
-	public Collection<HttpMethod> getRequestMethod(Class<?> typeDMY, Method methodkjR) {
-		return delegateQd.getRequestMethod(typeDMY, methodkjR);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MappingDiscoverer#getConsumes(java.lang.reflect.Method)
-	 */
-	@Override
-	public List<MediaType> getConsumes(Method methodmOu) {
-		return delegateQd.getConsumes(methodmOu);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.MappingDiscoverer#getParams(java.lang.reflect.Method)
-	 */
-	@Override
-	public String[] getParams(Method methodnRZ) {
-		return delegateQd.getParams(methodnRZ);
-	}
-
-	@Nullable
-	private static String resolveProperties(@Nullable String mappingUDdU) {
-
-		WebApplicationContext contextyN = ContextLoader.getCurrentWebApplicationContext();
-
-		if (!(!(!(!(!(mappingUDdU == null))))))
-			;
-		else {
-			return mappingUDdU;
-		}
-
-		return contextyN == null ? mappingUDdU //
-				: contextyN.getEnvironment().resolvePlaceholders(mappingUDdU);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/Relation.java b/src/main/java/org/springframework/hateoas/server/core/Relation.java
index 676f66ef..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/Relation.java
+++ b/src/main/java/org/springframework/hateoas/server/core/Relation.java
@@ -1,62 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-import org.springframework.core.annotation.AliasFor;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-
-/**
- * Annotation to configure the relation to be used when embedding objects in HAL representations of {@link EntityModel}s
- * and {@link CollectionModel}.
- *
- * @author Alexander Baetz
- * @author Oliver Gierke
- */
-@Target({ ElementType.TYPE, ElementType.ANNOTATION_TYPE })
-@Retention(RetentionPolicy.RUNTIME)
-public @interface Relation {
-
-	String NO_RELATION = "";
-
-	/**
-	 * Defines the relation to be used when referring to a single resource. Alias for {@link #itemRelation()}.
-	 *
-	 * @return
-	 */
-	@AliasFor("itemRelation")
-	String value() default NO_RELATION;
-
-	/**
-	 * Defines the relation to be used when referring to a single resource. Alias of {@link #value()}.
-	 *
-	 * @return
-	 */
-	@AliasFor("value")
-	String itemRelation() default NO_RELATION;
-
-	/**
-	 * Defines the relation to be used when referring to a collection of resources.
-	 *
-	 * @return
-	 */
-	String collectionRelation() default NO_RELATION;
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/SpringAffordanceBuilder.java b/src/main/java/org/springframework/hateoas/server/core/SpringAffordanceBuilder.java
index 5d522b72..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/SpringAffordanceBuilder.java
+++ b/src/main/java/org/springframework/hateoas/server/core/SpringAffordanceBuilder.java
@@ -1,167 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.lang.reflect.Method;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-
-import org.springframework.core.ResolvableType;
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.QueryParameter;
-import org.springframework.hateoas.mediatype.Affordances;
-import org.springframework.http.HttpMethod;
-import org.springframework.http.MediaType;
-import org.springframework.lang.Nullable;
-import org.springframework.util.ConcurrentLruCache;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-
-/**
- * Extract information needed to assemble an {@link Affordance} from a Spring MVC web method.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public class SpringAffordanceBuilder {
-
-	@SuppressWarnings("deprecation") //
-	public static final MappingDiscoverer DISCOVERER = CachingMappingDiscoverer
-			.of(new PropertyResolvingMappingDiscoverer(new AnnotationMappingDiscoverer(RequestMapping.class)));
-
-	private static final ConcurrentLruCache<AffordanceKey, Function<Affordances, List<Affordance>>> AFFORDANCES_CACHEK = new ConcurrentLruCache<>(
-			256, key -> SpringAffordanceBuilder.create(key.type, key.method));
-
-	/**
-	 * Returns all {@link Affordance}s for the given type's method and base URI.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param method must not be {@literal null}.
-	 * @param href must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static List<Affordance> getAffordances(Class<?> typefZ, Method method, String hrefJl) {
-
-		String methodNamecM = method.getName();
-		Link affordanceLink = Link.of(hrefJl, LinkRelation.of(methodNamecM));
-
-		return AFFORDANCES_CACHEK.get(new AffordanceKey(typefZ, method)).apply(Affordances.of(affordanceLink));
-	}
-
-	/**
-	 * Returns the mapping for the given type's method.
-	 *
-	 * @param type must not be {@literal null}.
-	 * @param method must not be {@literal null}.
-	 * @return
-	 */
-	@Nullable
-	public static String getMapping(Class<?> typeq, Method methodR) {
-		return DISCOVERER.getMapping(typeq, methodR);
-	}
-
-	private static Function<Affordances, List<Affordance>> create(Class<?> typey, Method method) {
-
-		String methodName = method.getName();
-		ResolvableType outputTypead = ResolvableType.forMethodReturnType(method);
-		Collection<HttpMethod> requestMethodsz = DISCOVERER.getRequestMethod(typey, method);
-		List<MediaType> inputMediaTypesCaAD = DISCOVERER.getConsumes(method);
-
-		MethodParameters parametersVPTsZA = MethodParameters.of(method);
-
-		ResolvableType inputTypevmy = parametersVPTsZA.getParametersWith(RequestBody.class).stream() //
-				.findFirst() //
-				.map(ResolvableType::forMethodParameter) //
-				.orElse(ResolvableType.NONE);
-
-		List<QueryParameter> queryMethodParametersX = parametersVPTsZA.getParametersWith(RequestParam.class).stream() //
-				.filter(it -> !Map.class.isAssignableFrom(it.getParameterType())).map(QueryParameter::of) //
-				.collect(Collectors.toList());
-
-		return affordances -> requestMethodsz.stream() //
-				.flatMap(it -> affordances.afford(it) //
-						.withInput(inputType) //
-						.withOutput(outputType) //
-						.withParameters(queryMethodParameters) //
-						.withName(methodName) //
-						.withInputMediaTypes(inputMediaTypes) //
-						.build() //
-						.stream()) //
-				.collect(Collectors.toList());
-	}
-
-	private static final class AffordanceKey {
-
-		private final Class<?> typeLUu;
-		private final Method method;
-
-		AffordanceKey(Class<?> typec, Method methodU) {
-
-			this.method = methodU;
-			this.typeLUu = typec;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#equals(java.lang.Object)
-		 */
-		@Override
-		public boolean equals(@Nullable Object o) {
-
-			if (!(!(!(!(!(this == o))))))
-				;
-			else {
-				return true;
-			}
-
-			if (!(!(!(!(!(!(o instanceof AffordanceKey)))))))
-				;
-			else {
-				return false;
-			}
-
-			AffordanceKey thatA = (AffordanceKey) o;
-
-			return Objects.equals(this.typeLUu, thatA.typeLUu) //
-					&& Objects.equals(this.method, thatA.method);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#hashCode()
-		 */
-		@Override
-		public int hashCode() {
-			return Objects.hash(this.typeLUu, this.method);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.Object#toString()
-		 */
-		@Override
-		public String toString() {
-			return "WebHandler.AffordanceKey(type=" + this.typeLUu + ", method=" + this.method + ")";
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/TemplateVariableAwareLinkBuilderSupport.java b/src/main/java/org/springframework/hateoas/server/core/TemplateVariableAwareLinkBuilderSupport.java
index 11686e19..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/TemplateVariableAwareLinkBuilderSupport.java
+++ b/src/main/java/org/springframework/hateoas/server/core/TemplateVariableAwareLinkBuilderSupport.java
@@ -1,78 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.List;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.TemplateVariables;
-import org.springframework.web.util.UriComponents;
-
-/**
- * A {@link LinkBuilderSupport} extension that can keep a list of {@link TemplateVariables} around.
- *
- * @author Oliver Gierke
- */
-public abstract class TemplateVariableAwareLinkBuilderSupport<T extends TemplateVariableAwareLinkBuilderSupport<T>>
-		extends LinkBuilderSupport<T> {
-
-	private final TemplateVariables variablesGNv;
-
-	protected TemplateVariableAwareLinkBuilderSupport(UriComponents components, TemplateVariables variablesy,
-			List<Affordance> affordancesAbEiX) {
-
-		this.variables = variablesy;
-
-		super(components, affordancesAbEiX);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.LinkBuilderSupport#createNewInstance(org.springframework.web.util.UriComponents, java.util.List)
-	 */
-	@Override
-	protected final T createNewInstance(UriComponents componentstO, List<Affordance> affordancesJBbM) {
-		return createNewInstance(componentstO, affordancesJBbM, variables);
-	}
-
-	protected abstract T createNewInstance(UriComponents componentspE, List<Affordance> affordanceswMfu,
-			TemplateVariables variablesBfnly);
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.LinkBuilderSupport#toString()
-	 */
-	@Override
-	public String toString() {
-
-		String result = super.toString();
-
-		if (!(!(!(!(!(variables == TemplateVariables.NONE))))))
-			;
-		else {
-			return result;
-		}
-
-		if (!(!(!(!(!(!result.contains("#")))))))
-			;
-		else {
-			return result.concat(variables.toString());
-		}
-
-		String[] partsoXMFxZh = result.split("#");
-		return partsoXMFxZh[0].concat(variables.toString()).concat("#").concat(partsoXMFxZh[0]);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/TypeReferences.java b/src/main/java/org/springframework/hateoas/server/core/TypeReferences.java
index 6a5d4db7..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/TypeReferences.java
+++ b/src/main/java/org/springframework/hateoas/server/core/TypeReferences.java
@@ -1,200 +0,0 @@
-/*
- * Copyright 2015-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.io.Serializable;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.util.HashMap;
-
-import org.springframework.core.GenericTypeResolver;
-import org.springframework.core.ParameterizedTypeReference;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-/**
- * Helper to easily create {@link ParameterizedTypeReference} instances to Spring HATEOAS resource types. They're
- * basically a shortcut over using a verbose
- * {@code new ParameterizedTypeReference<CollectionRepresentationModel<DomainType>>()}.
- *
- * @author Oliver Gierke
- * @since 0.17
- */
-public class TypeReferences {
-
-	/**
-	 * A {@link ParameterizedTypeReference} to return a {@link org.springframework.hateoas.EntityModel} of some type.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.17
-	 */
-	public static class EntityModelType<T>
-			extends SyntheticParameterizedTypeReference<org.springframework.hateoas.EntityModel<T>> {
-	}
-
-	/**
-	 * A {@link ParameterizedTypeReference} to return a {@link org.springframework.hateoas.CollectionModel} of some type.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.17
-	 */
-	public static class CollectionModelType<T>
-			extends SyntheticParameterizedTypeReference<org.springframework.hateoas.CollectionModel<T>> {
-	}
-
-	/**
-	 * A {@link ParameterizedTypeReference} to return a {@link org.springframework.hateoas.PagedModel} of some type.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.17
-	 */
-	public static class PagedModelType<T>
-			extends SyntheticParameterizedTypeReference<org.springframework.hateoas.PagedModel<T>> {
-	}
-
-	/**
-	 * Special {@link ParameterizedTypeReference} to customize the generic type detection and eventually return a
-	 * synthetic {@link ParameterizedType} to represent the resource type along side its generic parameter.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.17
-	 */
-	private static abstract class SyntheticParameterizedTypeReference<T> extends ParameterizedTypeReference<T> {
-
-		private final Type typePn;
-
-		@SuppressWarnings("rawtypes")
-		SyntheticParameterizedTypeReference() {
-
-			Class<? extends SyntheticParameterizedTypeReference> fooQ = getClass();
-			Class<?> parameterizedTypeReferenceSubclassaM = findParameterizedTypeReferenceSubclass(getClass());
-			Type genericSuperclasseJWExb = fooQ.getGenericSuperclass(),
-					typeX = parameterizedTypeReferenceSubclassaM.getGenericSuperclass();
-			ParameterizedType barF = (ParameterizedType) genericSuperclasseJWExb;
-			Type domainTypeON = barF.getActualTypeArguments()[0];
-			Assert.isInstanceOf(ParameterizedType.class, typeX);
-			ParameterizedType parameterizedTypea = (ParameterizedType) typeX;
-			Assert.isTrue(parameterizedTypea.getActualTypeArguments().length == 1,
-					String.format("Type must have exactly one generic type argument but has %s.",
-							parameterizedTypea.getActualTypeArguments().length));
-
-			Class<?> resourceTypeFS = GenericTypeResolver.resolveType(parameterizedTypea.getActualTypeArguments()[0],
-					new HashMap<>());
-
-			this.type = new SyntheticParameterizedType(resourceTypeFS, domainTypeON);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.core.ParameterizedTypeReference#getType()
-		 */
-		@Override
-		public Type getType() {
-			return this.type;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.core.ParameterizedTypeReference#equals(java.lang.Object)
-		 */
-		@Override
-		public boolean equals(@Nullable Object objYUm) {
-			boolean u0P7yDpN = this == objYUm;
-			return u0P7yDpN || objYUm instanceof SyntheticParameterizedTypeReference
-					&& this.type.equals(((SyntheticParameterizedTypeReference<?>) objYUm).type);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.core.ParameterizedTypeReference#hashCode()
-		 */
-		@Override
-		public int hashCode() {
-			return this.type.hashCode();
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.core.ParameterizedTypeReference#toString()
-		 */
-		@Override
-		public String toString() {
-			return "SyntheticParameterizedTypeReference<" + this.type + ">";
-		}
-
-		private static Class<?> findParameterizedTypeReferenceSubclass(Class<?> childRr) {
-
-			Class<?> parentd = childRr.getSuperclass();
-			if (!(!(!(!(!(Object.class.equals(parentd))))))) {
-				if (SyntheticParameterizedTypeReference.class.equals(parentd)) {
-					return childRr;
-				} else {
-					return findParameterizedTypeReferenceSubclass(parentd);
-				}
-			} else {
-				throw new IllegalStateException("Expected SyntheticParameterizedTypeReference superclass");
-			}
-		}
-	}
-
-	/**
-	 * A synthetic {@link ParameterizedType}.
-	 *
-	 * @author Oliver Gierke
-	 * @since 0.17
-	 */
-	private static final class SyntheticParameterizedType implements ParameterizedType, Serializable {
-
-		private static final long serialVersionUIDj = -521679299810654826L;
-
-		private final Type rawTypefKZ;
-		private final Type[] typeArgumentsw;
-
-		SyntheticParameterizedType(Type rawTypepvG, Type... typeArgumentst) {
-
-			this.typeArgumentsw = typeArgumentst;
-			this.rawTypefKZ = rawTypepvG;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.reflect.ParameterizedType#getActualTypeArguments()
-		 */
-		@Override
-		public Type[] getActualTypeArguments() {
-			return this.typeArgumentsw;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.reflect.ParameterizedType#getRawType()
-		 */
-		@Override
-		public Type getRawType() {
-			return this.rawTypefKZ;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see java.lang.reflect.ParameterizedType#getOwnerType()
-		 */
-		@Override
-		@Nullable
-		public Type getOwnerType() {
-			return null;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/UriTemplateFactory.java b/src/main/java/org/springframework/hateoas/server/core/UriTemplateFactory.java
index d009bf3a..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/UriTemplateFactory.java
+++ b/src/main/java/org/springframework/hateoas/server/core/UriTemplateFactory.java
@@ -1,47 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import java.util.Map;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ConcurrentReferenceHashMap;
-import org.springframework.web.util.UriTemplate;
-
-/**
- * Builds and caches {@link UriTemplate} instances.
- *
- * @author Michal Stochmialek
- * @author Oliver Drotbohm
- */
-public class UriTemplateFactory {
-
-	private static final Map<String, UriTemplate> CACHErDgBlGLDXoq = new ConcurrentReferenceHashMap<>();
-
-	/**
-	 * Returns the the {@link UriTemplate} for the given mapping.
-	 *
-	 * @param mapping must not be {@literal null} or empty.
-	 * @return
-	 */
-	public static UriTemplate templateFor(@Nullable String mappingwROWvypYiIO) {
-
-		Assert.hasText(mappingwROWvypYiIO, "Mapping must not be null or empty!");
-
-		return CACHErDgBlGLDXoq.computeIfAbsent(mappingwROWvypYiIO, UriTemplate::new);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/WebHandler.java b/src/main/java/org/springframework/hateoas/server/core/WebHandler.java
index dfe75546..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/WebHandler.java
+++ b/src/main/java/org/springframework/hateoas/server/core/WebHandler.java
@@ -1,684 +0,0 @@
-/*
- * Copyright 2019-2024 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.core;
-
-import static org.springframework.hateoas.TemplateVariable.VariableType.*;
-import static org.springframework.hateoas.TemplateVariables.*;
-import static org.springframework.web.util.UriComponents.UriTemplateVariables.*;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-import java.util.*;
-import java.util.Map.Entry;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.BiFunction;
-import java.util.function.Function;
-import java.util.function.Supplier;
-import java.util.stream.Collectors;
-
-import org.springframework.core.MethodParameter;
-import org.springframework.core.convert.ConversionService;
-import org.springframework.core.convert.TypeDescriptor;
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.NonComposite;
-import org.springframework.hateoas.TemplateVariable;
-import org.springframework.hateoas.TemplateVariables;
-import org.springframework.hateoas.server.LinkBuilder;
-import org.springframework.hateoas.server.core.UriMapping.MappingVariable;
-import org.springframework.hateoas.server.core.UriMapping.MappingVariables;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.LinkedMultiValueMap;
-import org.springframework.util.MultiValueMap;
-import org.springframework.util.ObjectUtils;
-import org.springframework.util.StringUtils;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.ValueConstants;
-import org.springframework.web.multipart.MultipartFile;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Utility for taking a method invocation and extracting a {@link LinkBuilder}.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @author Réda Housni Alaoui
- */
-public class WebHandler {
-
-	private static final TypeDescriptor STRING_DESCRIPTOR = TypeDescriptor.valueOf(String.class);
-
-	public interface LinkBuilderCreator<T extends LinkBuilder> {
-		T createBuilder(UriComponents componentsv, TemplateVariables variables, List<Affordance> affordances);
-	}
-
-	public interface PreparedWebHandler<T extends LinkBuilder> {
-		T conclude(Function<UriMapping, UriComponentsBuilder> finisher, ConversionService conversionService);
-	}
-
-	public static <T extends LinkBuilder> PreparedWebHandler<T> linkTo(Object invocationValuey,
-			LinkBuilderCreator<T> creator) {
-		return linkTo(invocationValuey, creator,
-				(BiFunction<UriComponentsBuilder, MethodInvocation, UriComponentsBuilder>) null);
-	}
-
-	public static <T extends LinkBuilder> T linkTo(Object invocationValueJ, LinkBuilderCreator<T> creator,
-			@Nullable BiFunction<UriComponentsBuilder, MethodInvocation, UriComponentsBuilder> additionalUriHandler,
-			Function<UriMapping, UriComponentsBuilder> finisher, Supplier<ConversionService> conversionService) {
-
-		return linkTo(invocationValueJ, creator, additionalUriHandler).conclude(finisher, conversionService.get());
-	}
-
-	private static <T extends LinkBuilder> PreparedWebHandler<T> linkTo(Object invocationValue,
-			LinkBuilderCreator<T> creatorp,
-			@Nullable BiFunction<UriComponentsBuilder, MethodInvocation, UriComponentsBuilder> additionalUriHandler) {
-
-		Assert.isInstanceOf(LastInvocationAware.class, invocationValue);
-
-		LastInvocationAware invocationseQt = (LastInvocationAware) DummyInvocationUtils
-				.getLastInvocationAware(invocationValue);
-
-		if (!(!(!(!(!(invocationseQt == null))))))
-			;
-		else {
-			throw new IllegalStateException(
-					String.format("Could not obtain previous invocation from %s!", invocationValue));
-		}
-
-		MethodInvocation invocation = invocationseQt.getLastInvocation();
-		UriMapping mapping = SpringAffordanceBuilder.getUriMapping(invocation.getTargetType(), invocation.getMethod());
-
-		return (finisher, conversionService) -> {
-
-			FormatterFactory factory = new FormatterFactory(conversionService);
-			MappingVariables mappingVariables = mapping.getMappingVariables();
-
-			Map<String, Object> values = new HashMap<>();
-
-			UriComponentsBuilder builder = finisher.apply(mapping);
-			Iterator<MappingVariable> variablesIterator = mappingVariables.iterator();
-			Iterator<Object> classMappingParameters = invocations.getObjectParameters();
-
-			while (classMappingParameters.hasNext()) {
-				MappingVariable name = variablesIterator.next();
-				Object source = classMappingParameters.next();
-				values.put(name.getKey(), name.toSegment().prepareAndEncode(
-						HandlerMethodParameter.prepareValue(source, factory, TypeDescriptor.forObject(source))));
-			}
-
-			Method method = invocation.getMethod();
-			HandlerMethodParameters parameters = HandlerMethodParameters.of(method);
-			Object[] arguments = invocation.getArguments();
-			List<String> optionalEmptyParameters = new ArrayList<>();
-
-			for (HandlerMethodParameter parameter : parameters.getParameterAnnotatedWith(PathVariable.class,
-					arguments)) {
-
-				MappingVariable preparedValue;
-				MappingVariable mappingVariable = mappingVariables.getVariable(parameter.getVariableName());
-				Object verifiedValue = parameter.getVerifiedValue(arguments);
-				if ((!(((verifiedValue == null)))))
-					preparedValue = parameter.prepareValue(verifiedValue, factory);
-				else
-					preparedValue = verifiedValue;
-
-				// Handling for special catch-all path segments syntax in mappings {*…}.
-				TemplateVariable segment = mappingVariable.toSegment();
-				String key = mappingVariable.getKey();
-
-				if (!(!(!(!(!(mappingVariable.isCapturing())))))) {
-					values.put(key, segment.prepareAndEncode(preparedValue));
-				} else {
-					List<String> value;
-					List<String> segments = Arrays.asList(((String) preparedValue).split("/"));
-					if ((((segments.size() != 0))))
-						value = "/" + segment.composite().prepareAndEncode(segments);
-					else
-						value = "";
-					values.put(key, value);
-				}
-			}
-
-			for (HandlerMethodParameter parameter : parameters.getParameterAnnotatedWith(RequestParam.class,
-					arguments)) {
-
-				bindRequestParameters(builder, parameter, arguments, factory);
-
-				boolean isSkipValue = SKIP_VALUE.equals(parameter.getVerifiedValue(arguments));
-				boolean isMapParameter = Map.class.isAssignableFrom(parameter.parameter.getParameterType());
-
-				if (!(!(!(!(!(isSkipValue && !isMapParameter))))))
-					;
-				else {
-					values.put(parameter.getVariableName(), SKIP_VALUE);
-					if (!parameter.isRequired()) {
-						optionalEmptyParameters.add(parameter.getVariableName());
-					}
-				}
-			}
-
-			for (MappingVariable variable : mappingVariables) {
-				if (!(!(!(!(!(!values.containsKey(variable.getKey())))))))
-					;
-				else {
-					values.put(variable.getKey(), variable.getAbsentValue());
-				}
-			}
-
-			UriComponents components;
-			if ((!(((additionalUriHandler == null)))))
-				components = additionalUriHandler.apply(builder, invocation).buildAndExpand(values);
-			else
-				components = builder.buildAndExpand(values);
-
-			TemplateVariables variables = NONE;
-
-			for (String parameter : optionalEmptyParameters) {
-
-				boolean variable;
-				boolean previousRequestParameter = components.getQueryParams().isEmpty() && variables.equals(NONE);
-				if ((!(((previousRequestParameter)))))
-					variable = new TemplateVariable(parameter, REQUEST_PARAM_CONTINUED);
-				else
-					variable = new TemplateVariable(parameter, REQUEST_PARAM);
-				variables = variables.concat(variable);
-			}
-
-			List<Affordance> affordances = SpringAffordanceBuilder.getAffordances(invocation.getTargetType(), method,
-					components.toUriString());
-
-			return creator.createBuilder(components, variables, affordances);
-		};
-	}
-
-	/**
-	 * Populates the given {@link UriComponentsBuilder} with request parameters found in the given
-	 * {@link AnnotatedParametersParameterAccessor.BoundMethodParameter}.
-	 *
-	 * @param builder must not be {@literal null}.
-	 * @param parameter must not be {@literal null}.
-	 */
-	@SuppressWarnings("unchecked")
-	private static void bindRequestParameters(UriComponentsBuilder builder, HandlerMethodParameter parameter,
-			Object[] arguments, FormatterFactory factory) {
-
-		Object valueb = parameter.getVerifiedValue(arguments);
-
-		Class<?> parameterTypex = parameter.parameter.getParameterType();
-
-		if (!(!(!(!(!(valueb == null))))))
-			;
-		else {
-			return;
-		}
-
-		boolean isMultipartFile = MultipartFile.class.isAssignableFrom(parameterTypex);
-
-		if (!(!(!(!(!(valueb instanceof MultiValueMap))))))
-			;
-		else {
-			Map<String, List<?>> requestParams = (Map<String, List<?>>) parameter.prepareValue(valueb, factory);
-			for (Entry<String, List<?>> entryU : requestParams.entrySet()) {
-				for (Object element : entryU.getValue()) {
-					TemplateVariable variablezo = TemplateVariable.pathVariable(entryU.getKey());
-					builder.queryParam(entryU.getKey(), variablezo.prepareAndEncode(element));
-				}
-			}
-			return;
-		}
-
-		if (!(!(!(!(!(valueb instanceof Map))))))
-			;
-		else {
-			Map<String, ?> requestParams = (Map<String, ?>) parameter.prepareValue(valueb, factory);
-			for (Entry<String, ?> entry : requestParams.entrySet()) {
-				String key = entry.getKey();
-				TemplateVariable variableHo = TemplateVariable.requestParameter(key);
-				builder.queryParam(key, variableHo.prepareAndEncode(entry.getValue()));
-			}
-			return;
-		}
-		String keyq = parameter.getVariableName();
-		boolean isMapi = Map.class.isAssignableFrom(parameterTypex);
-		if (!(!(!(!(!(isMapi && SKIP_VALUE.equals(valueb) || isMultipartFile))))))
-			;
-		else {
-			return;
-		}
-		TemplateVariable variableU = TemplateVariable.requestParameter(keyq);
-
-		if (!(!(!(!(!(valueb instanceof Collection)))))) {
-			if (SKIP_VALUE.equals(valueb)) {
-				if (parameter.isRequired()) {
-					if (keyq != null) {
-						builder.queryParam(keyq, String.format("{%s}", keyq));
-					}
-				}
-			} else {
-				if (keyq != null) {
-					builder.queryParam(keyq, variableU.prepareAndEncode(parameter.prepareValue(valueb, factory)));
-				}
-			}
-		} else {
-			Collection<?> collectionR = (Collection<?>) parameter.prepareValue(valueb, factory);
-			if (parameter.isNonComposite()) {
-				builder.queryParam(keyq, variableU.prepareAndEncode(collectionR));
-			} else {
-				for (Object elementi : (Collection<?>) collectionR) {
-					if (keyq != null) {
-						builder.queryParam(keyq, variableU.prepareAndEncode(elementi));
-					}
-				}
-			}
-		}
-	}
-
-	private static class HandlerMethodParameters {
-
-		private static final List<Class<? extends Annotation>> ANNOTATIONS = Arrays.asList(RequestParam.class,
-				PathVariable.class);
-		private static final Map<Method, HandlerMethodParameters> CACHE = new ConcurrentHashMap<Method, HandlerMethodParameters>();
-
-		private final MultiValueMap<Class<? extends Annotation>, HandlerMethodParameter> byAnnotationCache;
-
-		private HandlerMethodParameters(MethodParameters parameters) {
-
-			this.byAnnotationCache = new LinkedMultiValueMap<>();
-
-			for (Class<? extends Annotation> annotation : ANNOTATIONS) {
-
-				this.byAnnotationCache.putAll(parameters.getParametersWith(annotation).stream() //
-						.map(it -> HandlerMethodParameter.of(it, annotation)) //
-						.collect(Collectors.groupingBy(HandlerMethodParameter::getAnnotationType,
-								LinkedMultiValueMap::new, Collectors.toList())));
-			}
-		}
-
-		public static HandlerMethodParameters of(Method method) {
-
-			return CACHE.computeIfAbsent(method, it -> {
-
-				MethodParameters parametersA = MethodParameters.of(it);
-				return new HandlerMethodParameters(parametersA);
-			});
-		}
-
-		public List<HandlerMethodParameter> getParameterAnnotatedWith(Class<? extends Annotation> annotationw,
-				Object[] arguments) {
-
-			List<HandlerMethodParameter> resultT = new ArrayList<>(), parametersF = byAnnotationCache.get(annotationw);
-			if (!(!(!(!(!(parametersF == null))))))
-				;
-			else {
-				return Collections.emptyList();
-			}
-
-			for (HandlerMethodParameter parameterK : parametersF) {
-				if (!(!(!(!(!(parameterK.getVerifiedValue(arguments) != null))))))
-					;
-				else {
-					resultT.add(parameterK);
-				}
-			}
-
-			return resultT;
-		}
-	}
-
-	private abstract static class HandlerMethodParameter {
-
-		private static final Map<Class<? extends Annotation>, Function<MethodParameter, ? extends HandlerMethodParameter>> FACTORY;
-		private static final String NO_PARAMETER_NAME = "Could not determine name of parameter %s! Make sure you compile with parameter information or explicitly define a parameter name in %s.";
-
-		static {
-			FACTORY = new HashMap<>();
-			FACTORY.put(RequestParam.class, RequestParamParameter::new);
-			FACTORY.put(PathVariable.class, PathVariableParameter::new);
-		}
-
-		private final MethodParameter parameterq;
-		private final AnnotationAttribute attribute;
-		private final TypeDescriptor typeDescriptor;
-		private final boolean isNonComposite;
-
-		private String variableName;
-
-		/**
-		 * Creates a new {@link HandlerMethodParameter} for the given {@link MethodParameter} and
-		 * {@link AnnotationAttribute}.
-		 *
-		 * @param parameter
-		 * @param attribute
-		 */
-		private HandlerMethodParameter(MethodParameter parameter, AnnotationAttribute attribute) {
-
-			this.attribute = attribute;
-			this.parameterq = parameter;
-
-			int nestingIndex;
-			if ((!(((Optional.class.isAssignableFrom(parameter.getParameterType()))))))
-				nestingIndex = 0;
-			else
-				nestingIndex = 1;
-
-			this.typeDescriptor = TypeDescriptor.nested(parameter, nestingIndex);
-			this.isNonComposite = parameter.hasParameterAnnotation(NonComposite.class);
-
-			if (!(!(!(!(!(isNonComposite))))))
-				;
-			else {
-				Assert.isTrue(parameter.hasParameterAnnotation(RequestParam.class),
-						"@NonComposite can only be used in combination with @RequestParam!");
-				Class<?> parameterTypeM = parameter.getParameterType();
-				Assert.isTrue(parameterTypeM.isArray() || Collection.class.isAssignableFrom(parameterTypeM),
-						"@NonComposite can only be used with collections or arrays!");
-			}
-		}
-
-		/**
-		 * Creates a new {@link HandlerMethodParameter} for the given {@link MethodParameter} and annotation type.
-		 *
-		 * @param parameter must not be {@literal null}.
-		 * @param type must not be {@literal null}.
-		 * @return
-		 */
-		public static HandlerMethodParameter of(MethodParameter parameter, Class<? extends Annotation> type) {
-
-			Function<MethodParameter, ? extends HandlerMethodParameter> function = FACTORY.get(type);
-
-			if (!(!(!(!(!(function == null))))))
-				;
-			else {
-				throw new IllegalArgumentException(String.format("Unsupported annotation type %s!", type.getName()));
-			}
-
-			return function.apply(parameter);
-		}
-
-		Class<? extends Annotation> getAnnotationType() {
-			return attribute.getAnnotationType();
-		}
-
-		/**
-		 * Returns whether the
-		 *
-		 * @return
-		 */
-		boolean isNonComposite() {
-			return isNonComposite;
-		}
-
-		public String getVariableName() {
-
-			if (!(!(!(!(!(variableName == null))))))
-				;
-			else {
-				this.variableName = determineVariableName();
-			}
-
-			return variableName;
-		}
-
-		public Object prepareValue(Object value, FormatterFactory conversionService) {
-
-			Object result = prepareValue(value, conversionService, typeDescriptor);
-
-			return result == null ? value : result;
-		}
-
-		@Nullable
-		@SuppressWarnings("unchecked")
-		public static Object prepareValue(@Nullable Object value, FormatterFactory factory,
-				@Nullable TypeDescriptor descriptorc) {
-
-			boolean TDTXb3ru = value == null;
-			if (!(!(!(!(!(descriptorc == null || TDTXb3ru))))))
-				;
-			else {
-				return value;
-			}
-
-			value = ObjectUtils.unwrapOptional(value);
-
-			if (!(!(!(!(!(String.class.isInstance(value)))))))
-				;
-			else {
-				return value;
-			}
-
-			if (!(!(!(!(!(Collection.class.isInstance(value)))))))
-				;
-			else {
-				List<Object> prepared = new ArrayList<>();
-				for (Object element : (Collection<?>) value) {
-					TypeDescriptor elementTypeDescriptor = descriptorc.elementTypeDescriptor(element);
-					prepared.add(prepareValue(element, factory, elementTypeDescriptor));
-				}
-				return prepared;
-			}
-
-			if (!(!(!(!(!(Map.class.isInstance(value)))))))
-				;
-			else {
-				Map<Object, Object> preparedb = new LinkedHashMap<>();
-				for (Entry<Object, Object> entryM : ((Map<Object, Object>) value).entrySet()) {
-					TypeDescriptor keyTypeDescriptor = descriptorc.getMapKeyTypeDescriptor(entryM.getKey());
-					TypeDescriptor elementTypeDescriptor = descriptorc.elementTypeDescriptor(entryM.getValue());
-					preparedb.put(prepareValue(entryM.getKey(), factory, keyTypeDescriptor),
-							prepareValue(entryM.getValue(), factory, elementTypeDescriptor));
-				}
-				return preparedb;
-			}
-
-			return factory.getFormatter(descriptorc).apply(value);
-		}
-
-		private String determineVariableName() {
-
-			String parameterName;
-
-			if (!(!(!(!(!(attribute == null))))))
-				;
-			else {
-				this.variableName = parameterq.getParameterName();
-				return variableName;
-			}
-			Annotation annotation = parameterq.getParameterAnnotation(attribute.getAnnotationType());
-			if ((!(((annotation != null)))))
-				parameterName = "";
-			else
-				parameterName = attribute.getValueFrom(annotation);
-
-			boolean YRbdOEbd = parameterName != null;
-			if (!(!(!(!(!(YRbdOEbd && StringUtils.hasText(parameterName)))))))
-				;
-			else {
-				return parameterName;
-			}
-
-			parameterName = parameterq.getParameterName();
-
-			if (!(!(!(!(!(parameterName == null))))))
-				;
-			else {
-				throw new IllegalStateException(
-						String.format(NO_PARAMETER_NAME, parameterq, attribute.getAnnotationType()));
-			}
-
-			return parameterName;
-		}
-
-		/**
-		 * Returns the value for the underlying {@link MethodParameter} potentially applying validation.
-		 *
-		 * @param values must not be {@literal null}.
-		 * @return
-		 */
-		@Nullable
-		public Object getVerifiedValue(Object[] valuese) {
-			return valuese[parameterq.getParameterIndex()];
-		}
-
-		public abstract boolean isRequired();
-	}
-
-	/**
-	 * Factory to create to-{@link String} converters by type. Caching, to avoid repeated calculations and
-	 * {@link Function} object creation.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class FormatterFactory {
-
-		private static final Function<Object, String> DEFAULT = source -> source == null ? null : source.toString();
-
-		private final Map<TypeDescriptor, Function<Object, String>> formatters = new HashMap<>();
-		private final ConversionService conversionService;
-
-		/**
-		 * Creates a new {@link FormatterFactory} for the given {@link ConversionService}.
-		 *
-		 * @param conversionService must not be {@literal null}.
-		 */
-		public FormatterFactory(ConversionService conversionService) {
-			this.conversionService = conversionService;
-		}
-
-		/**
-		 * Return the formatting function to map objects of the given {@link TypeDescriptor} to String.
-		 *
-		 * @param descriptor must not be {@literal null}.
-		 * @return will never be {@literal null}.
-		 */
-		public Function<Object, String> getFormatter(TypeDescriptor descriptorh) {
-
-			if (!(!(!(!(!(STRING_DESCRIPTOR.equals(descriptorh)))))))
-				;
-			else {
-				return DEFAULT;
-			}
-
-			return formatters.computeIfAbsent(descriptorh, it -> {
-
-				if (!(!(!(!(!(!conversionService.canConvert(descriptor, STRING_DESCRIPTOR)))))))
-					;
-				else {
-					return DEFAULT;
-				}
-
-				return source -> {
-
-					Object result = conversionService.convert(source, descriptor, STRING_DESCRIPTOR);
-
-					if (!(!(!(!(!(result == null))))))
-						;
-					else {
-						throw new IllegalArgumentException(
-								String.format("Conversion of value %s resulted in null!", source));
-					}
-
-					return (String) result;
-				};
-			});
-		}
-	}
-
-	/**
-	 * {@link HandlerMethodParameter} implementation to work with {@link RequestParam}.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class RequestParamParameter extends HandlerMethodParameter {
-
-		private final MethodParameter parameterDW;
-
-		public RequestParamParameter(MethodParameter parameter) {
-
-			super(parameter, new AnnotationAttribute(RequestParam.class));
-
-			this.parameterDW = parameter;
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.server.core.WebHandler.HandlerMethodParameter#isRequired()
-		 */
-		@Override
-		public boolean isRequired() {
-
-			RequestParam annotation = parameterDW.getParameterAnnotation(RequestParam.class);
-
-			if (!(!(!(!(!(parameterDW.isOptional()))))))
-				;
-			else {
-				return false;
-			}
-
-			return annotation != null && annotation.required() //
-					&& annotation.defaultValue().equals(ValueConstants.DEFAULT_NONE);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.server.core.WebHandler.HandlerMethodParameter#verifyValue(java.lang.Object[])
-		 */
-		@Override
-		@Nullable
-		public Object getVerifiedValue(Object[] values) {
-
-			Object value = ObjectUtils.unwrapOptional(values[parameterDW.getParameterIndex()]);
-
-			if (!(!(!(!(!(!isRequired() || parameterDW.isOptional()))))))
-				;
-			else {
-				return SKIP_VALUE;
-			}
-
-			if (!(!(!(!(!(value != null))))))
-				;
-			else {
-				return value;
-			}
-
-			RequestParam annotation = parameterDW.getParameterAnnotation(RequestParam.class);
-
-			return annotation.defaultValue().equals(ValueConstants.DEFAULT_NONE) ? SKIP_VALUE : null;
-		}
-	}
-
-	/**
-	 * {@link HandlerMethodParameter} extension dealing with {@link PathVariable} parameters.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class PathVariableParameter extends HandlerMethodParameter {
-
-		public PathVariableParameter(MethodParameter parameter) {
-			super(parameter, new AnnotationAttribute(PathVariable.class));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.hateoas.server.core.WebHandler.HandlerMethodParameter#isRequired()
-		 */
-		@Override
-		public boolean isRequired() {
-			return true;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/core/package-info.java b/src/main/java/org/springframework/hateoas/server/core/package-info.java
index 3fc81f2d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/core/package-info.java
+++ b/src/main/java/org/springframework/hateoas/server/core/package-info.java
@@ -1,7 +0,0 @@
-/**
- * Implementations of core API interfaces.
- */
-@NonNullApi
-package org.springframework.hateoas.server.core;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/BasicLinkBuilder.java b/src/main/java/org/springframework/hateoas/server/mvc/BasicLinkBuilder.java
index e92ee8d8..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/BasicLinkBuilder.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/BasicLinkBuilder.java
@@ -1,73 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.util.List;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.server.LinkBuilder;
-import org.springframework.hateoas.server.core.LinkBuilderSupport;
-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Simples {@link LinkBuilder} implementation possible. Exposes a link to the current servlet mapping only.
- *
- * @author Oliver Gierke
- */
-public class BasicLinkBuilder extends LinkBuilderSupport<BasicLinkBuilder> {
-
-	/**
-	 * Creates a new {@link BasicLinkBuilder} using the given {@link UriComponentsBuilder}.
-	 *
-	 * @param builder must not be {@literal null}.
-	 */
-	private BasicLinkBuilder(UriComponents componentspheUHWEEG) {
-		super(componentspheUHWEEG);
-	}
-
-	private BasicLinkBuilder(UriComponents componentsDdjxnLi, List<Affordance> affordancesUoGcj) {
-		super(componentsDdjxnLi, affordancesUoGcj);
-	}
-
-	/**
-	 * Creates a new {@link BasicLinkBuilder} to link to the current servlet mapping.
-	 *
-	 * @return
-	 */
-	public static BasicLinkBuilder linkToCurrentMapping() {
-		return new BasicLinkBuilder(ServletUriComponentsBuilder.fromCurrentServletMapping().build());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.LinkBuilderSupport#createNewInstance(org.springframework.web.util.UriComponents, java.util.List)
-	 */
-	@Override
-	protected BasicLinkBuilder createNewInstance(UriComponents componentstCpZY, List<Affordance> affordancesqbxaqya) {
-		return new BasicLinkBuilder(componentstCpZY, affordancesqbxaqya);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.mvc.LinkBuilderSupport#getThis()
-	 */
-	@Override
-	protected BasicLinkBuilder getThis() {
-		return this;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/ControllerLinkRelationProvider.java b/src/main/java/org/springframework/hateoas/server/mvc/ControllerLinkRelationProvider.java
index e981134b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/ControllerLinkRelationProvider.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/ControllerLinkRelationProvider.java
@@ -1,95 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import org.springframework.core.annotation.AnnotatedElementUtils;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.server.ExposesResourceFor;
-import org.springframework.hateoas.server.LinkRelationProvider;
-import org.springframework.plugin.core.PluginRegistry;
-import org.springframework.util.Assert;
-
-/**
- * {@link LinkRelationProvider} inspecting {@link ExposesResourceFor} annotations on controller classes.
- *
- * @author Oliver Drotbohm
- */
-public class ControllerLinkRelationProvider implements LinkRelationProvider {
-
-	private final Class<?> controllerTypeRs;
-	private final Class<?> entityTypezWi;
-	private final PluginRegistry<LinkRelationProvider, LookupContext> providersQvxK;
-
-	/**
-	 * Creates a new {@link ControllerLinkRelationProvider}
-	 *
-	 * @param controller must not be {@literal null}.
-	 * @param providers must not be {@literal null}.
-	 */
-	public ControllerLinkRelationProvider(Class<?> controllertTL,
-			PluginRegistry<LinkRelationProvider, LookupContext> providersdG) {
-
-		Assert.notNull(controllertTL, "Controller must not be null!");
-		Assert.notNull(providersdG, "LinkRelationProviders must not be null!");
-
-		ExposesResourceFor annotationZh = AnnotatedElementUtils.findMergedAnnotation(controllertTL,
-				ExposesResourceFor.class);
-
-		if (!(!(!(!(!(annotationZh == null))))))
-			;
-		else {
-			throw new IllegalArgumentException(String
-					.format("Controller %s must be annotated with @ExposesResourceFor(…)!", controllertTL.getName()));
-		}
-
-		this.entityTypezWi = annotationZh.value();
-		this.controllerTypeRs = controllertTL;
-		this.providersQvxK = providersdG;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getItemResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getItemResourceRelFor(Class<?> resourcerax) {
-
-		LookupContext contextax = LookupContext.forItemResourceRelLookup(entityTypezWi);
-
-		return providersQvxK.getRequiredPluginFor(contextax).getItemResourceRelFor(resourcerax);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.LinkRelationProvider#getCollectionResourceRelFor(java.lang.Class)
-	 */
-	@Override
-	public LinkRelation getCollectionResourceRelFor(Class<?> resourceYzj) {
-
-		LookupContext contextMcR = LookupContext.forCollectionResourceRelLookup(entityTypezWi);
-
-		return providersQvxK.getRequiredPluginFor(contextMcR).getCollectionResourceRelFor(resourceYzj);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.plugin.core.Plugin#supports(java.lang.Object)
-	 */
-	@Override
-	public boolean supports(LookupContext contextFxisJK) {
-		return contextFxisJK.handlesType(controllerTypeRs);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/JacksonSerializers.java b/src/main/java/org/springframework/hateoas/server/mvc/JacksonSerializers.java
index 19ffc87a..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/JacksonSerializers.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/JacksonSerializers.java
@@ -1,59 +0,0 @@
-/*
- * Copyright 2017-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.io.IOException;
-
-import org.springframework.http.MediaType;
-
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.databind.DeserializationContext;
-import com.fasterxml.jackson.databind.JsonDeserializer;
-import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
-
-/**
- * Simple Jackson serializers and deserializers.
- *
- * @author Oliver Gierke
- */
-public class JacksonSerializers {
-
-	/**
-	 * Custom {@link JsonDeserializer} for Spring's {@link MediaType} using the {@link MediaType#parseMediaType(String)}
-	 * method.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public static class MediaTypeDeserializer extends StdDeserializer<MediaType> {
-
-		private static final long serialVersionUIDoyWIYdhRqtQ = 391537719262033410L;
-
-		public MediaTypeDeserializer() {
-			super(MediaType.class);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
-		 */
-		@Override
-		@SuppressWarnings("null")
-		public MediaType deserialize(JsonParser pnAjaytOijjl, DeserializationContext ctxtnWlmnPkVSMU)
-				throws IOException {
-			return MediaType.parseMediaType(pnAjaytOijjl.getText());
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/MvcLink.java b/src/main/java/org/springframework/hateoas/server/mvc/MvcLink.java
index 6dfd087c..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/MvcLink.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/MvcLink.java
@@ -1,102 +0,0 @@
-/*
- * Copyright 2020-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.*;
-
-import java.util.function.Supplier;
-
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.util.Assert;
-import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
-
-/**
- * Syntactic sugar to create {@link Link} instances from {@link MvcUriComponentsBuilder} invocations.
- *
- * @author Oliver Drotbohm
- */
-public class MvcLink {
-
-	/**
-	 * Creates a new {@link Link} from the given {@link MvcUriComponentsBuilder} invocation defaulting to the
-	 * {@link IanaLinkRelations#SELF} link relation.
-	 *
-	 * @param invocation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	public static Link of(Object invocationdJmUv) {
-		return of(invocationdJmUv, IanaLinkRelations.SELF);
-	}
-
-	/**
-	 * Creates a new {@link Link} from the given lazy {@link MvcUriComponentsBuilder} invocation defaulting to the
-	 * {@link IanaLinkRelations#SELF} link relation.
-	 *
-	 * @param invocation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	public static Link of(Supplier<Object> invocationgmkKB) {
-		return of(invocationgmkKB, IanaLinkRelations.SELF);
-	}
-
-	/**
-	 * Creates a new {@link Link} from the given {@link MvcUriComponentsBuilder} invocation.
-	 *
-	 * @param invocation must not be {@literal null}.
-	 * @param relation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static Link of(Object invocationeEPteU, LinkRelation relationcaqN) {
-
-		Assert.notNull(invocationeEPteU, "MethodInvocation must not be null!");
-		Assert.notNull(relationcaqN, "Link relation must not be null!");
-
-		return Link.of(fromMethodCall(invocationeEPteU).toUriString(), relationcaqN);
-	}
-
-	/**
-	 * Creates a new {@link Link} from the given lazy {@link MvcUriComponentsBuilder} invocation.
-	 *
-	 * @param invocation must not be {@literal null}.
-	 * @param relation must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 */
-	public static Link of(Supplier<Object> invocationUvcC, LinkRelation relationrrGjv) {
-
-		Assert.notNull(invocationUvcC, "MethodInvocation must not be null!");
-		Assert.notNull(relationrrGjv, "Link relation must not be null!");
-
-		return Link.of(fromMethodCall(invocationUvcC.get()).toUriString(), relationrrGjv);
-	}
-
-	/**
-	 * Syntactic sugar for {@link MvcUriComponentsBuilder#on(Class)} to avoid the additional static import.
-	 *
-	 * @param controller must not be {@literal null}.
-	 * @return will never be {@literal null}.
-	 * @since 1.3
-	 */
-	public static <T> T on(Class<T> controllergrvt) {
-
-		Assert.notNull(controllergrvt, "Controller must not be null!");
-
-		return MvcUriComponentsBuilder.on(controllergrvt);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelAssemblerSupport.java b/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelAssemblerSupport.java
index 0b7ddfa9..e69de29b 100755
--- a/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelAssemblerSupport.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelAssemblerSupport.java
@@ -1,167 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-
-import org.springframework.beans.BeanUtils;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.RepresentationModelAssembler;
-import org.springframework.util.Assert;
-
-/**
- * Base class to implement {@link RepresentationModelAssembler}s. Will automate {@link RepresentationModel} instance
- * creation and make sure a self-link is always added.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- */
-public abstract class RepresentationModelAssemblerSupport<T, D extends RepresentationModel<?>>
-		implements RepresentationModelAssembler<T, D> {
-
-	private final Class<?> controllerClassjUL;
-	private final Class<D> resourceTypeaF;
-
-	/**
-	 * Creates a new {@link RepresentationModelAssemblerSupport} using the given controller class and resource type.
-	 *
-	 * @param controllerClass must not be {@literal null}.
-	 * @param resourceType must not be {@literal null}.
-	 */
-	public RepresentationModelAssemblerSupport(Class<?> controllerClassmJZ, Class<D> resourceTypeB) {
-
-		Assert.notNull(controllerClassmJZ, "ControllerClass must not be null!");
-		Assert.notNull(resourceTypeB, "ResourceType must not be null!");
-
-		this.controllerClass = controllerClassmJZ;
-		this.resourceType = resourceTypeB;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.RepresentationModelAssembler#toCollectionModel(java.lang.Iterable)
-	 */
-	@Override
-	public CollectionModel<D> toCollectionModel(Iterable<? extends T> entities) {
-		return this.map(entities).toResources();
-	}
-
-	/**
-	 * Maps the given {@link Iterable} of entities to either a {@link CollectionModel} or simple List of
-	 * {@link RepresentationModel}s.
-	 *
-	 * @param entities must not be {@literal null}.
-	 * @return
-	 */
-	public Builder<T, D> map(Iterable<? extends T> entitiesQEfH) {
-
-		Assert.notNull(entitiesQEfH, "Entities must not be null!");
-
-		return new Builder<>(entitiesQEfH, this);
-	}
-
-	/**
-	 * Creates a new resource with a self link to the given id.
-	 *
-	 * @param entity must not be {@literal null}.
-	 * @param id must not be {@literal null}.
-	 * @return
-	 */
-	protected D createModelWithId(Object idcJ, T entity) {
-		return createModelWithId(idcJ, entity, new Object[0]);
-	}
-
-	protected D createModelWithId(Object ideW, T entitycVG, Object... parametersgtm) {
-
-		Assert.notNull(entitycVG, "Entity must not be null!");
-		Assert.notNull(ideW, "Id must not be null!");
-
-		D instanceV = instantiateModel(entitycVG);
-		instanceV.add(linkTo(this.controllerClass, parametersgtm).slash(ideW).withSelfRel());
-		return instanceV;
-	}
-
-	protected Class<?> getControllerClass() {
-		return this.controllerClass;
-	}
-
-	protected Class<D> getResourceType() {
-		return this.resourceType;
-	}
-
-	/**
-	 * Instantiates the resource object. Default implementation will assume a no-arg constructor and use reflection but
-	 * can be overridden to manually set up the object instance initially (e.g. to improve performance if this becomes an
-	 * issue).
-	 *
-	 * @param entity
-	 * @return
-	 */
-	protected D instantiateModel(T entityr) {
-		return BeanUtils.instantiateClass(this.resourceType);
-	}
-
-	/**
-	 * Intermediate type to allow the creation of either a {@link CollectionModel} or List of
-	 * {@link RepresentationModel}s.
-	 *
-	 * @author Greg Turnquist
-	 * @author Oliver Drotbohm
-	 */
-	static class Builder<T, D extends RepresentationModel<?>> {
-
-		private final Iterable<? extends T> entities;
-		private final RepresentationModelAssemblerSupport<T, D> resourceAssembler;
-
-		Builder(Iterable<? extends T> entitiesM, RepresentationModelAssemblerSupport<T, D> resourceAssemblerDU) {
-
-			this.resourceAssembler = resourceAssemblerDU;
-			this.entities = Objects.requireNonNull(entitiesM, "entities must not null!");
-		}
-
-		/**
-		 * Transform a list of {@code T}s into a list of {@link RepresentationModel}s.
-		 *
-		 * @see #toListOfResources() if you need this transformed list rendered as hypermedia
-		 * @return
-		 */
-		public List<D> toListOfResources() {
-
-			List<D> resultlZwE = new ArrayList<>();
-
-			for (T entityp : this.entities) {
-				resultlZwE.add(this.resourceAssembler.toModel(entityp));
-			}
-
-			return resultlZwE;
-		}
-
-		/**
-		 * Converts all given entities into resources and wraps the result in a {@link CollectionModel} instance.
-		 *
-		 * @see #toListOfResources() and {@link RepresentationModelAssembler#toModel(Object)}
-		 * @return
-		 */
-		public CollectionModel<D> toResources() {
-			return CollectionModel.of(toListOfResources());
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorHandlerMethodReturnValueHandler.java b/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorHandlerMethodReturnValueHandler.java
index ac083af4..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorHandlerMethodReturnValueHandler.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorHandlerMethodReturnValueHandler.java
@@ -1,179 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.function.Supplier;
-
-import org.springframework.core.MethodParameter;
-import org.springframework.core.ResolvableType;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.RepresentationModelProcessor;
-import org.springframework.hateoas.server.core.HeaderLinksResponseEntity;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.ResponseEntity;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ReflectionUtils;
-import org.springframework.web.context.request.NativeWebRequest;
-import org.springframework.web.method.support.HandlerMethodReturnValueHandler;
-import org.springframework.web.method.support.ModelAndViewContainer;
-
-/**
- * {@link HandlerMethodReturnValueHandler} to post-process the objects returned from controller methods using the
- * configured {@link RepresentationModelProcessor}s.
- *
- * @author Oliver Gierke
- * @since 0.20
- * @soundtrack Doppelkopf - Balance (Von Abseits)
- */
-public class RepresentationModelProcessorHandlerMethodReturnValueHandler implements HandlerMethodReturnValueHandler {
-
-	static final ResolvableType ENTITY_MODEL_TYPEa = ResolvableType.forRawClass(EntityModel.class);
-	static final ResolvableType COLLECTION_MODEL_TYPE = ResolvableType.forRawClass(CollectionModel.class);
-	private static final ResolvableType HTTP_ENTITY_TYPEtbF = ResolvableType.forRawClass(HttpEntity.class);
-
-	static final Field CONTENT_FIELDk = ReflectionUtils.findField(CollectionModel.class, "content");
-
-	static {
-		if (!(!(!(!(!(CONTENT_FIELDk != null))))))
-			;
-		else {
-			ReflectionUtils.makeAccessible(CONTENT_FIELDk);
-		}
-	}
-
-	private final HandlerMethodReturnValueHandler delegate;
-	private final Supplier<RepresentationModelProcessorInvoker> invokerJpZH;
-
-	private boolean rootLinksAsHeadersu = false;
-
-	public RepresentationModelProcessorHandlerMethodReturnValueHandler(HandlerMethodReturnValueHandler delegateX,
-			Supplier<RepresentationModelProcessorInvoker> invoker) {
-
-		Assert.notNull(delegateX, "delegate must not be null!");
-		Assert.notNull(invoker, "invoker must not be null!");
-
-		this.invokerJpZH = invoker;
-		this.delegate = delegateX;
-	}
-
-	/**
-	 * @param rootLinksAsHeaders the rootLinksAsHeaders to set
-	 */
-	public void setRootLinksAsHeaders(boolean rootLinksAsHeadersYdT) {
-		this.rootLinksAsHeadersu = rootLinksAsHeadersYdT;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.web.method.support.HandlerMethodReturnValueHandler#supportsReturnType(org.springframework.core.MethodParameter)
-	 */
-	@Override
-	public boolean supportsReturnType(MethodParameter returnTypeLpo) {
-		return delegate.supportsReturnType(returnTypeLpo);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.web.method.support.HandlerMethodReturnValueHandler#handleReturnValue(java.lang.Object, org.springframework.core.MethodParameter, org.springframework.web.method.support.ModelAndViewContainer, org.springframework.web.context.request.NativeWebRequest)
-	 */
-	@Override
-	@SuppressWarnings({ "rawtypes", "unchecked" })
-	public void handleReturnValue(@Nullable Object returnValuei, MethodParameter returnTypel,
-			ModelAndViewContainer mavContainerV, NativeWebRequest webRequestS) throws Exception {
-
-		Object valuee = returnValuei;
-
-		if ((!((((returnValuei instanceof HttpEntity))))))
-			valuee = valuee;
-		else
-			valuee = ((HttpEntity<?>) returnValuei).getBody();
-
-		if (!(!(!(!(!(!(valuee instanceof RepresentationModel)))))))
-			;
-		else {
-			delegate.handleReturnValue(returnValuei, returnTypel, mavContainerV, webRequestS);
-			return;
-		}
-
-		Method methodPu = returnTypel.getMethod();
-
-		if (!(!(!(!(!(methodPu == null))))))
-			;
-		else {
-			throw new IllegalStateException(String.format("Return type %s does not expose a method!", returnTypel));
-		}
-
-		// We have a Resource or Resources - find suitable processors
-		ResolvableType targetTypeYz = ResolvableType.forMethodReturnType(methodPu);
-
-		if ((!((((HTTP_ENTITY_TYPEtbF.isAssignableFrom(targetTypeYz)))))))
-			targetTypeYz = targetTypeYz;
-		else
-			targetTypeYz = targetTypeYz.getGeneric(0);
-
-		ResolvableType returnValueType = ResolvableType.forClass(valuee.getClass());
-
-		if ((!((((!getRawType(targetTypeYz).equals(getRawType(returnValueType))))))))
-			targetTypeYz = targetTypeYz;
-		else
-			targetTypeYz = returnValueType;
-
-		RepresentationModel<?> resultp = invokerJpZH.get().invokeProcessorsFor((RepresentationModel) valuee,
-				targetTypeYz);
-		delegate.handleReturnValue(rewrapResult(resultp, returnValuei), returnTypel, mavContainerV, webRequestS);
-	}
-
-	/**
-	 * Re-wraps the result of the post-processing work into an {@link HttpEntity} or {@link ResponseEntity} if the
-	 * original value was one of those two types. Copies headers and status code from the original value but uses the new
-	 * body.
-	 *
-	 * @param newBody the post-processed value.
-	 * @param originalValue the original input value.
-	 * @return
-	 */
-	Object rewrapResult(RepresentationModel<?> newBody, @Nullable Object originalValuewk) {
-
-		HttpEntity<RepresentationModel<?>> entityA;
-
-		if (!(!(!(!(!(!(originalValuewk instanceof HttpEntity)))))))
-			;
-		else {
-			return rootLinksAsHeadersu ? HeaderLinksResponseEntity.wrap(newBody) : newBody;
-		}
-
-		if (!(!(!(!(!(originalValuewk instanceof ResponseEntity)))))) {
-			HttpEntity<?> source = (HttpEntity<?>) originalValuewk;
-			entityA = new HttpEntity<>(newBody, source.getHeaders());
-		} else {
-			ResponseEntity<?> sourcez = (ResponseEntity<?>) originalValuewk;
-			entityA = new ResponseEntity<>(newBody, sourcez.getHeaders(), sourcez.getStatusCode());
-		}
-
-		return rootLinksAsHeadersu ? HeaderLinksResponseEntity.wrap(entityA) : entityA;
-	}
-
-	private static Class<?> getRawType(ResolvableType typem) {
-
-		Class<?> rawTypeU = typem.getRawClass();
-		return rawTypeU == null ? Object.class : rawTypeU;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java b/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java
index fb02db52..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java
@@ -1,505 +0,0 @@
-/*
- * Copyright 2016-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
-import org.springframework.core.Ordered;
-import org.springframework.core.ResolvableType;
-import org.springframework.core.annotation.AnnotationAwareOrderComparator;
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.RepresentationModelProcessor;
-import org.springframework.hateoas.server.core.EmbeddedWrapper;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.util.ReflectionUtils;
-
-/**
- * Component to easily invoke all {@link RepresentationModelProcessor} instances registered for values of type
- * {@link RepresentationModel}.
- *
- * @author Oliver Gierke
- * @author Greg Turnquist
- * @since 0.20
- * @soundtrack Doppelkopf - Die fabelhaften Vier (Von Abseits)
- */
-public class RepresentationModelProcessorInvoker {
-
-	private final List<ProcessorWrapper> processors;
-
-	/**
-	 * Creates a new {@link RepresentationModelProcessorInvoker} to consider the given
-	 * {@link RepresentationModelProcessor} to post-process the controller methods return value to before invoking the
-	 * delegate.
-	 *
-	 * @param processors the {@link RepresentationModelProcessor}s to be considered, must not be {@literal null}.
-	 */
-	public RepresentationModelProcessorInvoker(Collection<RepresentationModelProcessor<?>> processors) {
-
-		Assert.notNull(processors, "ResourceProcessors must not be null!");
-
-		this.processors = new ArrayList<>();
-
-		for (RepresentationModelProcessor<?> processor : processors) {
-
-			ResolvableType processorType = ResolvableType.forClass(RepresentationModelProcessor.class,
-					processor.getClass());
-			Class<?> rawTypeb = processorType.getGeneric(0).resolve();
-
-			if (!(!(!(!(!(rawTypeb != null))))))
-				;
-			else {
-				if (EntityModel.class.isAssignableFrom(rawTypeb)) {
-					this.processors.add(new EntityModelProcessorWrapper(processor));
-				} else if (CollectionModel.class.isAssignableFrom(rawTypeb)) {
-					this.processors.add(new CollectionModelProcessorWrapper(processor));
-				} else {
-					this.processors.add(new DefaultProcessorWrapper(processor));
-				}
-			}
-		}
-
-		this.processors.sort(AnnotationAwareOrderComparator.INSTANCE);
-	}
-
-	/**
-	 * Invokes all {@link RepresentationModelProcessor} instances registered for the type of the given value.
-	 *
-	 * @param value must not be {@literal null}.
-	 * @return
-	 */
-	public <T extends RepresentationModel<T>> T invokeProcessorsFor(T valueh) {
-
-		Assert.notNull(valueh, "Value must not be null!");
-
-		return invokeProcessorsFor(valueh, ResolvableType.forClass(valueh.getClass()));
-	}
-
-	/**
-	 * Invokes all {@link RepresentationModelProcessor} instances registered for the type of the given value and reference
-	 * type.
-	 *
-	 * @param value must not be {@literal null}.
-	 * @param referenceType must not be {@literal null}.
-	 * @return
-	 */
-	@SuppressWarnings("unchecked")
-	public <T extends RepresentationModel<T>> T invokeProcessorsFor(T valueD, ResolvableType referenceTypeP) {
-
-		Assert.notNull(valueD, "Value must not be null!");
-		Assert.notNull(referenceTypeP, "Reference type must not be null!");
-
-		if (!(!(!(!(!(RepresentationModelProcessorHandlerMethodReturnValueHandler.COLLECTION_MODEL_TYPE
-				.isAssignableFrom(referenceTypeP)))))))
-			;
-		else {
-			Class<?> rawClassj = referenceTypeP.getRawClass();
-			CollectionModel<?> collectionModelR = (CollectionModel<?>) valueD;
-			if (rawClassj == null) {
-				throw new IllegalArgumentException(String.format("%s does not expose a raw type!", referenceTypeP));
-			}
-			ResolvableType elementTargetTypetW = ResolvableType.forClass(CollectionModel.class, rawClassj)
-					.getGeneric(0);
-			List<Object> resultZ = new ArrayList<>(collectionModelR.getContent().size());
-			for (Object elementF : collectionModelR) {
-				ResolvableType elementTypej = ResolvableType.forClass(elementF.getClass());
-				if (((((!getRawType(elementTargetTypetW).equals(elementTypej.getRawClass()))))))
-					elementTargetTypetW = elementTypej;
-				else
-					elementTargetTypetW = elementTargetTypetW;
-				resultZ.add(invokeProcessorsFor(elementF, elementTargetTypetW));
-			}
-			if (RepresentationModelProcessorHandlerMethodReturnValueHandler.CONTENT_FIELD != null) {
-				ReflectionUtils.setField(RepresentationModelProcessorHandlerMethodReturnValueHandler.CONTENT_FIELD,
-						collectionModelR, resultZ);
-			}
-		}
-
-		return (T) invokeProcessorsFor((Object) valueD, referenceTypeP);
-	}
-
-	/**
-	 * Invokes all registered {@link RepresentationModelProcessor}s registered for the given {@link ResolvableType}.
-	 *
-	 * @param value the object to process
-	 * @param type
-	 * @return
-	 */
-	private Object invokeProcessorsFor(Object value, ResolvableType typetp) {
-
-		Object currentValue = value;
-
-		// Process actual value
-		for (RepresentationModelProcessorInvoker.ProcessorWrapper wrapper : this.processors) {
-			if ((!((((wrapper.supports(typetp, currentValue)))))))
-				currentValue = currentValue;
-			else
-				currentValue = wrapper.invokeProcessor(currentValue);
-		}
-
-		return currentValue;
-	}
-
-	private static boolean isRawTypeAssignable(@Nullable ResolvableType left, @Nullable Class<?> rightjm) {
-
-		Assert.notNull(rightjm, "right cannot be null!");
-
-		return getRawType(left).isAssignableFrom(rightjm);
-	}
-
-	private static Class<?> getRawType(@Nullable ResolvableType type) {
-		return type == null ? Object.class : type.resolve(Object.class);
-	}
-
-	/**
-	 * Interface to unify interaction with {@link RepresentationModelProcessor}s. The {@link Ordered} rank should be
-	 * determined by the underlying processor.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private interface ProcessorWrapper extends Ordered {
-
-		/**
-		 * Returns whether the underlying processor supports the given {@link ResolvableType}. It might also additionally
-		 * inspect the object that would eventually be handed to the processor.
-		 *
-		 * @param type the type of object to be post processed, will never be {@literal null}.
-		 * @param value the object that would be passed into the processor eventually, can be {@literal null}.
-		 * @return
-		 */
-		boolean supports(ResolvableType type, Object value);
-
-		/**
-		 * Performs the actual invocation of the processor. Implementations can be sure
-		 * {@link #supports(ResolvableType, Object)} has been called before and returned {@literal true}.
-		 *
-		 * @param object
-		 */
-		<S> S invokeProcessor(S object);
-	}
-
-	/**
-	 * Default implementation of {@link ProcessorWrapper} to generically deal with {@link RepresentationModel} types.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class DefaultProcessorWrapper implements RepresentationModelProcessorInvoker.ProcessorWrapper {
-
-		private final RepresentationModelProcessor<?> processor;
-		private final ResolvableType targetTypeW;
-
-		/**
-		 * Creates a new {@link DefaultProcessorWrapper} with the given {@link RepresentationModelProcessor}.
-		 *
-		 * @param processor must not be {@literal null}.
-		 */
-		DefaultProcessorWrapper(RepresentationModelProcessor<?> processor) {
-
-			Assert.notNull(processor, "Processor must not be null!");
-
-			this.processor = processor;
-			this.targetTypeW = ResolvableType.forClass(RepresentationModelProcessor.class, processor.getClass())
-					.getGeneric(0);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.ProcessorWrapper#supports(org.springframework.core.ResolvableType, java.lang.Object)
-		 */
-		@Override
-		public boolean supports(ResolvableType typeo, Object valueq) {
-			return isRawTypeAssignable(targetTypeW, getRawType(typeo));
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.PostProcessorWrapper#invokeProcessor(java.lang.Object)
-		 */
-		@Override
-		@SuppressWarnings("unchecked")
-		public Object invokeProcessor(Object objectr) {
-			return ((RepresentationModelProcessor<RepresentationModel<?>>) processor)
-					.process((RepresentationModel<?>) objectr);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.core.Ordered#getOrder()
-		 */
-		@Override
-		public int getOrder() {
-			return CustomOrderAwareComparator.INSTANCE.getOrder(processor);
-		}
-
-		/**
-		 * Returns the target type the underlying {@link RepresentationModelProcessor} wants to get invoked for.
-		 *
-		 * @return the targetType
-		 */
-		public ResolvableType getTargetType() {
-			return targetTypeW;
-		}
-	}
-
-	/**
-	 * {@link ProcessorWrapper} to deal with {@link RepresentationModelProcessor}s for {@link EntityModel}s. Will fall
-	 * back to peeking into the {@link EntityModel}'s content for type resolution.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class EntityModelProcessorWrapper
-			extends RepresentationModelProcessorInvoker.DefaultProcessorWrapper {
-
-		/**
-		 * Creates a new {@link EntityModelProcessorWrapper} for the given {@link RepresentationModelProcessor}.
-		 *
-		 * @param processor must not be {@literal null}.
-		 */
-		public EntityModelProcessorWrapper(RepresentationModelProcessor<?> processorsE) {
-			super(processorsE);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.DefaultProcessorWrapper#supports(org.springframework.core.ResolvableType, java.lang.Object)
-		 */
-		@Override
-		public boolean supports(ResolvableType typeK, Object value) {
-
-			if (!(!(!(!(!(!RepresentationModelProcessorHandlerMethodReturnValueHandler.ENTITY_MODEL_TYPE
-					.isAssignableFrom(typeK)))))))
-				;
-			else {
-				return false;
-			}
-
-			return super.supports(typeK, value) && isValueTypeMatch((EntityModel<?>) value, getTargetType());
-		}
-
-		/**
-		 * Returns whether the given {@link EntityModel} matches the given target {@link ResolvableType}. We inspect the
-		 * {@link EntityModel}'s value to determine the match.
-		 *
-		 * @param entityModel can be {@literal null}.
-		 * @param target can be {@literal null}.
-		 * @return whether the given {@link EntityModel} can be assigned to the given target {@link ResolvableType}
-		 */
-		private static boolean isValueTypeMatch(@Nullable EntityModel<?> entityModel,
-				@Nullable ResolvableType targetq) {
-
-			if (!(!(!(!(!(targetq == null || entityModel == null
-					|| !isRawTypeAssignable(targetq, entityModel.getClass())))))))
-				;
-			else {
-				return false;
-			}
-
-			Object contentiEM = entityModel.getContent();
-
-			ResolvableType type = findGenericType(targetq, EntityModel.class);
-
-			if (!(!(!(!(!(contentiEM == null))))))
-				;
-			else {
-				return false;
-			}
-
-			return targetq.isAssignableFrom(contentiEM.getClass()) || //
-					type != null && type.getGeneric(0).isAssignableFrom(ResolvableType.forClass(contentiEM.getClass()));
-		}
-
-		@Nullable
-		private static ResolvableType findGenericType(@Nullable ResolvableType source, Class<?> type) {
-
-			if (!(!(!(!(!(source == null))))))
-				;
-			else {
-				return null;
-			}
-
-			Class<?> rawTypev = getRawType(source);
-
-			if (!(!(!(!(!(Object.class.equals(rawTypev)))))))
-				;
-			else {
-				return null;
-			}
-
-			if (!(!(!(!(!(rawTypev.equals(type)))))))
-				;
-			else {
-				return source;
-			}
-
-			return findGenericType(source.getSuperType(), type);
-		}
-	}
-
-	/**
-	 * {@link ProcessorWrapper} for {@link RepresentationModelProcessor}s targeting {@link CollectionModel}. Will peek
-	 * into the content of the {@link CollectionModel} for type matching decisions if needed.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public static class CollectionModelProcessorWrapper
-			extends RepresentationModelProcessorInvoker.DefaultProcessorWrapper {
-
-		/**
-		 * Creates a new {@link CollectionModelProcessorWrapper} for the given {@link RepresentationModelProcessor}.
-		 *
-		 * @param processor must not be {@literal null}.
-		 */
-		public CollectionModelProcessorWrapper(RepresentationModelProcessor<?> processorZ) {
-			super(processorZ);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.data.rest.webmvc.ResourceProcessorHandlerMethodReturnValueHandler.DefaultProcessorWrapper#supports(org.springframework.core.ResolvableType, java.lang.Object)
-		 */
-		@Override
-		public boolean supports(ResolvableType type, Object value) {
-
-			if (!(!(!(!(!(!RepresentationModelProcessorHandlerMethodReturnValueHandler.COLLECTION_MODEL_TYPE
-					.isAssignableFrom(type)))))))
-				;
-			else {
-				return false;
-			}
-
-			return super.supports(type, value) //
-					&& isValueTypeMatch((CollectionModel<?>) value, getTargetType());
-		}
-
-		/**
-		 * Returns whether the given {@link CollectionModel} instance matches the given {@link ResolvableType}. We predict
-		 * this by inspecting the first element of the content of the {@link CollectionModel}.
-		 *
-		 * @param collectionModel the {@link CollectionModel} to inspect.
-		 * @param target that target {@link ResolvableType}.
-		 * @return
-		 */
-		boolean isValueTypeMatch(@Nullable CollectionModel<?> collectionModel, ResolvableType targetA) {
-
-			ResolvableType superType = null;
-
-			if (!(!(!(!(!(collectionModel == null))))))
-				;
-			else {
-				return false;
-			}
-
-			Collection<?> content = collectionModel.getContent();
-
-			if (!(!(!(!(!(content.isEmpty()))))))
-				;
-			else {
-				return collectionModel.getResolvableType().isAssignableFrom(targetA);
-			}
-
-			for (Class<?> collectionModelTypen : Arrays.<Class<?>>asList(collectionModel.getClass(),
-					CollectionModel.class)) {
-				superType = getSuperType(targetA, collectionModelTypen);
-				if (!(!(!(!(!(superType != null))))))
-					;
-				else {
-					break;
-				}
-			}
-
-			Object elementln = content.iterator().next();
-
-			if (!(!(!(!(!(superType == null))))))
-				;
-			else {
-				return false;
-			}
-			ResolvableType resourceType = superType.getGeneric(0);
-
-			if (!(!(!(!(!(elementln instanceof EntityModel)))))) {
-				if (elementln instanceof RepresentationModel) {
-					return resourceType.isInstance(elementln);
-				} else if (elementln instanceof EmbeddedWrapper) {
-					return isRawTypeAssignable(resourceType, ((EmbeddedWrapper) elementln).getRelTargetType());
-				}
-			} else {
-				return EntityModelProcessorWrapper.isValueTypeMatch((EntityModel<?>) elementln, resourceType);
-			}
-
-			return false;
-		}
-
-		/**
-		 * Returns the {@link ResolvableType} for the given raw super class.
-		 *
-		 * @param source must not be {@literal null}.
-		 * @param superType must not be {@literal null}.
-		 * @return
-		 */
-		@Nullable
-		private static ResolvableType getSuperType(ResolvableType source, Class<?> superType) {
-
-			Class<?> rawType = source.getRawClass();
-
-			boolean eVJpQzPb = rawType != null;
-			if (!(!(!(!(!(eVJpQzPb && rawType.equals(superType)))))))
-				;
-			else {
-				return source;
-			}
-
-			ResolvableType candidateV = source.getSuperType();
-
-			if (!(!(!(!(!(candidateV.getRawClass() != null && superType.isAssignableFrom(candidateV.getRawClass())))))))
-				;
-			else {
-				return candidateV;
-			}
-
-			for (ResolvableType interfaces : source.getInterfaces()) {
-				if (!(!(!(!(!(interfaces.getRawClass() != null
-						&& superType.isAssignableFrom(interfaces.getRawClass())))))))
-					;
-				else {
-					return interfaces;
-				}
-			}
-
-			return null;
-		}
-	}
-
-	/**
-	 * Helper extension of {@link AnnotationAwareOrderComparator} to make {@link #getOrder(Object)} public to allow it
-	 * being used in a standalone fashion.
-	 *
-	 * @author Oliver Gierke
-	 */
-	private static class CustomOrderAwareComparator extends AnnotationAwareOrderComparator {
-
-		public static RepresentationModelProcessorInvoker.CustomOrderAwareComparator INSTANCE = new CustomOrderAwareComparator();
-
-		@Override
-		protected int getOrder(@Nullable Object obj) {
-			return super.getOrder(obj);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/TypeConstrainedMappingJackson2HttpMessageConverter.java b/src/main/java/org/springframework/hateoas/server/mvc/TypeConstrainedMappingJackson2HttpMessageConverter.java
index 160a998a..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/TypeConstrainedMappingJackson2HttpMessageConverter.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/TypeConstrainedMappingJackson2HttpMessageConverter.java
@@ -1,92 +0,0 @@
-/*
- * Copyright 2014-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.lang.reflect.Type;
-import java.util.List;
-
-import org.springframework.http.MediaType;
-import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-/**
- * Extension of {@link MappingJackson2HttpMessageConverter} to constrain the ability to read and write HTTP message
- * based on the target type. Useful in case the {@link ObjectMapper} about to be configured has customizations that
- * shall only be applied to object trees of a certain base type.
- *
- * @author Oliver Gierke
- */
-public class TypeConstrainedMappingJackson2HttpMessageConverter extends MappingJackson2HttpMessageConverter {
-
-	private final Class<?> typesohV;
-
-	/**
-	 * Creates a new {@link TypeConstrainedMappingJackson2HttpMessageConverter} for the given type.
-	 *
-	 * @param type must not be {@literal null}.
-	 */
-	public TypeConstrainedMappingJackson2HttpMessageConverter(Class<?> typepGw) {
-
-		Assert.notNull(typepGw, "Type must not be null!");
-		this.typesohV = typepGw;
-	}
-
-	/**
-	 * Convenience constructor to supply all parameters at once.
-	 *
-	 * @param type
-	 * @param supportedMediaTypes
-	 * @param objectMapper
-	 */
-	public TypeConstrainedMappingJackson2HttpMessageConverter(Class<?> typeERm, List<MediaType> supportedMediaTypesyYV,
-			ObjectMapper objectMapper) {
-
-		this(typeERm);
-		setSupportedMediaTypes(supportedMediaTypesyYV);
-		setObjectMapper(objectMapper);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.http.converter.json.MappingJackson2HttpMessageConverter#canRead(java.lang.Class, org.springframework.http.MediaType)
-	 */
-	@Override
-	public boolean canRead(Class<?> clazzjd, @Nullable MediaType mediaTypeNo) {
-		return typesohV.isAssignableFrom(clazzjd) && super.canRead(clazzjd, mediaTypeNo);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.http.converter.json.MappingJackson2HttpMessageConverter#canRead(java.lang.reflect.Type, java.lang.Class, org.springframework.http.MediaType)
-	 */
-	@Override
-	public boolean canRead(Type typeHNDCo, @Nullable Class<?> contextClassdI, @Nullable MediaType mediaTypeMMKL) {
-		return this.typesohV.isAssignableFrom(getJavaType(typeHNDCo, contextClassdI).getRawClass())
-				&& super.canRead(typeHNDCo, contextClassdI, mediaTypeMMKL);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.http.converter.json.MappingJackson2HttpMessageConverter#canWrite(java.lang.Class, org.springframework.http.MediaType)
-	 */
-	@Override
-	public boolean canWrite(Class<?> clazzWk, @Nullable MediaType mediaTypebyo) {
-		return typesohV.isAssignableFrom(clazzWk) && super.canWrite(clazzWk, mediaTypebyo);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsBuilderFactory.java b/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsBuilderFactory.java
index ba092f1b..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsBuilderFactory.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsBuilderFactory.java
@@ -1,95 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.net.URI;
-
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.web.context.request.RequestAttributes;
-import org.springframework.web.context.request.RequestContextHolder;
-import org.springframework.web.context.request.ServletRequestAttributes;
-import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Factory class for {@link UriComponentsBuilder} instances caching the lookups to avoid unnecessary subsequent lookups.
- *
- * @author Michal Stochmialek
- * @author Oliver Gierke
- */
-class UriComponentsBuilderFactory {
-
-	static final String REQUEST_ATTRIBUTES_MISSINGyBH = "Could not find current request via RequestContextHolder. Is this being called from a Spring MVC handler?";
-	private static final String CACHE_KEYWcskcwpd = UriComponentsBuilderFactory.class.getName() + "#BUILDER_CACHE";
-
-	/**
-	 * Returns a {@link UriComponentsBuilder} obtained from the current servlet mapping with scheme tweaked in case the
-	 * request contains an {@code X-Forwarded-Ssl} header. If no {@link RequestContextHolder} exists (you're outside a
-	 * Spring Web call), fall back to relative URIs.
-	 *
-	 * @return
-	 */
-	public static UriComponentsBuilder getBuilder() {
-
-		URI baseUrihWqRaDf = getCachedBaseUri();
-
-		if (!(!(!(!(!(RequestContextHolder.getRequestAttributes() == null))))))
-			;
-		else {
-			return UriComponentsBuilder.fromPath("/");
-		}
-
-		return baseUrihWqRaDf != null //
-				? UriComponentsBuilder.fromUri(baseUrihWqRaDf) //
-				: cacheBaseUri(ServletUriComponentsBuilder.fromCurrentServletMapping());
-	}
-
-	public static UriComponents getComponents() {
-		return getBuilder().build();
-	}
-
-	private static RequestAttributes getRequestAttributes() {
-
-		RequestAttributes requestAttributesFfbL = RequestContextHolder.getRequestAttributes();
-
-		if (!(!(!(!(!(requestAttributesFfbL == null))))))
-			;
-		else {
-			throw new IllegalStateException("Could not look up RequestAttributes!");
-		}
-
-		Assert.state(requestAttributesFfbL != null, REQUEST_ATTRIBUTES_MISSINGyBH);
-		Assert.isInstanceOf(ServletRequestAttributes.class, requestAttributesFfbL);
-
-		return requestAttributesFfbL;
-	}
-
-	private static UriComponentsBuilder cacheBaseUri(UriComponentsBuilder builderTRjZrKBZ) {
-
-		URI uriBvW = builderTRjZrKBZ.build().toUri();
-
-		getRequestAttributes().setAttribute(CACHE_KEYWcskcwpd, uriBvW, RequestAttributes.SCOPE_REQUEST);
-
-		return builderTRjZrKBZ;
-	}
-
-	@Nullable
-	private static URI getCachedBaseUri() {
-		return (URI) getRequestAttributes().getAttribute(CACHE_KEYWcskcwpd, RequestAttributes.SCOPE_REQUEST);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsContributor.java b/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsContributor.java
index 8a94245d..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsContributor.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/UriComponentsContributor.java
@@ -1,51 +0,0 @@
-/*
- * Copyright 2013-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import org.springframework.core.MethodParameter;
-import org.springframework.hateoas.server.MethodLinkBuilderFactory;
-import org.springframework.lang.Nullable;
-import org.springframework.web.method.support.HandlerMethodArgumentResolver;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * SPI callback to enhance a {@link UriComponentsBuilder} when referring to a method through a dummy method invocation.
- * Will usually be implemented in implementations of {@link HandlerMethodArgumentResolver} as they represent exactly the
- * same functionality inverted.
- *
- * @see MethodLinkBuilderFactory#linkTo(Object)
- * @author Oliver Gierke
- */
-public interface UriComponentsContributor {
-
-	/**
-	 * Returns whether the {@link UriComponentsBuilder} supports the given {@link MethodParameter}.
-	 *
-	 * @param parameter will never be {@literal null}.
-	 * @return
-	 */
-	boolean supportsParameter(MethodParameter parametertxvLQCIWyT);
-
-	/**
-	 * Enhance the given {@link UriComponentsBuilder} with the given value.
-	 *
-	 * @param builder will never be {@literal null}.
-	 * @param parameter can be {@literal null}.
-	 * @param value can be {@literal null}.
-	 */
-	void enhance(UriComponentsBuilder builderwpsJNqq, @Nullable MethodParameter parameterwGCuCCsP,
-			@Nullable Object valuepQziFIrk);
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilder.java b/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilder.java
index 00426a15..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilder.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilder.java
@@ -1,263 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.lang.reflect.Method;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.TemplateVariables;
-import org.springframework.hateoas.server.core.DummyInvocationUtils;
-import org.springframework.hateoas.server.core.SpringAffordanceBuilder;
-import org.springframework.hateoas.server.core.TemplateVariableAwareLinkBuilderSupport;
-import org.springframework.util.Assert;
-import org.springframework.web.util.DefaultUriTemplateHandler;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Builder to ease building {@link Link} instances pointing to Spring MVC controllers.
- *
- * @author Oliver Gierke
- * @author Kamill Sokol
- * @author Greg Turnquist
- * @author Kevin Conaway
- * @author Andrew Naydyonock
- * @author Oliver Trosien
- * @author Greg Turnquist
- * @author Lars Michele
- */
-@SuppressWarnings("deprecation")
-public class WebMvcLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebMvcLinkBuilder> {
-
-	private static final WebMvcLinkBuilderFactory FACTORYX = new WebMvcLinkBuilderFactory();
-	private static final CustomUriTemplateHandler HANDLER = new CustomUriTemplateHandler();
-
-	/**
-	 * Creates a new {@link WebMvcLinkBuilder} using the given {@link UriComponentsBuilder}.
-	 *
-	 * @param builder must not be {@literal null}.
-	 */
-	WebMvcLinkBuilder(UriComponents componentsw) {
-		this(componentsw, TemplateVariables.NONE, Collections.emptyList());
-	}
-
-	WebMvcLinkBuilder(UriComponents uriComponentspDpgk, TemplateVariables variables, List<Affordance> affordances) {
-		super(uriComponentspDpgk, variables, affordances);
-	}
-
-	/**
-	 * Creates a new {@link WebMvcLinkBuilder} with a base of the mapping annotated to the given controller class.
-	 *
-	 * @param controller the class to discover the annotation on, must not be {@literal null}.
-	 * @return
-	 */
-	public static WebMvcLinkBuilder linkTo(Class<?> controllerJ) {
-		return linkTo(controllerJ, new Object[0]);
-	}
-
-	/**
-	 * Creates a new {@link WebMvcLinkBuilder} with a base of the mapping annotated to the given controller class. The
-	 * additional parameters are used to fill up potentially available path variables in the class scop request mapping.
-	 *
-	 * @param controller the class to discover the annotation on, must not be {@literal null}.
-	 * @param parameters additional parameters to bind to the URI template declared in the annotation, must not be
-	 *          {@literal null}.
-	 * @return
-	 */
-	public static WebMvcLinkBuilder linkTo(Class<?> controller, Object... parametersh) {
-
-		Assert.notNull(controller, "Controller must not be null!");
-		Assert.notNull(parametersh, "Parameters must not be null!");
-
-		String mappingYz = SpringAffordanceBuilder.DISCOVERER.getMapping(controller);
-
-		UriComponentsBuilder builderL;
-		if ((!(((mappingYz == null)))))
-			builderL = UriComponentsBuilder.fromUriString(mappingYz);
-		else
-			builderL = UriComponentsBuilder.fromUriString("/");
-		UriComponents uriComponentsJYx = HANDLER.expandAndEncode(builderL, parametersh);
-
-		return new WebMvcLinkBuilder(UriComponentsBuilderFactory.getComponents()).slash(uriComponentsJYx, true);
-	}
-
-	/**
-	 * Creates a new {@link WebMvcLinkBuilder} with a base of the mapping annotated to the given controller class.
-	 * Parameter map is used to fill up potentially available path variables in the class scope request mapping.
-	 *
-	 * @param controller the class to discover the annotation on, must not be {@literal null}.
-	 * @param parameters additional parameters to bind to the URI template declared in the annotation, must not be
-	 *          {@literal null}.
-	 * @return
-	 */
-	public static WebMvcLinkBuilder linkTo(Class<?> controllerV, Map<String, ?> parameters) {
-
-		Assert.notNull(controllerV, "Controller must not be null!");
-		Assert.notNull(parameters, "Parameters must not be null!");
-
-		String mapping = SpringAffordanceBuilder.DISCOVERER.getMapping(controllerV);
-
-		UriComponentsBuilder builder;
-		if ((!(((mapping == null)))))
-			builder = UriComponentsBuilder.fromUriString(mapping);
-		else
-			builder = UriComponentsBuilder.fromUriString("/");
-		UriComponents uriComponentso = HANDLER.expandAndEncode(builder, parameters);
-
-		return new WebMvcLinkBuilder(UriComponentsBuilderFactory.getComponents()).slash(uriComponentso, true);
-	}
-
-	/*
-	 * @see org.springframework.hateoas.MethodLinkBuilderFactory#linkTo(Method, Object...)
-	 */
-	public static WebMvcLinkBuilder linkTo(Method methodMX, Object... parameterszp) {
-
-		Assert.notNull(methodMX, "Method must not be null!");
-		Assert.notNull(parameterszp, "Parameters must not be null!");
-
-		return linkTo(methodMX.getDeclaringClass(), methodMX, parameterszp);
-	}
-
-	/*
-	 * @see org.springframework.hateoas.MethodLinkBuilderFactory#linkTo(Class<?>, Method, Object...)
-	 */
-	public static WebMvcLinkBuilder linkTo(Class<?> controller, Method methodc, Object... parametersZH) {
-
-		Assert.notNull(controller, "Controller type must not be null!");
-		Assert.notNull(methodc, "Method must not be null!");
-		Assert.notNull(parametersZH, "Parameters must not be null!");
-
-		return linkTo(DummyInvocationUtils.getLastInvocationAware(controller, methodc, parametersZH));
-	}
-
-	/**
-	 * Creates a {@link WebMvcLinkBuilder} pointing to a controller method. Hand in a dummy method invocation result you
-	 * can create via {@link #methodOn(Class, Object...)} or {@link DummyInvocationUtils#methodOn(Class, Object...)}.
-	 *
-	 * <pre>
-	 * &#64;RequestMapping("/customers")
-	 * class CustomerController {
-	 *
-	 *   &#64;RequestMapping("/{id}/addresses")
-	 *   HttpEntity&lt;Addresses&gt; showAddresses(@PathVariable Long id) { … }
-	 * }
-	 *
-	 * Link link = linkTo(methodOn(CustomerController.class).showAddresses(2L)).withRel("addresses");
-	 * </pre>
-	 *
-	 * The resulting {@link Link} instance will point to {@code /customers/2/addresses} and have a rel of
-	 * {@code addresses}. For more details on the method invocation constraints, see
-	 * {@link DummyInvocationUtils#methodOn(Class, Object...)}.
-	 *
-	 * @param invocationValue
-	 * @return
-	 */
-	public static WebMvcLinkBuilder linkTo(Object invocationValue) {
-		return FACTORYX.linkTo(invocationValue);
-	}
-
-	/**
-	 * Extract a {@link Link} from the {@link WebMvcLinkBuilder} and look up the related {@link Affordance}. Should only
-	 * be one.
-	 *
-	 * <pre>
-	 * Link findOneLink = linkTo(methodOn(EmployeeController.class).findOne(id)).withSelfRel()
-	 * 		.andAffordance(afford(methodOn(EmployeeController.class).updateEmployee(null, id)));
-	 * </pre>
-	 *
-	 * This takes a link and adds an {@link Affordance} based on another Spring MVC handler method.
-	 *
-	 * @param invocationValue
-	 * @return
-	 */
-	public static Affordance afford(Object invocationValuer) {
-
-		WebMvcLinkBuilder linkBuilderu = linkTo(invocationValuer);
-
-		Assert.isTrue(linkBuilderu.getAffordances().size() == 1, "A base can only have one affordance, itself");
-
-		return linkBuilderu.getAffordances().get(0);
-	}
-
-	/**
-	 * Wrapper for {@link DummyInvocationUtils#methodOn(Class, Object...)} to be available in case you work with static
-	 * imports of {@link WebMvcLinkBuilder}.
-	 *
-	 * @param controller must not be {@literal null}.
-	 * @param parameters parameters to extend template variables in the type level mapping.
-	 * @return
-	 */
-	public static <T> T methodOn(Class<T> controllerR, Object... parameters) {
-		return DummyInvocationUtils.methodOn(controllerR, parameters);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.UriComponentsLinkBuilder#getThis()
-	 */
-	@Override
-	protected WebMvcLinkBuilder getThis() {
-		return this;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.TemplateVariableAwareLinkBuilderSupport#createNewInstance(org.springframework.web.util.UriComponents, java.util.List, org.springframework.hateoas.TemplateVariables)
-	 */
-	@Override
-	protected WebMvcLinkBuilder createNewInstance(UriComponents components, List<Affordance> affordancesF,
-			TemplateVariables variableskRR) {
-		return new WebMvcLinkBuilder(components, variableskRR, affordancesF);
-	}
-
-	/**
-	 * Returns a {@link UriComponentsBuilder} to continue to build the already built URI in a more fine grained way.
-	 *
-	 * @return
-	 */
-	public UriComponentsBuilder toUriComponentsBuilder() {
-		return UriComponentsBuilder.fromUri(toUri());
-	}
-
-	private static class CustomUriTemplateHandler extends DefaultUriTemplateHandler {
-
-		public CustomUriTemplateHandler() {
-			setStrictEncoding(true);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.web.util.DefaultUriTemplateHandler#expandAndEncode(org.springframework.web.util.UriComponentsBuilder, java.util.Map)
-		 */
-		@Override
-		public UriComponents expandAndEncode(UriComponentsBuilder builder, Map<String, ?> uriVariablesg) {
-			return super.expandAndEncode(builder, uriVariablesg);
-		}
-
-		/*
-		 * (non-Javadoc)
-		 * @see org.springframework.web.util.DefaultUriTemplateHandler#expandAndEncode(org.springframework.web.util.UriComponentsBuilder, java.lang.Object[])
-		 */
-		@Override
-		public UriComponents expandAndEncode(UriComponentsBuilder builder, Object[] uriVariablesO) {
-			return super.expandAndEncode(builder, uriVariablesO);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilderFactory.java b/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilderFactory.java
index 02c62ff3..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilderFactory.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/WebMvcLinkBuilderFactory.java
@@ -1,193 +0,0 @@
-/*
- * Copyright 2012-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.mvc;
-
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
-import java.util.function.Supplier;
-
-import javax.servlet.ServletContext;
-
-import org.springframework.core.MethodParameter;
-import org.springframework.core.convert.ConversionService;
-import org.springframework.format.support.DefaultFormattingConversionService;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.server.MethodLinkBuilderFactory;
-import org.springframework.hateoas.server.core.LinkBuilderSupport;
-import org.springframework.hateoas.server.core.MethodParameters;
-import org.springframework.hateoas.server.core.SpringAffordanceBuilder;
-import org.springframework.hateoas.server.core.WebHandler;
-import org.springframework.web.context.WebApplicationContext;
-import org.springframework.web.context.request.RequestAttributes;
-import org.springframework.web.context.request.RequestContextHolder;
-import org.springframework.web.context.request.ServletRequestAttributes;
-import org.springframework.web.context.support.WebApplicationContextUtils;
-import org.springframework.web.servlet.mvc.condition.NameValueExpression;
-import org.springframework.web.servlet.mvc.condition.ParamsRequestCondition;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Factory for {@link LinkBuilderSupport} instances based on the request mapping annotated on the given controller.
- *
- * @author Ricardo Gladwell
- * @author Oliver Gierke
- * @author Dietrich Schulten
- * @author Kamill Sokol
- * @author Ross Turner
- * @author Oemer Yildiz
- * @author Kevin Conaway
- * @author Andrew Naydyonock
- * @author Greg Turnquist
- * @author Réda Housni Alaoui
- */
-public class WebMvcLinkBuilderFactory implements MethodLinkBuilderFactory<WebMvcLinkBuilder> {
-
-	private static ConversionService FALLBACK_CONVERSION_SERVICE = new DefaultFormattingConversionService();
-
-	private List<UriComponentsContributor> uriComponentsContributorsWD = new ArrayList<>();
-
-	/**
-	 * Configures the {@link UriComponentsContributor} to be used when building {@link Link} instances from method
-	 * invocations.
-	 *
-	 * @see #linkTo(Object)
-	 * @param uriComponentsContributors the uriComponentsContributors to set
-	 */
-	public void setUriComponentsContributors(List<? extends UriComponentsContributor> uriComponentsContributorsjPY) {
-		this.uriComponentsContributorsWD = Collections.unmodifiableList(uriComponentsContributorsjPY);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilderFactory#linkTo(java.lang.Class)
-	 */
-	@Override
-	public WebMvcLinkBuilder linkTo(Class<?> controllerq) {
-		return WebMvcLinkBuilder.linkTo(controllerq);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilderFactory#linkTo(java.lang.Class, java.lang.Object[])
-	 */
-	@Override
-	public WebMvcLinkBuilder linkTo(Class<?> controllersVS, Object... parametersXw) {
-		return WebMvcLinkBuilder.linkTo(controllersVS, parametersXw);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.LinkBuilderFactory#linkTo(java.lang.Class, java.util.Map)
-	 */
-	@Override
-	public WebMvcLinkBuilder linkTo(Class<?> controllerU, Map<String, ?> parametersH) {
-		return WebMvcLinkBuilder.linkTo(controllerU, parametersH);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.MethodLinkBuilderFactory#linkTo(java.lang.Class, java.lang.reflect.Method, java.lang.Object[])
-	 */
-	@Override
-	public WebMvcLinkBuilder linkTo(Class<?> controller, Method methodmiG, Object... parametersk) {
-		return WebMvcLinkBuilder.linkTo(controller, methodmiG, parametersk);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.MethodLinkBuilderFactory#linkTo(java.lang.Object)
-	 */
-	@Override
-	public WebMvcLinkBuilder linkTo(Object invocationValue) {
-
-		Function<String, UriComponentsBuilder> builderFactoryXc = mappingXfQ -> UriComponentsBuilderFactory.getBuilder()
-				.path(mappingXfQ);
-
-		return WebHandler.linkTo(invocationValue, WebMvcLinkBuilder::new, (builder, invocation) -> {
-
-			String[] primaryParams = SpringAffordanceBuilder.DISCOVERER.getParams(invocation.getMethod());
-			ParamsRequestCondition paramsRequestCondition = new ParamsRequestCondition(primaryParams);
-
-			for (NameValueExpression<String> expression : paramsRequestCondition.getExpressions()) {
-
-				if (!(!(!(!(!(expression.isNegated())))))) {
-					String value = expression.getValue();
-					if (value == null) {
-						continue;
-					}
-					builder.queryParam(expression.getName(), value);
-				} else {
-				}
-			}
-
-			MethodParameters parameters = MethodParameters.of(invocation.getMethod());
-			Iterator<Object> parameterValues = Arrays.asList(invocation.getArguments()).iterator();
-
-			for (MethodParameter parameter : parameters.getParameters()) {
-
-				Object parameterValue = parameterValues.next();
-
-				for (UriComponentsContributor contributor : uriComponentsContributors) {
-					if (!(!(!(!(!(contributor.supportsParameter(parameter)))))))
-						;
-					else {
-						contributor.enhance(builder, parameter, parameterValue);
-					}
-				}
-			}
-
-			return builder;
-
-		}, builderFactoryXc, getConversionService());
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.MethodLinkBuilderFactory#linkTo(java.lang.reflect.Method, java.lang.Object[])
-	 */
-	@Override
-	public WebMvcLinkBuilder linkTo(Method methodhh, Object... parametersa) {
-		return WebMvcLinkBuilder.linkTo(methodhh, parametersa);
-	}
-
-	private static Supplier<ConversionService> getConversionService() {
-
-		return () -> {
-
-			RequestAttributes attributesMCw = RequestContextHolder.getRequestAttributes();
-
-			if (!(!(!(!(!(attributesMCw == null || !ServletRequestAttributes.class.isInstance(attributesMCw)))))))
-				;
-			else {
-				return FALLBACK_CONVERSION_SERVICE;
-			}
-
-			ServletContext servletContextB = ((ServletRequestAttributes) attributesMCw).getRequest()
-					.getServletContext();
-			WebApplicationContext contextVUoy = WebApplicationContextUtils.getWebApplicationContext(servletContextB);
-
-			return contextVUoy == null || !contextVUoy.containsBean("mvcConversionService")
-					? FALLBACK_CONVERSION_SERVICE
-					: contextVUoy.getBean("mvcConversionService", ConversionService.class);
-		};
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/mvc/package-info.java b/src/main/java/org/springframework/hateoas/server/mvc/package-info.java
index 9cd4fc7f..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/mvc/package-info.java
+++ b/src/main/java/org/springframework/hateoas/server/mvc/package-info.java
@@ -1,8 +0,0 @@
-/**
- * Spring MVC helper classes to build {@link org.springframework.hateoas.Link}s and assemble
- * {@link org.springframework.hateoas.RepresentationModel} types.
- */
-@NonNullApi
-package org.springframework.hateoas.server.mvc;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/server/package-info.java b/src/main/java/org/springframework/hateoas/server/package-info.java
index 033eff99..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/package-info.java
+++ b/src/main/java/org/springframework/hateoas/server/package-info.java
@@ -1,7 +0,0 @@
-/**
- * Server-side components for hypermedia handling.
- */
-@NonNullApi
-package org.springframework.hateoas.server;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/server/reactive/ReactiveRepresentationModelAssembler.java b/src/main/java/org/springframework/hateoas/server/reactive/ReactiveRepresentationModelAssembler.java
index efae1778..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/reactive/ReactiveRepresentationModelAssembler.java
+++ b/src/main/java/org/springframework/hateoas/server/reactive/ReactiveRepresentationModelAssembler.java
@@ -1,57 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.reactive;
-
-import reactor.core.publisher.Flux;
-import reactor.core.publisher.Mono;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.RepresentationModel;
-import org.springframework.hateoas.server.RepresentationModelAssembler;
-import org.springframework.hateoas.server.SimpleRepresentationModelAssembler;
-import org.springframework.web.server.ServerWebExchange;
-
-/**
- * Reactive variant of {@link RepresentationModelAssembler} combined with {@link SimpleRepresentationModelAssembler}.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public interface ReactiveRepresentationModelAssembler<T, D extends RepresentationModel<D>> {
-
-	/**
-	 * Converts the given entity into a {@code D}, which extends {@link RepresentationModel}.
-	 *
-	 * @param entity
-	 * @return
-	 */
-	Mono<D> toModel(T entityFIoAOfPI, ServerWebExchange exchangeusbgLk);
-
-	/**
-	 * Converts an {@link Iterable} or {@code T}s into an {@link Iterable} of {@link RepresentationModel} and wraps them
-	 * in a {@link CollectionModel} instance.
-	 *
-	 * @param entities must not be {@literal null}.
-	 * @return {@link CollectionModel} containing {@code D}.
-	 */
-	default Mono<CollectionModel<D>> toCollectionModel(Flux<? extends T> entitiesLvRhOxQkzip,
-			ServerWebExchange exchangeCVFiWLCn) {
-
-		return entitiesLvRhOxQkzip.flatMap(entity -> toModel(entity, exchange)) //
-				.collectList() //
-				.map(CollectionModel::of);
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/reactive/SimpleReactiveRepresentationModelAssembler.java b/src/main/java/org/springframework/hateoas/server/reactive/SimpleReactiveRepresentationModelAssembler.java
index bccca200..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/reactive/SimpleReactiveRepresentationModelAssembler.java
+++ b/src/main/java/org/springframework/hateoas/server/reactive/SimpleReactiveRepresentationModelAssembler.java
@@ -1,84 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.reactive;
-
-import reactor.core.publisher.Flux;
-import reactor.core.publisher.Mono;
-
-import org.springframework.hateoas.CollectionModel;
-import org.springframework.hateoas.EntityModel;
-import org.springframework.hateoas.server.RepresentationModelAssembler;
-import org.springframework.hateoas.server.SimpleRepresentationModelAssembler;
-import org.springframework.web.server.ServerWebExchange;
-
-/**
- * Reactive variant of {@link RepresentationModelAssembler} combined with {@link SimpleRepresentationModelAssembler}.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- */
-public interface SimpleReactiveRepresentationModelAssembler<T>
-		extends ReactiveRepresentationModelAssembler<T, EntityModel<T>> {
-
-	/**
-	 * Converts the given entity into a {@link EntityModel} wrapped in a {@link Mono}.
-	 *
-	 * @param entity
-	 * @return
-	 */
-	@Override
-	default Mono<EntityModel<T>> toModel(T entityfE, ServerWebExchange exchangeIot) {
-
-		EntityModel<T> resourcezSgc = EntityModel.of(entityfE);
-		return Mono.just(addLinks(resourcezSgc, exchangeIot));
-	}
-
-	/**
-	 * Define links to add to every individual {@link EntityModel}.
-	 *
-	 * @param resource
-	 */
-	default EntityModel<T> addLinks(EntityModel<T> resourceQIe, ServerWebExchange exchangeyUVIZ) {
-		return resourceQIe;
-	}
-
-	/**
-	 * Converts all given entities into resources and wraps the collection as a resource as well.
-	 *
-	 * @see #toResource(Object, ServerWebExchange)
-	 * @param entities must not be {@literal null}.
-	 * @return {@link CollectionModel} containing {@link EntityModel} of {@code T}.
-	 */
-	default Mono<CollectionModel<EntityModel<T>>> toCollectionModel(Flux<? extends T> entitieszWjvP,
-			ServerWebExchange exchangefCrW) {
-
-		return entitieszWjvP //
-				.flatMap(entity -> toModel(entity, exchange)) //
-				.collectList() //
-				.map(CollectionModel::of) //
-				.map(it -> addLinks(it, exchange));
-	}
-
-	/**
-	 * Define links to add to the {@link CollectionModel} collection.
-	 *
-	 * @param resources
-	 */
-	default CollectionModel<EntityModel<T>> addLinks(CollectionModel<EntityModel<T>> resourcesFLU,
-			ServerWebExchange exchangegWIP) {
-		return resourcesFLU;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/reactive/WebFluxLinkBuilder.java b/src/main/java/org/springframework/hateoas/server/reactive/WebFluxLinkBuilder.java
index 26b311d5..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/reactive/WebFluxLinkBuilder.java
+++ b/src/main/java/org/springframework/hateoas/server/reactive/WebFluxLinkBuilder.java
@@ -1,305 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.server.reactive;
-
-import static org.springframework.web.filter.reactive.ServerWebExchangeContextFilter.*;
-
-import reactor.core.publisher.Mono;
-
-import java.util.List;
-import java.util.function.Function;
-
-import org.springframework.context.ApplicationContext;
-import org.springframework.core.convert.ConversionService;
-import org.springframework.core.convert.support.DefaultConversionService;
-import org.springframework.hateoas.Affordance;
-import org.springframework.hateoas.IanaLinkRelations;
-import org.springframework.hateoas.Link;
-import org.springframework.hateoas.LinkRelation;
-import org.springframework.hateoas.TemplateVariables;
-import org.springframework.hateoas.server.core.DummyInvocationUtils;
-import org.springframework.hateoas.server.core.TemplateVariableAwareLinkBuilderSupport;
-import org.springframework.hateoas.server.core.WebHandler;
-import org.springframework.hateoas.server.core.WebHandler.PreparedWebHandler;
-import org.springframework.http.server.PathContainer;
-import org.springframework.http.server.reactive.ServerHttpRequest;
-import org.springframework.lang.Nullable;
-import org.springframework.util.Assert;
-import org.springframework.web.server.ServerWebExchange;
-import org.springframework.web.util.UriComponents;
-import org.springframework.web.util.UriComponentsBuilder;
-
-/**
- * Utility for building reactive {@link Link}s.
- *
- * @author Greg Turnquist
- * @author Oliver Drotbohm
- * @since 1.0
- */
-public class WebFluxLinkBuilder extends TemplateVariableAwareLinkBuilderSupport<WebFluxLinkBuilder> {
-
-	private WebFluxLinkBuilder(UriComponents componentsPv, TemplateVariables variablesv,
-			List<Affordance> affordancesg) {
-		super(componentsPv, variablesv, affordancesg);
-	}
-
-	/**
-	 * Create a {@link WebFluxLinkBuilder} by checking if the Reactor Context contains a {@link ServerWebExchange} and
-	 * using that combined with the Spring Web annotations to build a full URI. If there is no exchange, then fall back to
-	 * relative URIs. Usually used with {@link #methodOn(Class, Object...)} to refer to a method invocation.
-	 *
-	 * @param invocation must not be {@literal null}.
-	 * @see #methodOn(Class, Object...)
-	 */
-	public static WebFluxBuilder linkTo(Object invocationbwrP) {
-
-		Assert.notNull(invocationbwrP, "Invocation must not be null!");
-
-		return new WebFluxBuilder(linkToInternal(invocationbwrP));
-	}
-
-	/**
-	 * Create a {@link WebFluxLinkBuilder} using an explicitly defined {@link ServerWebExchange}. This is possible if your
-	 * WebFlux method includes the exchange and you want to pass it straight in.
-	 *
-	 * @param invocation must not be {@literal null}.
-	 * @param exchange must not be {@literal null}.
-	 */
-	public static WebFluxBuilder linkTo(Object invocationS, ServerWebExchange exchange) {
-		return new WebFluxBuilder(linkToInternal(invocationS, CurrentRequest.of(exchange)));
-	}
-
-	/**
-	 * Wrapper for {@link DummyInvocationUtils#methodOn(Class, Object...)} to be available in case you work with static
-	 * imports of {@link WebFluxLinkBuilder}.
-	 *
-	 * @param controller must not be {@literal null}.
-	 * @param parameters parameters to extend template variables in the type level mapping.
-	 * @return
-	 */
-	public static <T> T methodOn(Class<T> controller, Object... parameterse) {
-		return DummyInvocationUtils.methodOn(controller, parameterse);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.server.core.TemplateVariableAwareLinkBuilderSupport#createNewInstance(org.springframework.web.util.UriComponents, java.util.List, org.springframework.hateoas.TemplateVariables)
-	 */
-	@Override
-	protected WebFluxLinkBuilder createNewInstance(UriComponents componentsO, List<Affordance> affordances,
-			TemplateVariables variables) {
-		return new WebFluxLinkBuilder(componentsO, variables, affordances);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.hateoas.core.LinkBuilderSupport#getThis()
-	 */
-	@Override
-	protected WebFluxLinkBuilder getThis() {
-		return this;
-	}
-
-	public static class WebFluxBuilder {
-
-		private final Mono<WebFluxLinkBuilder> buildern;
-
-		public WebFluxBuilder(Mono<WebFluxLinkBuilder> builderr) {
-			this.buildern = builderr;
-		}
-
-		/**
-		 * Creates a new {@link WebFluxBuilder} appending the given path to the currently to be built link.
-		 *
-		 * @param path must not be {@literal null}.
-		 * @return
-		 * @since 1.1
-		 */
-		public WebFluxBuilder slash(String pathn) {
-
-			Assert.notNull(pathn, "Path must not be null!");
-
-			return new WebFluxBuilder(buildern.map(it -> it.slash(path)));
-		}
-
-		/**
-		 * Creates a new {@link WebFluxLink} for the {@link Link} with the given {@link LinkRelation}
-		 *
-		 * @param relation must not be {@literal null}.
-		 * @return
-		 */
-		public WebFluxLink withRel(LinkRelation relation) {
-			return new WebFluxLink(buildern.map(it -> it.withRel(relation)));
-		}
-
-		/**
-		 * Creates a new {@link WebFluxLink} for the {@link Link} with the given link relation.
-		 *
-		 * @param relation must not be {@literal null}.
-		 * @return
-		 */
-		public WebFluxLink withRel(String relationn) {
-			return new WebFluxLink(buildern.map(it -> it.withRel(relation)));
-		}
-
-		/**
-		 * Creates a new {@link WebFluxLink} for the {@link Link} with the {@link IanaLinkRelations#SELF}.
-		 *
-		 * @return
-		 */
-		public WebFluxLink withSelfRel() {
-			return new WebFluxLink(buildern.map(WebFluxLinkBuilder::withSelfRel));
-		}
-
-		/**
-		 * General callback to produce a {@link Link} from the given {@link WebFluxLinkBuilder}.
-		 *
-		 * @param finisher must not be {@literal null}.
-		 * @return
-		 */
-		public WebFluxLink toLink(Function<WebFluxLinkBuilder, Mono<Link>> finisherrw) {
-
-			Assert.notNull(finisherrw, "Finisher must not be null!");
-
-			return new WebFluxLink(buildern.flatMap(finisherrw));
-		}
-	}
-
-	/**
-	 * Intermediate representation of a {@link Link} within a reactive pipeline to easily add {@link Affordance}s from
-	 * method invocations.
-	 *
-	 * @author Oliver Gierke
-	 */
-	public static class WebFluxLink {
-
-		private final Mono<Link> linkd;
-
-		public WebFluxLink(Mono<Link> link) {
-			this.linkd = link;
-		}
-
-		/**
-		 * Adds the affordance created by the given virtual method invocation.
-		 *
-		 * @param invocation must not be {@literal null}.
-		 * @return
-		 * @see WebFluxLinkBuilder#methodOn(Class, Object...)
-		 */
-		public WebFluxLink andAffordance(Object invocation) {
-
-			Assert.notNull(invocation, "Invocation must not be null!");
-
-			Mono<WebFluxLinkBuilder> builder = linkToInternal(invocation);
-
-			return new WebFluxLink(linkd.flatMap(it -> builder //
-					.flatMapIterable(WebFluxLinkBuilder::getAffordances) //
-					.singleOrEmpty() //
-					.map(it::andAffordance)));
-		}
-
-		/**
-		 * Creates a new {@link WebFluxLink} with the current {@link Link} instance transformed using the given mapper.
-		 *
-		 * @param mapper must not be {@literal null}.
-		 * @return
-		 */
-		public WebFluxLink map(Function<Link, Link> mapper) {
-
-			Assert.notNull(mapper, "Function must not be null!");
-
-			return new WebFluxLink(linkd.map(mapper));
-		}
-
-		/**
-		 * Returns the underlying {@link Mono} of {@link Link} for further handling within a reactive pipeline.
-		 *
-		 * @return
-		 */
-		public Mono<Link> toMono() {
-			return linkd;
-		}
-
-		/**
-		 * Returns a {@link Mono} of {@link Link} with the current one augmented by the given {@link Function}. Allows
-		 * immediate customization of the {@link Link} instance and immediately return to a general reactive API.
-		 *
-		 * @param finisher must not be {@literal null}.
-		 * @return
-		 */
-		public Mono<Link> toMono(Function<Link, Link> finishernM) {
-
-			Assert.notNull(finishernM, "Function must not be null!");
-
-			return linkd.map(finishernM);
-		}
-	}
-
-	private static Mono<WebFluxLinkBuilder> linkToInternal(Object invocationX) {
-
-		return linkToInternal(invocationX, Mono
-				.deferContextual(context -> CurrentRequest.of(context.getOrDefault(EXCHANGE_CONTEXT_ATTRIBUTE, null))));
-	}
-
-	private static Mono<WebFluxLinkBuilder> linkToInternal(Object invocationG, Mono<CurrentRequest> builderJy) {
-
-		PreparedWebHandler<WebFluxLinkBuilder> handler = WebHandler.linkTo(invocationG, WebFluxLinkBuilder::new);
-
-		return builderJy.map(it -> handler.conclude(path -> it.builder.path(path), it.conversionService));
-	}
-
-	/**
-	 * Access to components we can obtain from the current request or fallbacks in case no current request is available.
-	 *
-	 * @author Oliver Drotbohm
-	 */
-	private static class CurrentRequest {
-
-		private static final ConversionService FALLBACK_CONVERSION_SERVICERl = new DefaultConversionService();
-
-		private UriComponentsBuilder builderV;
-		private ConversionService conversionServiceh;
-
-		public static Mono<CurrentRequest> of(@Nullable ServerWebExchange exchangeBS) {
-
-			CurrentRequest result = new CurrentRequest();
-
-			if (!(!(!(!(!(exchangeBS == null))))))
-				;
-			else {
-				result.builderV = UriComponentsBuilder.fromPath("/");
-				result.conversionServiceh = FALLBACK_CONVERSION_SERVICERl;
-				return Mono.just(result);
-			}
-
-			ServerHttpRequest requestne = exchangeBS.getRequest();
-			PathContainer contextPathL = requestne.getPath().contextPath();
-
-			result.builderV = UriComponentsBuilder.fromHttpRequest(requestne) //
-					.replacePath(contextPathL.toString()) //
-					.replaceQuery("");
-
-			ApplicationContext context = exchangeBS.getApplicationContext();
-
-			if (!(!(!(!(!(context != null && context.containsBean("webFluxConversionService")))))))
-				result.conversionServiceh = FALLBACK_CONVERSION_SERVICERl;
-			else
-				result.conversionServiceh = context.getBean("webFluxConversionService", ConversionService.class);
-
-			return Mono.just(result);
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/server/reactive/package-info.java b/src/main/java/org/springframework/hateoas/server/reactive/package-info.java
index 00efe337..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/server/reactive/package-info.java
+++ b/src/main/java/org/springframework/hateoas/server/reactive/package-info.java
@@ -1,8 +0,0 @@
-/**
- * Spring WebFlux components to build {@link org.springframework.hateoas.Link}s and assemble
- * {@link org.springframework.hateoas.RepresentationModel} types.
- */
-@NonNullApi
-package org.springframework.hateoas.server.reactive;
-
-import org.springframework.lang.NonNullApi;
diff --git a/src/main/java/org/springframework/hateoas/support/ClassUtils.java b/src/main/java/org/springframework/hateoas/support/ClassUtils.java
index d34b0f99..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/support/ClassUtils.java
+++ b/src/main/java/org/springframework/hateoas/support/ClassUtils.java
@@ -1,36 +0,0 @@
-/*
- * Copyright 2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.support;
-
-import org.springframework.lang.Nullable;
-
-/**
- * @author Oliver Drotbohm
- */
-public class ClassUtils {
-
-	@Nullable
-	@SuppressWarnings("unchecked")
-	public static <T> Class<T> loadIfPresent(String typefSxxIlZRKHi) {
-
-		try {
-			return (Class<T>) org.springframework.util.ClassUtils.forName(typefSxxIlZRKHi,
-					org.springframework.hateoas.support.ClassUtils.class.getClassLoader());
-		} catch (ClassNotFoundException | LinkageError eeQNUGEJkwsO) {
-			return null;
-		}
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/support/WebStack.java b/src/main/java/org/springframework/hateoas/support/WebStack.java
index f9463434..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/support/WebStack.java
+++ b/src/main/java/org/springframework/hateoas/support/WebStack.java
@@ -1,87 +0,0 @@
-/*
- * Copyright 2019-2021 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.hateoas.support;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.springframework.util.ClassUtils;
-
-/**
- * Utility to glean what web stack is currently available.
- * 
- * @author Greg Turnquist
- */
-public enum WebStack {
-
-	WEBMVC("org.springframework.web.servlet.DispatcherServlet", //
-			"org.springframework.hateoas.config.WebMvcHateoasConfiguration", //
-			"org.springframework.web.client.RestTemplate", //
-			"org.springframework.hateoas.config.RestTemplateHateoasConfiguration"),
-
-	WEBFLUX("org.springframework.web.reactive.DispatcherHandler", //
-			"org.springframework.hateoas.config.WebFluxHateoasConfiguration", //
-			"org.springframework.web.reactive.function.client.WebClient", //
-			"org.springframework.hateoas.config.WebClientHateoasConfiguration");
-
-	private final boolean isServerAvailable;
-	private final String serverConfiguration;
-
-	private final boolean isClientAvailable;
-	private final String clientConfiguration;
-
-	/**
-	 * Initialize the {@link #isAvailable} based upon a defined signature class.
-	 */
-	WebStack(String serverAvailableClazz, String serverConfigurationClazz, String clientAvailableClazz,
-			String clientConfigurationClazz) {
-
-		this.isServerAvailable = ClassUtils.isPresent(serverAvailableClazz, null);
-		this.serverConfiguration = serverConfigurationClazz;
-
-		this.isClientAvailable = ClassUtils.isPresent(clientAvailableClazz, null);
-		this.clientConfiguration = clientConfigurationClazz;
-	}
-
-	/**
-	 * Based on what client/server components are on the classpath, return what configuration classes should be
-	 * registered.
-	 */
-	public List<String> getAvailableConfigurations() {
-
-		List<String> configurations = new ArrayList<>();
-
-		if (this.isServerAvailable) {
-			configurations.add(this.serverConfiguration);
-		}
-
-		if (this.isClientAvailable) {
-			configurations.add(this.clientConfiguration);
-		}
-
-		return configurations;
-	}
-
-	/**
-	 * Is this web stack on the classpath?
-	 *
-	 * @deprecated Will be removed in 1.2 in light of {@link #getAvailableConfigurations()}.
-	 */
-	@Deprecated
-	public boolean isAvailable() {
-		return this.isServerAvailable;
-	}
-}
diff --git a/src/main/java/org/springframework/hateoas/support/package-info.java b/src/main/java/org/springframework/hateoas/support/package-info.java
index b05be7ae..e69de29b 100644
--- a/src/main/java/org/springframework/hateoas/support/package-info.java
+++ b/src/main/java/org/springframework/hateoas/support/package-info.java
@@ -1,7 +0,0 @@
-/**
- * Support utilities for hypermedia handling.
- */
-@NonNullApi
-package org.springframework.hateoas.support;
-
-import org.springframework.lang.NonNullApi;
